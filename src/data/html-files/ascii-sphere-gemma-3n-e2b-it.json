{
  "title": "ASCII Sphere",
  "htmlContent": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <title>ASCII Sphere</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/p5@1.4.0/lib/p5.js\"></script>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n            /* Hide scrollbars */\r\n            background-color: black;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n            /* Prevents extra space below the canvas */\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <script>\r\n        let sphereData = []; // Array to hold the ASCII characters and their positions\r\n        let numChars = 64; // Number of ASCII characters to use\r\n        let radius = 100; // Radius of the sphere\r\n        let rotationSpeed = 0.01; // Rotation speed in radians per frame\r\n        let colorMap = {}; // Map to store the color of each ASCII character\r\n\r\n        function setup() {\r\n            createCanvas(600, 600);\r\n            sphereData = [];\r\n\r\n            // Generate ASCII characters and their positions\r\n            for (let i = 0; i < numChars; i++) {\r\n                let x = random(-radius, radius);\r\n                let y = random(-radius, radius);\r\n                let z = random(-radius, radius);\r\n                let charCode = int(random(32, 126)); // ASCII range\r\n                let charValue = String.fromCharCode(charCode);\r\n\r\n                // Calculate distance from origin for sphere\r\n                let distance = Math.sqrt(x * x + y * y + z * z);\r\n\r\n                // Determine color based on distance\r\n                let colorValue = map(distance, 0, radius, 0, 255); // Scale distance to 0-255\r\n                colorMap[charValue] = color(colorValue, colorValue, colorValue); // Pure white\r\n\r\n                // Add the character to the sphereData array\r\n                sphereData.push({\r\n                    x: x,\r\n                    y: y,\r\n                    z: z,\r\n                    char: charValue,\r\n                    color: colorMap[charValue]\r\n                });\r\n            }\r\n\r\n            // Initialize the sphere\r\n            for (let i = 0; i < sphereData.length; i++) {\r\n                //This is redundant, but it ensures the data is properly initialized.\r\n                sphereData[i].char = sphereData[i].char;\r\n                sphereData[i].color = sphereData[i].color;\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n            background(0); // Black background\r\n\r\n            // Rotate the sphere\r\n            rotateZ(rotationSpeed);\r\n\r\n            // Draw the sphere\r\n            for (let i = 0; i < sphereData.length; i++) {\r\n                let x = sphereData[i].x;\r\n                let y = sphereData[i].y;\r\n                let z = sphereData[i].z;\r\n\r\n                // Calculate the distance from the origin\r\n                let distance = Math.sqrt(x * x + y * y + z * z);\r\n\r\n                // Draw the ASCII character\r\n                fill(sphereData[i].color);\r\n                textAlign(CENTER, CENTER);\r\n                text(sphereData[i].char, x, y);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "ascii-sphere-gemma-3n-e2b-it",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": "Astronomy",
    "timestamp": "2025-08-04T21:59:57.994Z",
    "model": "gemma-3n-e2b-it",
    "description": "An interactive web application featuring astronomy."
  }
}
