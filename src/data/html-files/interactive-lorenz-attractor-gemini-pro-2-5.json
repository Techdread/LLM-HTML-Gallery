{
  "title": "Interactive Lorenz Attractor",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Interactive Lorenz Attractor</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n            background-color: #111;\r\n            color: #eee;\r\n            font-family: 'Inter', sans-serif;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #ui-container {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background-color: rgba(40, 40, 40, 0.8);\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);\r\n            max-width: 300px;\r\n            /* Limit width on larger screens */\r\n        }\r\n\r\n        .control-group {\r\n            margin-bottom: 12px;\r\n        }\r\n\r\n        label {\r\n            display: block;\r\n            margin-bottom: 4px;\r\n            font-size: 0.9em;\r\n            font-weight: 500;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n            width: 100%;\r\n            cursor: pointer;\r\n            accent-color: #60a5fa;\r\n            /* Tailwind blue-400 */\r\n        }\r\n\r\n        input[type=\"range\"]:hover {\r\n            accent-color: #93c5fd;\r\n            /* Tailwind blue-300 */\r\n        }\r\n\r\n        output {\r\n            display: inline-block;\r\n            min-width: 40px;\r\n            /* Ensure consistent width */\r\n            text-align: right;\r\n            font-weight: bold;\r\n            font-size: 0.9em;\r\n            margin-left: 5px;\r\n            background-color: rgba(0, 0, 0, 0.3);\r\n            padding: 2px 5px;\r\n            border-radius: 4px;\r\n        }\r\n\r\n        button {\r\n            background-color: #3b82f6;\r\n            /* Tailwind blue-500 */\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 15px;\r\n            border-radius: 6px;\r\n            cursor: pointer;\r\n            font-size: 0.9em;\r\n            transition: background-color 0.2s ease;\r\n            margin-top: 10px;\r\n        }\r\n\r\n        button:hover {\r\n            background-color: #2563eb;\r\n            /* Tailwind blue-600 */\r\n        }\r\n\r\n        /* Basic responsive adjustments */\r\n        @media (max-width: 400px) {\r\n            #ui-container {\r\n                max-width: calc(100% - 20px);\r\n                /* Adjust width for small screens */\r\n                top: 5px;\r\n                left: 5px;\r\n                padding: 10px;\r\n            }\r\n\r\n            label,\r\n            output,\r\n            button {\r\n                font-size: 0.8em;\r\n            }\r\n        }\r\n    </style>\r\n    <script type=\"importmap\">\r\n        {\r\n            \"imports\": {\r\n                \"three\": \"https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js\",\r\n                \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/\"\r\n            }\r\n        }\r\n    </script>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"ui-container\">\r\n        <div class=\"control-group\">\r\n            <label for=\"sigma\">Sigma (σ): <output id=\"sigma-value\">10.0</output></label>\r\n            <input type=\"range\" id=\"sigma\" name=\"sigma\" min=\"0.1\" max=\"50\" step=\"0.1\" value=\"10\">\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label for=\"rho\">Rho (ρ): <output id=\"rho-value\">28.0</output></label>\r\n            <input type=\"range\" id=\"rho\" name=\"rho\" min=\"0.1\" max=\"100\" step=\"0.1\" value=\"28\">\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label for=\"beta\">Beta (β): <output id=\"beta-value\">2.67</output></label>\r\n            <input type=\"range\" id=\"beta\" name=\"beta\" min=\"0.1\" max=\"10\" step=\"0.01\" value=\"2.6667\">\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label for=\"speed\">Speed: <output id=\"speed-value\">1.0</output></label>\r\n            <input type=\"range\" id=\"speed\" name=\"speed\" min=\"0.1\" max=\"5\" step=\"0.1\" value=\"1\">\r\n        </div>\r\n        <button id=\"reset-button\">Reset Simulation</button>\r\n    </div>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        let scene, camera, renderer, controls;\r\n        let line, geometry, positions, colors;\r\n        let currentPointIndex = 0;\r\n        const MAX_POINTS = 15000; // Maximum number of points in the line trail\r\n        const dt = 0.01; // Time step for integration\r\n\r\n        // Lorenz system parameters\r\n        let sigma = 10.0;\r\n        let rho = 28.0;\r\n        let beta = 8.0 / 3.0;\r\n        let speed = 1.0; // Simulation speed multiplier\r\n\r\n        // Current state\r\n        let x = 0.1, y = 0, z = 0;\r\n\r\n        // UI Elements\r\n        const sigmaSlider = document.getElementById('sigma');\r\n        const rhoSlider = document.getElementById('rho');\r\n        const betaSlider = document.getElementById('beta');\r\n        const speedSlider = document.getElementById('speed');\r\n        const sigmaValue = document.getElementById('sigma-value');\r\n        const rhoValue = document.getElementById('rho-value');\r\n        const betaValue = document.getElementById('beta-value');\r\n        const speedValue = document.getElementById('speed-value');\r\n        const resetButton = document.getElementById('reset-button');\r\n\r\n        function init() {\r\n            // --- Scene Setup ---\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x111111); // Dark background\r\n\r\n            // --- Camera Setup ---\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 0, 50); // Position camera to view the attractor\r\n\r\n            // --- Renderer Setup ---\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // --- Controls ---\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true; // Smooth camera movement\r\n            controls.dampingFactor = 0.05;\r\n            controls.screenSpacePanning = false;\r\n            controls.minDistance = 10;\r\n            controls.maxDistance = 500;\r\n\r\n            // --- Line Setup ---\r\n            geometry = new THREE.BufferGeometry();\r\n            positions = new Float32Array(MAX_POINTS * 3); // x, y, z for each point\r\n            colors = new Float32Array(MAX_POINTS * 3); // r, g, b for each point\r\n\r\n            // Initialize arrays (optional, but good practice)\r\n            positions.fill(0);\r\n            colors.fill(0);\r\n\r\n            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3).setUsage(THREE.DynamicDrawUsage));\r\n            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3).setUsage(THREE.DynamicDrawUsage));\r\n\r\n            // Set initial draw range to 0\r\n            geometry.setDrawRange(0, 0);\r\n\r\n            // --- Material ---\r\n            // Use vertex colors to create the gradient\r\n            const material = new THREE.LineBasicMaterial({\r\n                vertexColors: true,\r\n                linewidth: 1.5 // Note: linewidth > 1 may not work on all platforms/drivers\r\n            });\r\n\r\n            // --- Line Object ---\r\n            line = new THREE.Line(geometry, material);\r\n            scene.add(line);\r\n\r\n            // --- UI Event Listeners ---\r\n            sigmaSlider.addEventListener('input', (e) => {\r\n                sigma = parseFloat(e.target.value);\r\n                sigmaValue.textContent = sigma.toFixed(1);\r\n                // Consider resetting on major parameter changes if desired\r\n                // resetSimulation();\r\n            });\r\n            rhoSlider.addEventListener('input', (e) => {\r\n                rho = parseFloat(e.target.value);\r\n                rhoValue.textContent = rho.toFixed(1);\r\n                // resetSimulation();\r\n            });\r\n            betaSlider.addEventListener('input', (e) => {\r\n                beta = parseFloat(e.target.value);\r\n                betaValue.textContent = beta.toFixed(2);\r\n                // resetSimulation();\r\n            });\r\n            speedSlider.addEventListener('input', (e) => {\r\n                speed = parseFloat(e.target.value);\r\n                speedValue.textContent = speed.toFixed(1);\r\n            });\r\n            resetButton.addEventListener('click', resetSimulation);\r\n\r\n            // --- Initial UI Values ---\r\n            updateUIValues();\r\n\r\n\r\n            // --- Resize Listener ---\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n            // --- Start Animation ---\r\n            animate();\r\n        }\r\n\r\n        function updateUIValues() {\r\n            sigmaSlider.value = sigma;\r\n            rhoSlider.value = rho;\r\n            betaSlider.value = beta;\r\n            speedSlider.value = speed;\r\n            sigmaValue.textContent = sigma.toFixed(1);\r\n            rhoValue.textContent = rho.toFixed(1);\r\n            betaValue.textContent = beta.toFixed(2);\r\n            speedValue.textContent = speed.toFixed(1);\r\n        }\r\n\r\n\r\n        function resetSimulation() {\r\n            // Reset state variables\r\n            x = 0.1;\r\n            y = 0;\r\n            z = 0;\r\n            currentPointIndex = 0;\r\n\r\n            // Clear geometry data\r\n            positions.fill(0);\r\n            colors.fill(0);\r\n\r\n            // Update buffer attributes\r\n            geometry.attributes.position.needsUpdate = true;\r\n            geometry.attributes.color.needsUpdate = true;\r\n\r\n            // Reset draw range\r\n            geometry.setDrawRange(0, 0);\r\n\r\n            console.log(\"Simulation Reset\");\r\n        }\r\n\r\n        function lorenzStep() {\r\n            // Calculate derivatives using Euler method\r\n            const dx = sigma * (y - x);\r\n            const dy = x * (rho - z) - y;\r\n            const dz = x * y - beta * z;\r\n\r\n            // Update position\r\n            x += dx * dt;\r\n            y += dy * dt;\r\n            z += dz * dt;\r\n        }\r\n\r\n        function addPointToLine() {\r\n            const index = currentPointIndex % MAX_POINTS; // Wrap around the buffer\r\n            const offset = index * 3;\r\n\r\n            // Store new position\r\n            positions[offset] = x;\r\n            positions[offset + 1] = y;\r\n            positions[offset + 2] = z;\r\n\r\n            // Calculate color based on index (creates a gradient over the trail)\r\n            const hue = (currentPointIndex / 50) % 1; // Cycle hue over time/points\r\n            const color = new THREE.Color().setHSL(hue, 0.8, 0.6); // Saturation 0.8, Lightness 0.6\r\n\r\n            colors[offset] = color.r;\r\n            colors[offset + 1] = color.g;\r\n            colors[offset + 2] = color.b;\r\n\r\n            // Update the draw range\r\n            // If we haven't filled the buffer yet, increase the count\r\n            // Otherwise, the count stays at MAX_POINTS\r\n            const drawCount = Math.min(currentPointIndex + 1, MAX_POINTS);\r\n            geometry.setDrawRange(0, drawCount);\r\n\r\n            // Tell Three.js to update the buffers\r\n            geometry.attributes.position.needsUpdate = true;\r\n            geometry.attributes.color.needsUpdate = true;\r\n\r\n            // Mark bounds dirty after first point added\r\n            if (currentPointIndex === 0) {\r\n                geometry.computeBoundingSphere(); // Important for initial rendering\r\n            }\r\n\r\n\r\n            currentPointIndex++;\r\n        }\r\n\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            // Calculate multiple steps per frame based on speed\r\n            const stepsPerFrame = Math.max(1, Math.round(speed * 5)); // Adjust multiplier (5) as needed\r\n            for (let i = 0; i < stepsPerFrame; i++) {\r\n                lorenzStep();\r\n                addPointToLine();\r\n            }\r\n\r\n            controls.update(); // Required if enableDamping is true\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // --- Run Initialization ---\r\n        init();\r\n\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "interactive-lorenz-attractor-gemini-pro-2-5",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Simulation"
    ],
    "timestamp": "2025-08-04T21:59:57.955Z",
    "model": "gemini-pro-2.5",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, astronomy, simulation."
  }
}
