{
  "title": "Dyson Sphere Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Dyson Sphere Simulation</title>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            overflow: hidden;\r\n            font-family: Arial, sans-serif;\r\n            background: #000;\r\n            color: #fff;\r\n        }\r\n\r\n        #container {\r\n            position: fixed;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n\r\n        #controls {\r\n            position: fixed;\r\n            bottom: 20px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background: rgba(0, 0, 0, 0.7);\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            z-index: 1000;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 10px;\r\n            backdrop-filter: blur(5px);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        .control-group {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n        }\r\n\r\n        button {\r\n            background: #2196F3;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 16px;\r\n            border-radius: 4px;\r\n            cursor: pointer;\r\n            transition: background 0.3s;\r\n        }\r\n\r\n        button:hover {\r\n            background: #1976D2;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n            width: 200px;\r\n        }\r\n\r\n        #stats {\r\n            position: fixed;\r\n            top: 20px;\r\n            right: 20px;\r\n            background: rgba(0, 0, 0, 0.7);\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n            font-family: monospace;\r\n            backdrop-filter: blur(5px);\r\n            border: 1px solid rgba(255, 255, 255, 0.1);\r\n        }\r\n\r\n        label {\r\n            color: #fff;\r\n            font-size: 14px;\r\n        }\r\n    </style>\r\n    <script async src=\"https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js\"></script>\r\n    <script type=\"importmap\">\r\n    {\r\n        \"imports\": {\r\n            \"three\": \"https://unpkg.com/three@0.159.0/build/three.module.js\",\r\n            \"three/addons/\": \"https://unpkg.com/three@0.159.0/examples/jsm/\"\r\n        }\r\n    }\r\n    </script>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"container\"></div>\r\n    <div id=\"controls\">\r\n        <div class=\"control-group\">\r\n            <button id=\"playPause\">Start Construction</button>\r\n            <label>\r\n                Progress:\r\n                <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" value=\"0\">\r\n            </label>\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label>\r\n                Star Brightness:\r\n                <input type=\"range\" id=\"brightness\" min=\"0\" max=\"100\" value=\"50\">\r\n            </label>\r\n            <label>\r\n                <input type=\"checkbox\" id=\"showCollectors\" checked>\r\n                Show Collectors\r\n            </label>\r\n        </div>\r\n    </div>\r\n    <div id=\"stats\">\r\n        <div>Completion: <span id=\"completion\">0%</span></div>\r\n        <div>Collectors: <span id=\"collectorCount\">0</span></div>\r\n        <div>Est. Time: <span id=\"estimatedTime\">--:--</span></div>\r\n    </div>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        // Scene setup\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        document.getElementById('container').appendChild(renderer.domElement);\r\n\r\n        // Controls\r\n        const controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.05;\r\n        camera.position.z = 5;\r\n\r\n        // Star creation\r\n        const starGeometry = new THREE.SphereGeometry(1, 64, 64);\r\n        const starMaterial = new THREE.ShaderMaterial({\r\n            uniforms: {\r\n                time: { value: 0 },\r\n                brightness: { value: 0.5 }\r\n            },\r\n            vertexShader: `\r\n                varying vec3 vNormal;\r\n                varying vec2 vUv;\r\n                \r\n                void main() {\r\n                    vNormal = normalize(normalMatrix * normal);\r\n                    vUv = uv;\r\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                uniform float time;\r\n                uniform float brightness;\r\n                varying vec3 vNormal;\r\n                varying vec2 vUv;\r\n\r\n                float noise(vec2 p) {\r\n                    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\r\n                }\r\n\r\n                void main() {\r\n                    // Base star color\r\n                    vec3 baseColor = vec3(1.0, 0.6, 0.1);\r\n                    \r\n                    // Create sunspots\r\n                    float spots = noise(vUv * 10.0 + time * 0.1);\r\n                    spots = smoothstep(0.4, 0.6, spots);\r\n                    \r\n                    // Create corona effect\r\n                    float corona = pow(1.0 - abs(dot(vNormal, vec3(0.0, 0.0, 1.0))), 2.0);\r\n                    corona *= 0.5;\r\n                    \r\n                    // Combine effects\r\n                    vec3 finalColor = mix(baseColor * 0.7, baseColor, spots);\r\n                    finalColor += vec3(1.0, 0.6, 0.2) * corona;\r\n                    finalColor *= brightness;\r\n\r\n                    gl_FragColor = vec4(finalColor, 1.0);\r\n                }\r\n            `\r\n        });\r\n\r\n        const star = new THREE.Mesh(starGeometry, starMaterial);\r\n        scene.add(star);\r\n\r\n        // Dyson Sphere setup\r\n        const totalCollectors = 1000;\r\n        const collectors = [];\r\n        const collectorsGroup = new THREE.Group();\r\n        scene.add(collectorsGroup);\r\n\r\n        function createCollector() {\r\n            const geometry = new THREE.BoxGeometry(0.1, 0.1, 0.02);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0x3498db,\r\n                emissive: 0x2980b9,\r\n                specular: 0xffffff,\r\n                shininess: 100\r\n            });\r\n            return new THREE.Mesh(geometry, material);\r\n        }\r\n\r\n        function positionCollector(collector, index, progress) {\r\n            const phi = Math.acos(-1 + (2 * index) / totalCollectors);\r\n            const theta = Math.sqrt(totalCollectors * Math.PI) * phi;\r\n            const radius = 2;\r\n\r\n            collector.position.x = radius * Math.cos(theta) * Math.sin(phi);\r\n            collector.position.y = radius * Math.sin(theta) * Math.sin(phi);\r\n            collector.position.z = radius * Math.cos(phi);\r\n\r\n            collector.lookAt(0, 0, 0);\r\n        }\r\n\r\n        // Initialize collectors\r\n        for (let i = 0; i < totalCollectors; i++) {\r\n            const collector = createCollector();\r\n            collectors.push(collector);\r\n            collectorsGroup.add(collector);\r\n            positionCollector(collector, i, 0);\r\n            collector.visible = false;\r\n        }\r\n\r\n        // Lighting\r\n        const ambientLight = new THREE.AmbientLight(0x404040);\r\n        scene.add(ambientLight);\r\n\r\n        const pointLight = new THREE.PointLight(0xffffff, 2);\r\n        pointLight.position.set(5, 5, 5);\r\n        scene.add(pointLight);\r\n\r\n        // Animation state\r\n        let isPlaying = false;\r\n        let currentProgress = 0;\r\n        const constructionSpeed = 0.1; // Progress per frame\r\n\r\n        // Controls setup\r\n        const playPauseBtn = document.getElementById('playPause');\r\n        const progressSlider = document.getElementById('progress');\r\n        const brightnessSlider = document.getElementById('brightness');\r\n        const showCollectorsCheckbox = document.getElementById('showCollectors');\r\n\r\n        playPauseBtn.addEventListener('click', () => {\r\n            isPlaying = !isPlaying;\r\n            playPauseBtn.textContent = isPlaying ? 'Pause Construction' : 'Start Construction';\r\n        });\r\n\r\n        progressSlider.addEventListener('input', (e) => {\r\n            currentProgress = parseInt(e.target.value);\r\n            updateConstruction(currentProgress);\r\n        });\r\n\r\n        brightnessSlider.addEventListener('input', (e) => {\r\n            const value = parseInt(e.target.value) / 100;\r\n            starMaterial.uniforms.brightness.value = value;\r\n        });\r\n\r\n        showCollectorsCheckbox.addEventListener('change', (e) => {\r\n            collectorsGroup.visible = e.target.checked;\r\n        });\r\n\r\n        function updateConstruction(progress) {\r\n            const visibleCollectors = Math.floor((progress / 100) * totalCollectors);\r\n            collectors.forEach((collector, index) => {\r\n                collector.visible = index < visibleCollectors;\r\n            });\r\n\r\n            // Update stats\r\n            document.getElementById('completion').textContent = `${progress}%`;\r\n            document.getElementById('collectorCount').textContent = visibleCollectors;\r\n            const timeRemaining = Math.ceil((100 - progress) / constructionSpeed / 60);\r\n            document.getElementById('estimatedTime').textContent =\r\n                timeRemaining > 0 ? `${timeRemaining}m remaining` : 'Complete';\r\n        }\r\n\r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            // Update star shader time\r\n            starMaterial.uniforms.time.value += 0.01;\r\n\r\n            // Update construction progress\r\n            if (isPlaying && currentProgress < 100) {\r\n                currentProgress += constructionSpeed;\r\n                currentProgress = Math.min(currentProgress, 100);\r\n                progressSlider.value = currentProgress;\r\n                updateConstruction(currentProgress);\r\n            }\r\n\r\n            // Rotate collectors slightly\r\n            collectorsGroup.rotation.y += 0.001;\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // Handle window resizing\r\n        window.addEventListener('resize', () => {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        });\r\n\r\n        // Start animation\r\n        animate();\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "dyson-sphere-claude-3-7",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Procedural Generation",
      "Astronomy",
      "Simulation"
    ],
    "timestamp": "2025-08-04T21:59:57.722Z",
    "model": "claude-3.7",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, procedural generation, astronomy, simulation."
  }
}
