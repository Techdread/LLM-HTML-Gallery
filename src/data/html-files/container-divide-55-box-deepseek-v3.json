{
  "title": "3D Container Visualization",
  "htmlContent": "<!DOCTYPE html>\n<html>\n<head>\n    <title>3D Container Visualization</title>\n    <style>\n        body { margin: 0; overflow: hidden; }\n        #info {\n            position: absolute;\n            top: 10px;\n            left: 10px;\n            background: rgba(255, 255, 255, 0.9);\n            padding: 10px;\n            border-radius: 5px;\n            font-family: Arial, sans-serif;\n        }\n        .control-panel {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            background: rgba(255, 255, 255, 0.9);\n            padding: 10px;\n            border-radius: 5px;\n        }\n    </style>\n    <!-- Import Map for ES Modules -->\n    <script type=\"importmap\">\n        {\n          \"imports\": {\n            \"three\": \"https://cdn.skypack.dev/three@0.128.0\",\n            \"three/addons/\": \"https://cdn.skypack.dev/three@0.128.0/examples/jsm/\"\n          }\n        }\n    </script>\n</head>\n<body>\n    <div id=\"info\">Select a box to see details</div>\n    <div class=\"control-panel\">\n        <button id=\"toggleVisibility\">Toggle Selected Visibility</button>\n    </div>\n    <script type=\"module\">\n        import * as THREE from 'three';\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\n        let scene, camera, renderer, controls;\n        let container, boxes = [];\n        let selectedBox = null;\n        const containerSize = { width: 1200, height: 1000, depth: 1200 };\n\n        class BoxGenerator {\n            constructor() {\n                this.usedDimensions = new Set();\n                this.currentPosition = { x: 0, y: 0, z: 0 };\n            }\n\n            generateUniqueDimensions() {\n                let dimensions;\n                do {\n                    dimensions = {\n                        w: Math.floor(Math.random() * 200) + 50,\n                        h: Math.floor(Math.random() * 150) + 50,\n                        d: Math.floor(Math.random() * 200) + 50\n                    };\n                } while (this.usedDimensions.has(`${dimensions.w},${dimensions.h},${dimensions.d}`));\n                \n                this.usedDimensions.add(`${dimensions.w},${dimensions.h},${dimensions.d}`);\n                return dimensions;\n            }\n\n            generateValidPosition(dimensions) {\n                return {\n                    x: Math.random() * (containerSize.width - dimensions.w),\n                    y: Math.random() * (containerSize.height - dimensions.h),\n                    z: Math.random() * (containerSize.depth - dimensions.d)\n                };\n            }\n\n            generateBoxes(num) {\n                const boxes = [];\n                for (let i = 0; i < num; i++) {\n                    const dim = this.generateUniqueDimensions();\n                    const pos = this.generateValidPosition(dim);\n                    boxes.push({ dimensions: dim, position: pos });\n                }\n                return boxes;\n            }\n        }\n\n        function init() {\n            // Scene setup\n            scene = new THREE.Scene();\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 10000);\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            document.body.appendChild(renderer.domElement);\n\n            // Lighting\n            const light = new THREE.DirectionalLight(0xffffff, 1);\n            light.position.set(0, 500, 1000);\n            scene.add(light);\n            scene.add(new THREE.AmbientLight(0x404040));\n\n            // Create container\n            const containerGeometry = new THREE.BoxGeometry(\n                containerSize.width,\n                containerSize.height,\n                containerSize.depth\n            );\n            const containerMaterial = new THREE.MeshPhongMaterial({\n                color: 0x888888,\n                transparent: true,\n                opacity: 0.1\n            });\n            container = new THREE.Mesh(containerGeometry, containerMaterial);\n            scene.add(container);\n\n            // Generate boxes\n            const generator = new BoxGenerator();\n            const boxData = generator.generateBoxes(55);\n\n            boxData.forEach(data => {\n                const geometry = new THREE.BoxGeometry(\n                    data.dimensions.w,\n                    data.dimensions.h,\n                    data.dimensions.d\n                );\n                const material = new THREE.MeshPhongMaterial({\n                    color: new THREE.Color(Math.random(), Math.random(), Math.random()),\n                    transparent: true,\n                    opacity: 0.8\n                });\n                const box = new THREE.Mesh(geometry, material);\n                box.position.set(\n                    data.position.x - containerSize.width/2 + data.dimensions.w/2,\n                    data.position.y - containerSize.height/2 + data.dimensions.h/2,\n                    data.position.z - containerSize.depth/2 + data.dimensions.d/2\n                );\n                box.userData.dimensions = data.dimensions;\n                boxes.push(box);\n                scene.add(box);\n            });\n\n            // Camera positioning\n            camera.position.set(2000, 2000, 2000);\n            camera.lookAt(0, 0, 0);\n\n            // Controls\n            controls = new OrbitControls(camera, renderer.domElement);\n            controls.update();\n\n            // Raycasting setup\n            renderer.domElement.addEventListener('click', onDocumentClick, false);\n        }\n\n        function onDocumentClick(event) {\n            const mouse = new THREE.Vector2();\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n\n            const raycaster = new THREE.Raycaster();\n            raycaster.setFromCamera(mouse, camera);\n\n            const intersects = raycaster.intersectObjects(boxes);\n            if (intersects.length > 0) {\n                const selected = intersects[0].object;\n                if (selected === selectedBox) {\n                    // Deselect\n                    selected.material.emissive.setHex(0x000000);\n                    selectedBox = null;\n                    document.getElementById('info').innerHTML = \"Select a box to see details\";\n                } else {\n                    // Deselect previous\n                    if (selectedBox) {\n                        selectedBox.material.emissive.setHex(0x000000);\n                    }\n                    // Select new\n                    selectedBox = selected;\n                    selected.material.emissive.setHex(0xffff00);\n                    const dim = selected.userData.dimensions;\n                    document.getElementById('info').innerHTML = \n                        `Dimensions: ${dim.w.toFixed(1)} x ${dim.h.toFixed(1)} x ${dim.d.toFixed(1)}<br>\n                         Volume: ${(dim.w * dim.h * dim.d).toLocaleString()}`;\n                }\n            }\n        }\n\n        document.getElementById('toggleVisibility').addEventListener('click', () => {\n            if (selectedBox) {\n                selectedBox.visible = !selectedBox.visible;\n            }\n        });\n\n        function animate() {\n            requestAnimationFrame(animate);\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        init();\n        animate();\n\n        window.addEventListener('resize', () => {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        });\n    </script>\n</body>\n</html>",
  "id": "container-divide-55-box-deepseek-v3",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.792Z",
    "model": "deepseek-v3",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, architecture."
  }
}
