{
  "title": "3D Color Matcher",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>3D Color Matcher</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n            font-family: Arial, sans-serif;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #hud {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            color: white;\r\n            font-size: 24px;\r\n        }\r\n\r\n        #game-over {\r\n            display: none;\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            background-color: rgba(0, 0, 0, 0.7);\r\n            color: white;\r\n            font-size: 48px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n\r\n        #restart-btn {\r\n            margin-top: 20px;\r\n            padding: 10px 20px;\r\n            font-size: 24px;\r\n            cursor: pointer;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"hud\">\r\n        Score: <span id=\"score\">0</span> | Lives: <span id=\"lives\">3</span>\r\n    </div>\r\n    <div id=\"game-over\">\r\n        Game Over!<br>\r\n        Final Score: <span id=\"final-score\">0</span>\r\n        <button id=\"restart-btn\">Restart</button>\r\n    </div>\r\n    <script type=\"module\">\r\n        import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.module.js';\r\n\r\n        // Game state\r\n        let score = 0;\r\n        let lives = 3;\r\n        let gameOver = false;\r\n\r\n        // Color palette\r\n        const colors = [0xff0000, 0x0000ff, 0x00ff00, 0xffff00];\r\n\r\n        // Scene setup\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        // Lights\r\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n        scene.add(ambientLight);\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n        directionalLight.position.set(1, 1, 1);\r\n        scene.add(directionalLight);\r\n\r\n        // Player object\r\n        const playerGeometry = new THREE.TorusKnotGeometry(1, 0.4, 100, 16);\r\n        const playerMaterial = new THREE.MeshStandardMaterial({ color: colors[0] });\r\n        const player = new THREE.Mesh(playerGeometry, playerMaterial);\r\n        scene.add(player);\r\n\r\n        // Target objects\r\n        const targets = [];\r\n        let lastSpawnTime = 0;\r\n\r\n        // HUD elements\r\n        const scoreElement = document.getElementById('score');\r\n        const livesElement = document.getElementById('lives');\r\n        const gameOverElement = document.getElementById('game-over');\r\n        const finalScoreElement = document.getElementById('final-score');\r\n        const restartBtn = document.getElementById('restart-btn');\r\n\r\n        // Keyboard input\r\n        document.addEventListener('keydown', (event) => {\r\n            if (gameOver) return;\r\n\r\n            const key = event.key;\r\n            if (key >= '1' && key <= '4') {\r\n                const index = parseInt(key) - 1;\r\n                playerMaterial.color.setHex(colors[index]);\r\n            }\r\n        });\r\n\r\n        // Restart button\r\n        restartBtn.addEventListener('click', () => {\r\n            score = 0;\r\n            lives = 3;\r\n            gameOver = false;\r\n            scoreElement.textContent = score;\r\n            livesElement.textContent = lives;\r\n            gameOverElement.style.display = 'none';\r\n\r\n            // Remove all targets\r\n            targets.forEach(target => {\r\n                scene.remove(target);\r\n            });\r\n            targets.length = 0;\r\n        });\r\n\r\n        // Spawn target\r\n        function spawnTarget() {\r\n            const geometry = new THREE.SphereGeometry(0.5, 32, 32);\r\n            const color = colors[Math.floor(Math.random() * colors.length)];\r\n            const material = new THREE.MeshStandardMaterial({ color });\r\n            const target = new THREE.Mesh(geometry, material);\r\n\r\n            target.position.x = -15;\r\n            target.position.y = Math.random() * 2 - 1;\r\n            target.position.z = Math.random() * 2 - 1;\r\n\r\n            scene.add(target);\r\n            targets.push(target);\r\n        }\r\n\r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            if (gameOver) {\r\n                renderer.render(scene, camera);\r\n                return;\r\n            }\r\n\r\n            const currentTime = Date.now();\r\n            if (currentTime - lastSpawnTime > 2000) {\r\n                spawnTarget();\r\n                lastSpawnTime = currentTime;\r\n            }\r\n\r\n            targets.forEach((target, index) => {\r\n                target.position.x += 0.05;\r\n\r\n                if (target.position.x > 0 && target.position.x < 0.1) {\r\n                    if (target.material.color.getHex() === playerMaterial.color.getHex()) {\r\n                        score++;\r\n                        scoreElement.textContent = score;\r\n                    } else {\r\n                        lives--;\r\n                        livesElement.textContent = lives;\r\n\r\n                        if (lives <= 0) {\r\n                            gameOver = true;\r\n                            finalScoreElement.textContent = score;\r\n                            gameOverElement.style.display = 'flex';\r\n                        }\r\n                    }\r\n\r\n                    scene.remove(target);\r\n                    targets.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // Start the game\r\n        camera.position.z = 5;\r\n        animate();\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "colour-matcher-mistral-small-3-2-24b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Game"
    ],
    "timestamp": "2025-08-04T21:59:58.089Z",
    "model": "mistral-small-3.2-24b",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, astronomy, game."
  }
}
