{
  "title": "Dyson Sphere Construction Simulator",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Dyson Sphere Construction Simulator</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            background: #000;\r\n            font-family: 'Arial', sans-serif;\r\n            overflow: hidden;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        .ui-panel {\r\n            position: absolute;\r\n            top: 20px;\r\n            left: 20px;\r\n            background: rgba(0, 20, 40, 0.9);\r\n            border: 1px solid #00ffff;\r\n            border-radius: 10px;\r\n            padding: 20px;\r\n            color: #00ffff;\r\n            min-width: 300px;\r\n            backdrop-filter: blur(10px);\r\n            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);\r\n        }\r\n\r\n        .control-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        .control-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-size: 12px;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n        }\r\n\r\n        .slider {\r\n            width: 100%;\r\n            height: 5px;\r\n            border-radius: 5px;\r\n            background: #002040;\r\n            outline: none;\r\n            -webkit-appearance: none;\r\n        }\r\n\r\n        .slider::-webkit-slider-thumb {\r\n            -webkit-appearance: none;\r\n            appearance: none;\r\n            width: 15px;\r\n            height: 15px;\r\n            border-radius: 50%;\r\n            background: #00ffff;\r\n            cursor: pointer;\r\n            box-shadow: 0 0 10px rgba(0, 255, 255, 0.5);\r\n        }\r\n\r\n        .button {\r\n            background: rgba(0, 255, 255, 0.2);\r\n            border: 1px solid #00ffff;\r\n            color: #00ffff;\r\n            padding: 8px 16px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            margin-right: 10px;\r\n            margin-bottom: 10px;\r\n            font-size: 11px;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n        }\r\n\r\n        .button:hover {\r\n            background: rgba(0, 255, 255, 0.4);\r\n            box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);\r\n        }\r\n\r\n        .button.active {\r\n            background: rgba(0, 255, 255, 0.6);\r\n        }\r\n\r\n        .stats {\r\n            background: rgba(0, 40, 80, 0.9);\r\n            border: 1px solid #0080ff;\r\n            border-radius: 5px;\r\n            padding: 10px;\r\n            margin-top: 10px;\r\n            font-size: 11px;\r\n        }\r\n\r\n        .stats-row {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        .progress-bar {\r\n            width: 100%;\r\n            height: 8px;\r\n            background: #002040;\r\n            border-radius: 4px;\r\n            overflow: hidden;\r\n            margin-top: 5px;\r\n        }\r\n\r\n        .progress-fill {\r\n            height: 100%;\r\n            background: linear-gradient(90deg, #00ffff, #0080ff);\r\n            width: 0%;\r\n            transition: width 0.2s ease;\r\n        }\r\n\r\n        .checkbox-container {\r\n            display: flex;\r\n            align-items: center;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        .checkbox {\r\n            margin-right: 10px;\r\n            width: 15px;\r\n            height: 15px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"ui-panel\">\r\n        <h3 style=\"margin-top: 0; text-align: center; color: #00ffff;\">DYSON SPHERE CONSTRUCTOR</h3>\r\n\r\n        <div class=\"control-group\">\r\n            <button id=\"playPause\" class=\"button\">START CONSTRUCTION</button>\r\n            <button id=\"reset\" class=\"button\">RESET</button>\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <label for=\"progressSlider\">Construction Progress</label>\r\n            <input type=\"range\" id=\"progressSlider\" class=\"slider\" min=\"0\" max=\"100\" value=\"0\">\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <label for=\"brightnessSlider\">Star Brightness</label>\r\n            <input type=\"range\" id=\"brightnessSlider\" class=\"slider\" min=\"0.2\" max=\"3\" value=\"1\" step=\"0.1\">\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <label for=\"speedSlider\">Construction Speed</label>\r\n            <input type=\"range\" id=\"speedSlider\" class=\"slider\" min=\"0.1\" max=\"5\" value=\"1\" step=\"0.1\">\r\n        </div>\r\n\r\n        <div class=\"checkbox-container\">\r\n            <input type=\"checkbox\" id=\"showCollectors\" class=\"checkbox\" checked>\r\n            <label for=\"showCollectors\">Show Solar Collectors</label>\r\n        </div>\r\n\r\n        <div class=\"checkbox-container\">\r\n            <input type=\"checkbox\" id=\"animateCollectors\" class=\"checkbox\" checked>\r\n            <label for=\"animateCollectors\">Animate Collectors</label>\r\n        </div>\r\n\r\n        <div class=\"stats\">\r\n            <div class=\"stats-row\">\r\n                <span>Completion:</span>\r\n                <span id=\"completionPercent\">0%</span>\r\n            </div>\r\n            <div class=\"stats-row\">\r\n                <span>Collectors Built:</span>\r\n                <span id=\"collectorsBuilt\">0 / 2000</span>\r\n            </div>\r\n            <div class=\"stats-row\">\r\n                <span>Est. Time Remaining:</span>\r\n                <span id=\"timeRemaining\">âˆž</span>\r\n            </div>\r\n            <div class=\"progress-bar\">\r\n                <div class=\"progress-fill\" id=\"progressFill\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script type=\"importmap\">\r\n        {\r\n            \"imports\": {\r\n                \"three\": \"https://unpkg.com/three@0.165.0/build/three.module.js\",\r\n                \"three/addons/\": \"https://unpkg.com/three@0.165.0/examples/jsm/\"\r\n            }\r\n        }\r\n    </script>\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        let scene, camera, renderer, controls;\r\n        let star, starGlow, corona, dysonSphere;\r\n        let collectors = [];\r\n        let sunspots = [];\r\n        let isConstructing = false;\r\n        let constructionProgress = 0;\r\n        let constructionSpeed = 1;\r\n        let animationId;\r\n\r\n        const TOTAL_COLLECTORS = 2000;\r\n        const DYSON_RADIUS = 8;\r\n        const STAR_RADIUS = 2;\r\n\r\n        // UI Elements\r\n        const playPauseBtn = document.getElementById('playPause');\r\n        const resetBtn = document.getElementById('reset');\r\n        const progressSlider = document.getElementById('progressSlider');\r\n        const brightnessSlider = document.getElementById('brightnessSlider');\r\n        const speedSlider = document.getElementById('speedSlider');\r\n        const showCollectorsCheckbox = document.getElementById('showCollectors');\r\n        const animateCollectorsCheckbox = document.getElementById('animateCollectors');\r\n        const completionPercent = document.getElementById('completionPercent');\r\n        const collectorsBuilt = document.getElementById('collectorsBuilt');\r\n        const timeRemaining = document.getElementById('timeRemaining');\r\n        const progressFill = document.getElementById('progressFill');\r\n\r\n        init();\r\n        animate();\r\n\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x000511);\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(15, 10, 15);\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.shadowMap.enabled = true;\r\n            renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // OrbitControls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.05;\r\n            controls.minDistance = 5;\r\n            controls.maxDistance = 50;\r\n\r\n            // Create star system\r\n            createStar();\r\n            createDysonSphere();\r\n\r\n            // Add ambient lighting\r\n            const ambientLight = new THREE.AmbientLight(0x404040, 0.1);\r\n            scene.add(ambientLight);\r\n\r\n            setupEventListeners();\r\n            updateStats();\r\n        }\r\n\r\n        function createStar() {\r\n            // Main star body\r\n            const starGeometry = new THREE.SphereGeometry(STAR_RADIUS, 64, 64);\r\n            const starMaterial = new THREE.ShaderMaterial({\r\n                uniforms: {\r\n                    time: { value: 0 },\r\n                    brightness: { value: 1.0 }\r\n                },\r\n                vertexShader: `\r\n                    varying vec2 vUv;\r\n                    varying vec3 vNormal;\r\n                    void main() {\r\n                        vUv = uv;\r\n                        vNormal = normalize(normalMatrix * normal);\r\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                    }\r\n                `,\r\n                fragmentShader: `\r\n                    uniform float time;\r\n                    uniform float brightness;\r\n                    varying vec2 vUv;\r\n                    varying vec3 vNormal;\r\n                    \r\n                    float noise(vec2 p) {\r\n                        return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\r\n                    }\r\n                    \r\n                    void main() {\r\n                        vec2 uv = vUv;\r\n                        float n1 = noise(uv * 10.0 + time * 0.5);\r\n                        float n2 = noise(uv * 20.0 - time * 0.3);\r\n                        float pattern = n1 * 0.5 + n2 * 0.3;\r\n                        \r\n                        vec3 orange = vec3(1.0, 0.4, 0.1);\r\n                        vec3 yellow = vec3(1.0, 0.8, 0.2);\r\n                        vec3 color = mix(orange, yellow, pattern);\r\n                        \r\n                        // Add sunspots\r\n                        float spots = smoothstep(0.7, 0.9, noise(uv * 5.0 + time * 0.1));\r\n                        color *= (1.0 - spots * 0.3);\r\n                        \r\n                        gl_FragColor = vec4(color * brightness, 1.0);\r\n                    }\r\n                `\r\n            });\r\n\r\n            star = new THREE.Mesh(starGeometry, starMaterial);\r\n            scene.add(star);\r\n\r\n            // Star glow effect\r\n            const glowGeometry = new THREE.SphereGeometry(STAR_RADIUS * 1.2, 32, 32);\r\n            const glowMaterial = new THREE.ShaderMaterial({\r\n                uniforms: {\r\n                    brightness: { value: 1.0 }\r\n                },\r\n                vertexShader: `\r\n                    varying vec3 vNormal;\r\n                    void main() {\r\n                        vNormal = normalize(normalMatrix * normal);\r\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n                    }\r\n                `,\r\n                fragmentShader: `\r\n                    uniform float brightness;\r\n                    varying vec3 vNormal;\r\n                    void main() {\r\n                        float intensity = pow(0.7 - dot(vNormal, vec3(0, 0, 1.0)), 2.0);\r\n                        gl_FragColor = vec4(1.0, 0.6, 0.2, 1.0) * intensity * brightness * 0.5;\r\n                    }\r\n                `,\r\n                side: THREE.BackSide,\r\n                blending: THREE.AdditiveBlending,\r\n                transparent: true\r\n            });\r\n\r\n            starGlow = new THREE.Mesh(glowGeometry, glowMaterial);\r\n            scene.add(starGlow);\r\n\r\n            // Corona particles\r\n            const coronaGeometry = new THREE.BufferGeometry();\r\n            const coronaPositions = [];\r\n            const coronaColors = [];\r\n\r\n            for (let i = 0; i < 500; i++) {\r\n                const radius = STAR_RADIUS + Math.random() * 2;\r\n                const theta = Math.random() * Math.PI * 2;\r\n                const phi = Math.random() * Math.PI;\r\n\r\n                coronaPositions.push(\r\n                    radius * Math.sin(phi) * Math.cos(theta),\r\n                    radius * Math.sin(phi) * Math.sin(theta),\r\n                    radius * Math.cos(phi)\r\n                );\r\n\r\n                const intensity = Math.random();\r\n                coronaColors.push(1, 0.6 + intensity * 0.4, 0.2 + intensity * 0.3);\r\n            }\r\n\r\n            coronaGeometry.setAttribute('position', new THREE.Float32BufferAttribute(coronaPositions, 3));\r\n            coronaGeometry.setAttribute('color', new THREE.Float32BufferAttribute(coronaColors, 3));\r\n\r\n            const coronaMaterial = new THREE.PointsMaterial({\r\n                size: 0.1,\r\n                vertexColors: true,\r\n                blending: THREE.AdditiveBlending,\r\n                transparent: true\r\n            });\r\n\r\n            corona = new THREE.Points(coronaGeometry, coronaMaterial);\r\n            scene.add(corona);\r\n        }\r\n\r\n        function createDysonSphere() {\r\n            dysonSphere = new THREE.Group();\r\n            scene.add(dysonSphere);\r\n\r\n            // Generate collector positions using fibonacci spiral\r\n            const positions = generateFibonacciSphere(TOTAL_COLLECTORS, DYSON_RADIUS);\r\n\r\n            for (let i = 0; i < TOTAL_COLLECTORS; i++) {\r\n                const collector = createSolarCollector();\r\n                collector.position.copy(positions[i]);\r\n                collector.lookAt(0, 0, 0);\r\n                collector.visible = false;\r\n                collector.userData = {\r\n                    originalPosition: positions[i].clone(),\r\n                    phase: Math.random() * Math.PI * 2,\r\n                    orbitSpeed: 0.001 + Math.random() * 0.001\r\n                };\r\n                collectors.push(collector);\r\n                dysonSphere.add(collector);\r\n            }\r\n        }\r\n\r\n        function createSolarCollector() {\r\n            const group = new THREE.Group();\r\n\r\n            // Main panel\r\n            const panelGeometry = new THREE.BoxGeometry(0.3, 0.2, 0.02);\r\n            const panelMaterial = new THREE.MeshLambertMaterial({\r\n                color: 0x001122,\r\n                emissive: 0x002244\r\n            });\r\n            const panel = new THREE.Mesh(panelGeometry, panelMaterial);\r\n            group.add(panel);\r\n\r\n            // Solar cells pattern\r\n            for (let i = 0; i < 6; i++) {\r\n                for (let j = 0; j < 4; j++) {\r\n                    const cellGeometry = new THREE.PlaneGeometry(0.04, 0.04);\r\n                    const cellMaterial = new THREE.MeshLambertMaterial({\r\n                        color: 0x003366,\r\n                        emissive: 0x001133\r\n                    });\r\n                    const cell = new THREE.Mesh(cellGeometry, cellMaterial);\r\n                    cell.position.set(\r\n                        (i - 2.5) * 0.05,\r\n                        (j - 1.5) * 0.05,\r\n                        0.011\r\n                    );\r\n                    group.add(cell);\r\n                }\r\n            }\r\n\r\n            // Support structure\r\n            const strutGeometry = new THREE.CylinderGeometry(0.005, 0.005, 0.1);\r\n            const strutMaterial = new THREE.MeshLambertMaterial({ color: 0x666666 });\r\n            const strut = new THREE.Mesh(strutGeometry, strutMaterial);\r\n            strut.position.z = -0.05;\r\n            group.add(strut);\r\n\r\n            return group;\r\n        }\r\n\r\n        function generateFibonacciSphere(numPoints, radius) {\r\n            const positions = [];\r\n            const phi = Math.PI * (3 - Math.sqrt(5)); // Golden angle\r\n\r\n            for (let i = 0; i < numPoints; i++) {\r\n                const y = 1 - (i / (numPoints - 1)) * 2;\r\n                const radiusAtY = Math.sqrt(1 - y * y);\r\n                const theta = phi * i;\r\n\r\n                const x = Math.cos(theta) * radiusAtY;\r\n                const z = Math.sin(theta) * radiusAtY;\r\n\r\n                positions.push(new THREE.Vector3(x * radius, y * radius, z * radius));\r\n            }\r\n\r\n            return positions;\r\n        }\r\n\r\n        function updateConstruction() {\r\n            const targetCollectors = Math.floor((constructionProgress / 100) * TOTAL_COLLECTORS);\r\n\r\n            for (let i = 0; i < collectors.length; i++) {\r\n                collectors[i].visible = showCollectorsCheckbox.checked && i < targetCollectors;\r\n            }\r\n\r\n            updateStats();\r\n        }\r\n\r\n        function updateStats() {\r\n            const builtCollectors = Math.floor((constructionProgress / 100) * TOTAL_COLLECTORS);\r\n            const remainingTime = isConstructing && constructionSpeed > 0 ?\r\n                ((100 - constructionProgress) / constructionSpeed).toFixed(1) + 's' : 'âˆž';\r\n\r\n            completionPercent.textContent = constructionProgress.toFixed(1) + '%';\r\n            collectorsBuilt.textContent = `${builtCollectors} / ${TOTAL_COLLECTORS}`;\r\n            timeRemaining.textContent = remainingTime;\r\n            progressFill.style.width = constructionProgress + '%';\r\n        }\r\n\r\n        function setupEventListeners() {\r\n            playPauseBtn.addEventListener('click', () => {\r\n                isConstructing = !isConstructing;\r\n                playPauseBtn.textContent = isConstructing ? 'STOP CONSTRUCTION' : 'START CONSTRUCTION';\r\n                playPauseBtn.classList.toggle('active', isConstructing);\r\n            });\r\n\r\n            resetBtn.addEventListener('click', () => {\r\n                constructionProgress = 0;\r\n                progressSlider.value = 0;\r\n                isConstructing = false;\r\n                playPauseBtn.textContent = 'START CONSTRUCTION';\r\n                playPauseBtn.classList.remove('active');\r\n                updateConstruction();\r\n            });\r\n\r\n            progressSlider.addEventListener('input', (e) => {\r\n                constructionProgress = parseFloat(e.target.value);\r\n                updateConstruction();\r\n            });\r\n\r\n            brightnessSlider.addEventListener('input', (e) => {\r\n                const brightness = parseFloat(e.target.value);\r\n                star.material.uniforms.brightness.value = brightness;\r\n                starGlow.material.uniforms.brightness.value = brightness;\r\n            });\r\n\r\n            speedSlider.addEventListener('input', (e) => {\r\n                constructionSpeed = parseFloat(e.target.value);\r\n            });\r\n\r\n            showCollectorsCheckbox.addEventListener('change', () => {\r\n                updateConstruction();\r\n            });\r\n\r\n            window.addEventListener('resize', () => {\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n                camera.updateProjectionMatrix();\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n            });\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            const time = Date.now() * 0.001;\r\n\r\n            // Update star animation\r\n            star.material.uniforms.time.value = time;\r\n            star.rotation.y = time * 0.1;\r\n\r\n            // Animate corona\r\n            corona.rotation.x = time * 0.05;\r\n            corona.rotation.y = time * 0.03;\r\n\r\n            // Construction progress\r\n            if (isConstructing && constructionProgress < 100) {\r\n                constructionProgress += constructionSpeed * 0.1;\r\n                if (constructionProgress > 100) constructionProgress = 100;\r\n                progressSlider.value = constructionProgress;\r\n                updateConstruction();\r\n            }\r\n\r\n            // Animate collectors\r\n            if (animateCollectorsCheckbox.checked) {\r\n                collectors.forEach((collector, index) => {\r\n                    if (collector.visible) {\r\n                        collector.userData.phase += collector.userData.orbitSpeed;\r\n                        const offset = new THREE.Vector3(\r\n                            Math.sin(collector.userData.phase) * 0.1,\r\n                            Math.cos(collector.userData.phase * 1.3) * 0.05,\r\n                            Math.sin(collector.userData.phase * 0.7) * 0.05\r\n                        );\r\n                        collector.position.copy(collector.userData.originalPosition).add(offset);\r\n                        collector.lookAt(0, 0, 0);\r\n                    }\r\n                });\r\n            }\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "dyson-sphere-claude-4",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Procedural Generation",
      "Astronomy"
    ],
    "timestamp": "2025-08-04T21:59:57.741Z",
    "model": "claude-4",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, procedural generation, astronomy."
  }
}
