{
  "title": "ASCII Sphere Rotation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>ASCII Sphere Rotation</title>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.js\"></script>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            background-color: black;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            height: 100vh;\r\n            overflow: hidden;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <script>\r\n        let sphere = [];\r\n        const numChars = 256; // Number of ASCII characters to use\r\n        const charSet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n\r\n        function setup() {\r\n            createCanvas(800, 800, WEBGL);\r\n            colorMode(HSB, 360, 100, 100, 1);\r\n\r\n            // Create a sphere using ASCII characters\r\n            const radius = 200;\r\n            const numPoints = 1500; // Number of points on the sphere\r\n\r\n            for (let i = 0; i < numPoints; i++) {\r\n                // Use spherical coordinates to place points on a sphere\r\n                const theta = random(TWO_PI);\r\n                const phi = acos(2 * random() - 1); // Uniform distribution over sphere\r\n\r\n                const x = radius * sin(phi) * cos(theta);\r\n                const y = radius * sin(phi) * sin(theta);\r\n                const z = radius * cos(phi);\r\n\r\n                // Choose a character from the set\r\n                const charIndex = floor(random(charSet.length));\r\n                const char = charSet[charIndex];\r\n\r\n                // Store point with its 3D position and character\r\n                sphere.push({\r\n                    x: x,\r\n                    y: y,\r\n                    z: z,\r\n                    char: char,\r\n                    originalX: x,\r\n                    originalY: y,\r\n                    originalZ: z\r\n                });\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n            background(0, 0, 0);\r\n\r\n            // Rotate the sphere around X and Y axes\r\n            const angle = millis() / 1000;\r\n            rotateX(angle * 0.5);\r\n            rotateY(angle * 0.7);\r\n\r\n            // Draw each ASCII character point\r\n            for (let i = 0; i < sphere.length; i++) {\r\n                let p = sphere[i];\r\n\r\n                // Apply rotation to the point\r\n                const rotatedX = p.x;\r\n                const rotatedY = p.y;\r\n                const rotatedZ = p.z;\r\n\r\n                // Calculate distance from camera (z-coordinate)\r\n                const distFromCamera = 500 - rotatedZ; // Add offset for perspective\r\n\r\n                // Normalize distance (0 to 1) where 0 is farthest and 1 is closest\r\n                const normalizedDist = constrain(distFromCamera / 500, 0, 1);\r\n\r\n                // Map the normalized distance to brightness (white to grey)\r\n                const brightness = lerp(100, 20, normalizedDist); // White to light grey\r\n\r\n                // Calculate screen position with perspective\r\n                const scale = 400 / (400 + rotatedZ);\r\n                const screenX = width / 2 + rotatedX * scale;\r\n                const screenY = height / 2 + rotatedY * scale;\r\n\r\n                // Set the color based on distance from camera\r\n                fill(0, 0, brightness); // HSB: black hue, no saturation, varying brightness\r\n\r\n                // Draw the character at calculated position\r\n                textSize(16);\r\n                textAlign(CENTER, CENTER);\r\n                text(p.char, screenX, screenY);\r\n            }\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "ascii-characters-qwen3-30b-a3b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "WebGL",
      "Shaders",
      "Astronomy"
    ],
    "timestamp": "2025-08-04T21:59:58.117Z",
    "model": "qwen3-30b-a3b",
    "description": "An interactive web application featuring webgl, shaders, astronomy."
  }
}
