{
  "title": "3D Lennard-Jones Fluid/Gas Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>3D Lennard-Jones Fluid/Gas Simulation</title>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <script type=\"importmap\">\r\n        {\r\n            \"imports\": {\r\n                \"three\": \"https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js\",\r\n                \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/\"\r\n            }\r\n        }\r\n    </script>\r\n    <style>\r\n        body { font-family: 'Inter', sans-serif; margin: 0; overflow: hidden; background-color: #f0f0f0; }\r\n        #container { width: 100vw; height: 100vh; position: relative; }\r\n        #canvas-container { width: 100%; height: 100%; position: absolute; top: 0; left: 0; z-index: 1; }\r\n        #controls {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background: rgba(255, 255, 255, 0.9);\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n            z-index: 2;\r\n            max-width: 300px;\r\n            max-height: calc(100vh - 20px);\r\n            overflow-y: auto;\r\n        }\r\n        #data-display {\r\n            position: absolute;\r\n            bottom: 10px;\r\n            left: 10px;\r\n            background: rgba(255, 255, 255, 0.9);\r\n            padding: 10px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n            z-index: 2;\r\n            font-size: 0.8rem;\r\n        }\r\n        label { display: block; margin-bottom: 2px; font-weight: 500; font-size: 0.9rem; }\r\n        input[type=\"range\"], input[type=\"number\"] { width: 100%; margin-bottom: 10px; }\r\n        button {\r\n            padding: 8px 12px;\r\n            margin-right: 5px;\r\n            margin-bottom: 5px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            background-color: #4a90e2;\r\n            color: white;\r\n            cursor: pointer;\r\n            transition: background-color 0.2s;\r\n        }\r\n        button:hover { background-color: #357abd; }\r\n        button:disabled { background-color: #cccccc; cursor: not-allowed; }\r\n        .control-group { margin-bottom: 15px; }\r\n        h3 { font-size: 1.1rem; font-weight: 600; margin-bottom: 10px; border-bottom: 1px solid #eee; padding-bottom: 5px;}\r\n    </style>\r\n</head>\r\n<body>\r\n    <div id=\"container\">\r\n        <div id=\"canvas-container\"></div>\r\n\r\n        <div id=\"controls\">\r\n            <h3>Controls</h3>\r\n            <div class=\"control-group\">\r\n                <button id=\"start-pause-button\">Start</button>\r\n                <button id=\"reset-button\">Reset</button>\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <label for=\"num-particles\">Particles: <span id=\"num-particles-value\">100</span></label>\r\n                <input type=\"range\" id=\"num-particles\" min=\"10\" max=\"500\" value=\"100\" step=\"10\">\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <label for=\"box-size\">Box Size: <span id=\"box-size-value\">10</span></label>\r\n                <input type=\"range\" id=\"box-size\" min=\"5\" max=\"20\" value=\"10\" step=\"0.5\">\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <label for=\"temperature\">Initial Temp: <span id=\"temperature-value\">1.0</span></label>\r\n                <input type=\"range\" id=\"temperature\" min=\"0.1\" max=\"5.0\" value=\"1.0\" step=\"0.1\">\r\n            </div>\r\n\r\n             <div class=\"control-group\">\r\n                <label for=\"epsilon\">Epsilon (ε): <span id=\"epsilon-value\">1.0</span></label>\r\n                <input type=\"range\" id=\"epsilon\" min=\"0.1\" max=\"5.0\" value=\"1.0\" step=\"0.1\">\r\n            </div>\r\n\r\n             <div class=\"control-group\">\r\n                <label for=\"sigma\">Sigma (σ): <span id=\"sigma-value\">1.0</span></label>\r\n                <input type=\"range\" id=\"sigma\" min=\"0.5\" max=\"2.0\" value=\"1.0\" step=\"0.05\">\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <label for=\"dt\">Time Step (dt): <span id=\"dt-value\">0.005</span></label>\r\n                <input type=\"range\" id=\"dt\" min=\"0.0001\" max=\"0.02\" value=\"0.005\" step=\"0.0001\">\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                 <label for=\"thermostat-toggle\">Thermostat:</label>\r\n                 <input type=\"checkbox\" id=\"thermostat-toggle\" checked>\r\n                 <label for=\"target-temperature\">Target Temp: <span id=\"target-temperature-value\">1.0</span></label>\r\n                 <input type=\"range\" id=\"target-temperature\" min=\"0.1\" max=\"5.0\" value=\"1.0\" step=\"0.1\">\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"data-display\">\r\n            <div>Temp: <span id=\"current-temp\">N/A</span></div>\r\n            <div>KE: <span id=\"kinetic-energy\">N/A</span></div>\r\n            <div>PE: <span id=\"potential-energy\">N/A</span></div>\r\n            <div>Total E: <span id=\"total-energy\">N/A</span></div>\r\n            <div>Sim Time: <span id=\"sim-time\">0.00</span></div>\r\n        </div>\r\n    </div>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        // --- Global Variables ---\r\n        let scene, camera, renderer, controls;\r\n        let particles = [];\r\n        let boxMesh; // To visualize the simulation box\r\n        let simulationRunning = false;\r\n        let simulationTime = 0;\r\n        let animationFrameId;\r\n\r\n        // --- Simulation Parameters (with defaults) ---\r\n        let params = {\r\n            numParticles: 100,\r\n            boxSize: 10.0,\r\n            halfBoxSize: 5.0,\r\n            initialTemperature: 1.0,\r\n            epsilon: 1.0, // Lennard-Jones parameter (depth of potential well)\r\n            sigma: 1.0,   // Lennard-Jones parameter (finite distance where potential is zero)\r\n            sigmaSq: 1.0,\r\n            dt: 0.005,    // Time step\r\n            cutoffRadius: 2.5, // Cutoff radius for LJ potential (usually 2.5 * sigma)\r\n            cutoffRadiusSq: 6.25,\r\n            particleMass: 1.0, // Assume mass = 1 for simplicity\r\n            particleRadius: 0.15, // Visual radius in Three.js\r\n            useThermostat: true,\r\n            targetTemperature: 1.0,\r\n            thermostatFrequency: 50, // Apply thermostat every N steps\r\n            stepsSinceLastThermostat: 0\r\n        };\r\n\r\n        // --- DOM Elements ---\r\n        const container = document.getElementById('container');\r\n        const canvasContainer = document.getElementById('canvas-container');\r\n        const startPauseButton = document.getElementById('start-pause-button');\r\n        const resetButton = document.getElementById('reset-button');\r\n        // Input sliders and value displays\r\n        const numParticlesSlider = document.getElementById('num-particles');\r\n        const numParticlesValue = document.getElementById('num-particles-value');\r\n        const boxSizeSlider = document.getElementById('box-size');\r\n        const boxSizeValue = document.getElementById('box-size-value');\r\n        const temperatureSlider = document.getElementById('temperature');\r\n        const temperatureValue = document.getElementById('temperature-value');\r\n        const epsilonSlider = document.getElementById('epsilon');\r\n        const epsilonValue = document.getElementById('epsilon-value');\r\n        const sigmaSlider = document.getElementById('sigma');\r\n        const sigmaValue = document.getElementById('sigma-value');\r\n        const dtSlider = document.getElementById('dt');\r\n        const dtValue = document.getElementById('dt-value');\r\n        const thermostatToggle = document.getElementById('thermostat-toggle');\r\n        const targetTemperatureSlider = document.getElementById('target-temperature');\r\n        const targetTemperatureValue = document.getElementById('target-temperature-value');\r\n        // Data display spans\r\n        const currentTempDisplay = document.getElementById('current-temp');\r\n        const kineticEnergyDisplay = document.getElementById('kinetic-energy');\r\n        const potentialEnergyDisplay = document.getElementById('potential-energy');\r\n        const totalEnergyDisplay = document.getElementById('total-energy');\r\n        const simTimeDisplay = document.getElementById('sim-time');\r\n\r\n        // --- Initialization ---\r\n        function init() {\r\n            setupThreeJS();\r\n            setupUI();\r\n            resetSimulation(); // Initialize particles and state\r\n            animate();         // Start the animation loop (initially paused)\r\n        }\r\n\r\n        function setupThreeJS() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0xeeeeee);\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.z = params.boxSize * 1.5; // Adjust initial camera distance based on box size\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            canvasContainer.appendChild(renderer.domElement);\r\n\r\n            // Lighting\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n            scene.add(ambientLight);\r\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n            directionalLight.position.set(5, 10, 7.5);\r\n            scene.add(directionalLight);\r\n\r\n            // Controls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true; // Optional damping effect\r\n            controls.dampingFactor = 0.05;\r\n            controls.screenSpacePanning = false;\r\n            controls.minDistance = 1;\r\n            controls.maxDistance = 500;\r\n\r\n            // Box visualization\r\n            const boxGeometry = new THREE.BoxGeometry(params.boxSize, params.boxSize, params.boxSize);\r\n            const edgesGeometry = new THREE.EdgesGeometry(boxGeometry);\r\n            const lineMaterial = new THREE.LineBasicMaterial({ color: 0x000000 });\r\n            boxMesh = new THREE.LineSegments(edgesGeometry, lineMaterial);\r\n            scene.add(boxMesh);\r\n\r\n            // Handle window resize\r\n            window.addEventListener('resize', onWindowResize, false);\r\n        }\r\n\r\n        function setupUI() {\r\n            // --- Event Listeners for Controls ---\r\n            startPauseButton.addEventListener('click', toggleSimulation);\r\n            resetButton.addEventListener('click', resetSimulation);\r\n\r\n            numParticlesSlider.addEventListener('input', (e) => {\r\n                params.numParticles = parseInt(e.target.value);\r\n                numParticlesValue.textContent = params.numParticles;\r\n                // Requires reset\r\n                setNeedsReset();\r\n            });\r\n\r\n            boxSizeSlider.addEventListener('input', (e) => {\r\n                params.boxSize = parseFloat(e.target.value);\r\n                params.halfBoxSize = params.boxSize / 2.0;\r\n                boxSizeValue.textContent = params.boxSize.toFixed(1);\r\n                // Update box visualization and camera, requires reset\r\n                updateBoxVisualization();\r\n                setNeedsReset();\r\n            });\r\n\r\n            temperatureSlider.addEventListener('input', (e) => {\r\n                params.initialTemperature = parseFloat(e.target.value);\r\n                temperatureValue.textContent = params.initialTemperature.toFixed(1);\r\n                 // Requires reset for initial temp, but target temp can be changed live\r\n                setNeedsReset();\r\n            });\r\n\r\n             epsilonSlider.addEventListener('input', (e) => {\r\n                params.epsilon = parseFloat(e.target.value);\r\n                epsilonValue.textContent = params.epsilon.toFixed(1);\r\n                // Changing potential requires recalculating forces, but not necessarily a full reset\r\n                // For simplicity, let's require a reset for now.\r\n                setNeedsReset();\r\n            });\r\n\r\n             sigmaSlider.addEventListener('input', (e) => {\r\n                params.sigma = parseFloat(e.target.value);\r\n                params.sigmaSq = params.sigma * params.sigma;\r\n                // Update cutoff based on sigma\r\n                params.cutoffRadius = 2.5 * params.sigma;\r\n                params.cutoffRadiusSq = params.cutoffRadius * params.cutoffRadius;\r\n                sigmaValue.textContent = params.sigma.toFixed(2);\r\n                // Requires reset\r\n                setNeedsReset();\r\n             });\r\n\r\n            dtSlider.addEventListener('input', (e) => {\r\n                params.dt = parseFloat(e.target.value);\r\n                dtValue.textContent = params.dt.toExponential(1);\r\n                // Can be changed live\r\n            });\r\n\r\n            thermostatToggle.addEventListener('change', (e) => {\r\n                params.useThermostat = e.target.checked;\r\n            });\r\n\r\n            targetTemperatureSlider.addEventListener('input', (e) => {\r\n                params.targetTemperature = parseFloat(e.target.value);\r\n                targetTemperatureValue.textContent = params.targetTemperature.toFixed(1);\r\n                // Can be changed live if thermostat is on\r\n            });\r\n\r\n            // Set initial values on sliders/displays\r\n            numParticlesSlider.value = params.numParticles;\r\n            numParticlesValue.textContent = params.numParticles;\r\n            boxSizeSlider.value = params.boxSize;\r\n            boxSizeValue.textContent = params.boxSize.toFixed(1);\r\n            temperatureSlider.value = params.initialTemperature;\r\n            temperatureValue.textContent = params.initialTemperature.toFixed(1);\r\n            epsilonSlider.value = params.epsilon;\r\n            epsilonValue.textContent = params.epsilon.toFixed(1);\r\n            sigmaSlider.value = params.sigma;\r\n            sigmaValue.textContent = params.sigma.toFixed(2);\r\n            dtSlider.value = params.dt;\r\n            dtValue.textContent = params.dt.toExponential(1);\r\n            thermostatToggle.checked = params.useThermostat;\r\n            targetTemperatureSlider.value = params.targetTemperature;\r\n            targetTemperatureValue.textContent = params.targetTemperature.toFixed(1);\r\n        }\r\n\r\n        function setNeedsReset() {\r\n            if (simulationRunning) {\r\n                pauseSimulation();\r\n            }\r\n            startPauseButton.textContent = 'Start (Reset Required)';\r\n            startPauseButton.disabled = false; // Re-enable if it was disabled\r\n        }\r\n\r\n        function updateBoxVisualization() {\r\n             // Remove old box\r\n            if (boxMesh) {\r\n                scene.remove(boxMesh);\r\n                boxMesh.geometry.dispose();\r\n                boxMesh.material.dispose();\r\n            }\r\n             // Create new box\r\n            const boxGeometry = new THREE.BoxGeometry(params.boxSize, params.boxSize, params.boxSize);\r\n            const edgesGeometry = new THREE.EdgesGeometry(boxGeometry);\r\n            const lineMaterial = new THREE.LineBasicMaterial({ color: 0x000000 });\r\n            boxMesh = new THREE.LineSegments(edgesGeometry, lineMaterial);\r\n            scene.add(boxMesh);\r\n\r\n            // Adjust camera position slightly based on new box size\r\n            // camera.position.z = params.boxSize * 1.5;\r\n            controls.update(); // Important after camera changes\r\n        }\r\n\r\n\r\n        // --- Simulation Logic ---\r\n\r\n        function initializeParticles() {\r\n            // Clear existing particles\r\n            particles.forEach(p => scene.remove(p.mesh));\r\n            particles = [];\r\n\r\n            const particleGeometry = new THREE.SphereGeometry(params.particleRadius, 16, 8); // Lower segments for performance\r\n            const particleMaterial = new THREE.MeshPhongMaterial({ color: 0xff0000 }); // Red particles\r\n\r\n            // Attempt to place particles on a simple cubic grid\r\n            const particlesPerSide = Math.ceil(Math.pow(params.numParticles, 1.0/3.0));\r\n            const spacing = params.boxSize / particlesPerSide;\r\n            let count = 0;\r\n\r\n            for (let i = 0; i < particlesPerSide && count < params.numParticles; i++) {\r\n                for (let j = 0; j < particlesPerSide && count < params.numParticles; j++) {\r\n                    for (let k = 0; k < particlesPerSide && count < params.numParticles; k++) {\r\n                        const position = new THREE.Vector3(\r\n                            (i + 0.5) * spacing - params.halfBoxSize,\r\n                            (j + 0.5) * spacing - params.halfBoxSize,\r\n                            (k + 0.5) * spacing - params.halfBoxSize\r\n                        );\r\n\r\n                        // Add slight random offset to break perfect grid\r\n                        position.add(new THREE.Vector3(\r\n                            (Math.random() - 0.5) * spacing * 0.1,\r\n                            (Math.random() - 0.5) * spacing * 0.1,\r\n                            (Math.random() - 0.5) * spacing * 0.1\r\n                        ));\r\n\r\n                        // Maxwell-Boltzmann distribution for velocities (simplified)\r\n                        // Target average kinetic energy per particle = 1.5 * T (in reduced units k_B=1)\r\n                        const velocityScale = Math.sqrt(3 * params.initialTemperature / params.particleMass); // RMS velocity scalar\r\n                        const velocity = new THREE.Vector3(\r\n                            (Math.random() - 0.5),\r\n                            (Math.random() - 0.5),\r\n                            (Math.random() - 0.5)\r\n                        ).normalize().multiplyScalar(velocityScale * (0.8 + Math.random() * 0.4)); // Add some randomness to magnitude\r\n\r\n\r\n                        const mesh = new THREE.Mesh(particleGeometry, particleMaterial);\r\n                        mesh.position.copy(position);\r\n                        scene.add(mesh);\r\n\r\n                        particles.push({\r\n                            position: position,\r\n                            velocity: velocity,\r\n                            force: new THREE.Vector3(0, 0, 0), // Initialize force\r\n                            mesh: mesh\r\n                        });\r\n                        count++;\r\n                    }\r\n                }\r\n            }\r\n\r\n             // Ensure exactly numParticles are created if grid placement resulted in fewer\r\n            while (particles.length < params.numParticles) {\r\n                 const position = new THREE.Vector3(\r\n                    (Math.random() - 0.5) * params.boxSize,\r\n                    (Math.random() - 0.5) * params.boxSize,\r\n                    (Math.random() - 0.5) * params.boxSize\r\n                );\r\n                 const velocityScale = Math.sqrt(3 * params.initialTemperature / params.particleMass);\r\n                 const velocity = new THREE.Vector3(\r\n                    (Math.random() - 0.5),\r\n                    (Math.random() - 0.5),\r\n                    (Math.random() - 0.5)\r\n                ).normalize().multiplyScalar(velocityScale * (0.8 + Math.random() * 0.4));\r\n\r\n                 const mesh = new THREE.Mesh(particleGeometry, particleMaterial);\r\n                 mesh.position.copy(position);\r\n                 scene.add(mesh);\r\n                 particles.push({\r\n                    position: position,\r\n                    velocity: velocity,\r\n                    force: new THREE.Vector3(0, 0, 0),\r\n                    mesh: mesh\r\n                });\r\n            }\r\n\r\n            // Initial velocity adjustment to remove center-of-mass drift\r\n            removeCenterOfMassVelocity();\r\n        }\r\n\r\n        function removeCenterOfMassVelocity() {\r\n            if (particles.length === 0) return;\r\n            const totalVel = new THREE.Vector3(0, 0, 0);\r\n            particles.forEach(p => totalVel.add(p.velocity));\r\n            totalVel.divideScalar(particles.length);\r\n            particles.forEach(p => p.velocity.sub(totalVel));\r\n        }\r\n\r\n\r\n        function calculateForces() {\r\n            let potentialEnergy = 0;\r\n            // Reset forces\r\n            particles.forEach(p => p.force.set(0, 0, 0));\r\n\r\n            // Calculate pairwise forces using Lennard-Jones potential\r\n            for (let i = 0; i < particles.length; i++) {\r\n                for (let j = i + 1; j < particles.length; j++) {\r\n                    const pi = particles[i];\r\n                    const pj = particles[j];\r\n\r\n                    // Minimum image convention\r\n                    const rij = new THREE.Vector3().subVectors(pi.position, pj.position);\r\n                    rij.x = rij.x - params.boxSize * Math.round(rij.x / params.boxSize);\r\n                    rij.y = rij.y - params.boxSize * Math.round(rij.y / params.boxSize);\r\n                    rij.z = rij.z - params.boxSize * Math.round(rij.z / params.boxSize);\r\n\r\n                    const rSq = rij.lengthSq();\r\n\r\n                    if (rSq < params.cutoffRadiusSq && rSq > 1e-6) { // Check cutoff and avoid self-interaction\r\n                        const r = Math.sqrt(rSq);\r\n                        const rm2 = 1.0 / rSq; // 1/r^2\r\n                        const rm6 = rm2 * rm2 * rm2; // 1/r^6\r\n                        const rm12 = rm6 * rm6; // 1/r^12\r\n\r\n                        const sigma_r_6 = Math.pow(params.sigma / r, 6);\r\n                        const sigma_r_12 = sigma_r_6 * sigma_r_6;\r\n\r\n                        // Lennard-Jones Potential: U(r) = 4 * eps * [(sigma/r)^12 - (sigma/r)^6]\r\n                        const lj_potential = 4.0 * params.epsilon * (sigma_r_12 - sigma_r_6);\r\n                        potentialEnergy += lj_potential;\r\n\r\n                        // Lennard-Jones Force Magnitude: F(r) = -dU/dr = 24 * eps / r * [2*(sigma/r)^12 - (sigma/r)^6]\r\n                        // Or F(r) = 48 * eps / sigma^2 * [ (sigma/r)^14 - 0.5 * (sigma/r)^8 ] * sigma^2 / r\r\n                        // Let's use the first form, F = force_magnitude * (rij / r)\r\n                        const forceMagnitude = 24.0 * params.epsilon / rSq * (2.0 * sigma_r_12 - sigma_r_6); // F * r\r\n\r\n                        const forceVector = rij.multiplyScalar(forceMagnitude / rSq); // Force vector = F * (rij / r) / r = F * rij / r^2\r\n\r\n                        pi.force.add(forceVector);\r\n                        pj.force.sub(forceVector); // Newton's third law\r\n                    }\r\n                }\r\n            }\r\n            return potentialEnergy;\r\n        }\r\n\r\n        function integrateVelocityVerlet(dt) {\r\n            const dtHalf = dt / 2.0;\r\n\r\n            // First half-step velocity update & full step position update\r\n            particles.forEach(p => {\r\n                // v(t + dt/2) = v(t) + a(t) * dt / 2\r\n                const acceleration = p.force.clone().divideScalar(params.particleMass);\r\n                p.velocity.addScaledVector(acceleration, dtHalf);\r\n\r\n                // x(t + dt) = x(t) + v(t + dt/2) * dt\r\n                p.position.addScaledVector(p.velocity, dt);\r\n\r\n                // Apply periodic boundary conditions\r\n                applyPeriodicBoundaries(p);\r\n            });\r\n\r\n            // Calculate forces at new positions -> a(t + dt)\r\n            const potentialEnergy = calculateForces();\r\n\r\n            // Second half-step velocity update\r\n            particles.forEach(p => {\r\n                // v(t + dt) = v(t + dt/2) + a(t + dt) * dt / 2\r\n                const acceleration = p.force.clone().divideScalar(params.particleMass);\r\n                p.velocity.addScaledVector(acceleration, dtHalf);\r\n            });\r\n\r\n            return potentialEnergy; // Return calculated potential energy\r\n        }\r\n\r\n        function applyPeriodicBoundaries(particle) {\r\n            // Wrap positions around the box boundaries\r\n            if (particle.position.x > params.halfBoxSize) particle.position.x -= params.boxSize;\r\n            else if (particle.position.x < -params.halfBoxSize) particle.position.x += params.boxSize;\r\n\r\n            if (particle.position.y > params.halfBoxSize) particle.position.y -= params.boxSize;\r\n            else if (particle.position.y < -params.halfBoxSize) particle.position.y += params.boxSize;\r\n\r\n            if (particle.position.z > params.halfBoxSize) particle.position.z -= params.boxSize;\r\n            else if (particle.position.z < -params.halfBoxSize) particle.position.z += params.boxSize;\r\n        }\r\n\r\n        function applyThermostat() {\r\n            if (!params.useThermostat || particles.length === 0) return;\r\n\r\n            params.stepsSinceLastThermostat++;\r\n            if (params.stepsSinceLastThermostat >= params.thermostatFrequency) {\r\n                const currentKE = calculateKineticEnergy();\r\n                const currentTemp = (2.0 / 3.0) * currentKE / particles.length; // KE = (3/2) N k_B T -> T = (2/3) KE / N (with k_B=1)\r\n\r\n                if (currentTemp > 1e-6) { // Avoid division by zero or scaling issues at very low temps\r\n                    const scaleFactor = Math.sqrt(params.targetTemperature / currentTemp);\r\n                    particles.forEach(p => p.velocity.multiplyScalar(scaleFactor));\r\n                }\r\n                 params.stepsSinceLastThermostat = 0; // Reset counter\r\n            }\r\n        }\r\n\r\n\r\n        function calculateKineticEnergy() {\r\n            let kineticEnergy = 0;\r\n            particles.forEach(p => {\r\n                kineticEnergy += 0.5 * params.particleMass * p.velocity.lengthSq();\r\n            });\r\n            return kineticEnergy;\r\n        }\r\n\r\n        function updateDataDisplay(kineticEnergy, potentialEnergy) {\r\n            const totalEnergy = kineticEnergy + potentialEnergy;\r\n            // Calculate instantaneous temperature (k_B = 1)\r\n            const currentTemp = particles.length > 0 ? (2.0 / 3.0) * kineticEnergy / particles.length : 0;\r\n\r\n            currentTempDisplay.textContent = currentTemp.toFixed(3);\r\n            kineticEnergyDisplay.textContent = kineticEnergy.toFixed(3);\r\n            potentialEnergyDisplay.textContent = potentialEnergy.toFixed(3);\r\n            totalEnergyDisplay.textContent = totalEnergy.toFixed(3);\r\n            simTimeDisplay.textContent = simulationTime.toFixed(3);\r\n        }\r\n\r\n        function simulationStep() {\r\n            // Integrate motion using Velocity Verlet\r\n            const potentialEnergy = integrateVelocityVerlet(params.dt);\r\n\r\n            // Apply thermostat if enabled\r\n            applyThermostat();\r\n\r\n            // Calculate energies\r\n            const kineticEnergy = calculateKineticEnergy();\r\n\r\n            // Update simulation time\r\n            simulationTime += params.dt;\r\n\r\n            // Update UI display\r\n            updateDataDisplay(kineticEnergy, potentialEnergy);\r\n\r\n            // Update Three.js mesh positions\r\n            particles.forEach(p => {\r\n                p.mesh.position.copy(p.position);\r\n            });\r\n        }\r\n\r\n        // --- Animation Loop ---\r\n        function animate() {\r\n            animationFrameId = requestAnimationFrame(animate);\r\n\r\n            if (simulationRunning) {\r\n                // Perform multiple simulation steps per frame for stability/speedup if dt is small\r\n                const stepsPerFrame = 1; // Adjust as needed\r\n                for(let i=0; i<stepsPerFrame; ++i) {\r\n                    simulationStep();\r\n                }\r\n            }\r\n\r\n            controls.update(); // Update orbit controls\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // --- Control Functions ---\r\n        function toggleSimulation() {\r\n            if (startPauseButton.textContent.includes('Reset Required')) {\r\n                 resetSimulation(); // Force reset if parameters changed\r\n                 startSimulation();\r\n            } else if (simulationRunning) {\r\n                pauseSimulation();\r\n            } else {\r\n                startSimulation();\r\n            }\r\n        }\r\n\r\n        function startSimulation() {\r\n            simulationRunning = true;\r\n            startPauseButton.textContent = 'Pause';\r\n            // Disable controls that require a reset\r\n            numParticlesSlider.disabled = true;\r\n            boxSizeSlider.disabled = true;\r\n            temperatureSlider.disabled = true;\r\n            epsilonSlider.disabled = true;\r\n            sigmaSlider.disabled = true;\r\n        }\r\n\r\n        function pauseSimulation() {\r\n            simulationRunning = false;\r\n            startPauseButton.textContent = 'Resume';\r\n            // Re-enable controls\r\n            numParticlesSlider.disabled = false;\r\n            boxSizeSlider.disabled = false;\r\n            temperatureSlider.disabled = false;\r\n            epsilonSlider.disabled = false;\r\n            sigmaSlider.disabled = false;\r\n        }\r\n\r\n        function resetSimulation() {\r\n            pauseSimulation(); // Ensure simulation is paused\r\n\r\n            // Reset simulation state\r\n            simulationTime = 0;\r\n            params.stepsSinceLastThermostat = 0;\r\n\r\n            // Re-initialize particles based on current UI settings\r\n            initializeParticles();\r\n\r\n            // Reset forces and calculate initial potential energy\r\n            const initialPE = calculateForces();\r\n            const initialKE = calculateKineticEnergy();\r\n\r\n            // Update display\r\n            updateDataDisplay(initialKE, initialPE);\r\n\r\n            // Update mesh positions immediately\r\n            particles.forEach(p => p.mesh.position.copy(p.position));\r\n\r\n            // Reset button text and state\r\n            startPauseButton.textContent = 'Start';\r\n            startPauseButton.disabled = false;\r\n            // Re-enable controls\r\n             numParticlesSlider.disabled = false;\r\n            boxSizeSlider.disabled = false;\r\n            temperatureSlider.disabled = false;\r\n            epsilonSlider.disabled = false;\r\n            sigmaSlider.disabled = false;\r\n\r\n             // Update box visualization in case size changed\r\n            updateBoxVisualization();\r\n\r\n            console.log(\"Simulation Reset\");\r\n        }\r\n\r\n        // --- Window Resize ---\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        // --- Start ---\r\n        init();\r\n\r\n    </script>\r\n</body>\r\n</html>\r\n",
  "id": "3d-lennard-jones-fluid-gas-simulation-gemini-pro-2-5",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.866Z",
    "model": "gemini-pro-2.5",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, astronomy, simulation, architecture."
  }
}
