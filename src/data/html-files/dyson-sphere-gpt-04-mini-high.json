{
  "title": "Dyson Sphere Simulator",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Dyson Sphere Simulator</title>\r\n    <script type=\"importmap\">\r\n    {\r\n        \"imports\": {\r\n            \"three\": \"https://cdn.jsdelivr.net/npm/three@0.153.0/build/three.module.js\",\r\n            \"three/examples/jsm/\": \"https://cdn.jsdelivr.net/npm/three@0.153.0/examples/jsm/\"\r\n        }\r\n    }\r\n    </script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body,\r\n        html {\r\n            width: 100%;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            font-family: Arial, sans-serif;\r\n            background: #000;\r\n            color: #fff;\r\n        }\r\n\r\n        #container {\r\n            width: 100%;\r\n            height: 100%;\r\n            display: block;\r\n        }\r\n\r\n        #overlay {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            padding: 10px;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            line-height: 1.4;\r\n        }\r\n\r\n        #controls {\r\n            position: absolute;\r\n            bottom: 10px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background: rgba(255, 255, 255, 0.1);\r\n            padding: 10px;\r\n            border-radius: 8px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n        }\r\n\r\n        #controls input[type=range] {\r\n            width: 120px;\r\n        }\r\n\r\n        #controls label {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 4px;\r\n            font-size: 13px;\r\n        }\r\n\r\n        #controls button {\r\n            background: #1e90ff;\r\n            border: none;\r\n            padding: 6px 12px;\r\n            border-radius: 4px;\r\n            color: #fff;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n        }\r\n\r\n        #controls button:hover {\r\n            background: #3aa0ff;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"container\"></div>\r\n    <div id=\"overlay\">\r\n        <div>Completion: <span id=\"percent\">0%</span></div>\r\n        <div>Collectors: <span id=\"built\">0</span> / <span id=\"total\">0</span></div>\r\n        <div>ETA: <span id=\"eta\">--:--:--</span></div>\r\n    </div>\r\n    <div id=\"controls\">\r\n        <button id=\"playPause\">Play</button>\r\n        <input type=\"range\" id=\"progress\" min=\"0\" max=\"100\" value=\"0\">\r\n        <label><input type=\"checkbox\" id=\"toggleCollectors\" checked> Show Collectors</label>\r\n        <label>Brightness: <input type=\"range\" id=\"brightness\" min=\"0\" max=\"2\" step=\"0.01\" value=\"1\"></label>\r\n    </div>\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\n        let scene, camera, renderer, controls;\r\n        let star, collectorsGroup;\r\n        const totalCollectors = 500;\r\n        const buildRate = 1; // collectors per second\r\n        let constructionProgress = 0; // 0 to 1\r\n        let playing = false;\r\n        let lastTime = 0;\r\n\r\n        init();\r\n        animate();\r\n\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 0, 50);\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            document.getElementById('container').appendChild(renderer.domElement);\r\n\r\n            // Controls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enablePan = false;\r\n            controls.minDistance = 20;\r\n            controls.maxDistance = 150;\r\n\r\n            // Star\r\n            const starGeo = new THREE.SphereGeometry(10, 64, 64);\r\n            const starMat = new THREE.MeshBasicMaterial({\r\n                color: 0xffff66,\r\n                emissive: 0xffff33,\r\n                emissiveIntensity: 1,\r\n            });\r\n            star = new THREE.Mesh(starGeo, starMat);\r\n            scene.add(star);\r\n\r\n            // Sunspots\r\n            for (let i = 0; i < 50; i++) {\r\n                const spotGeo = new THREE.CircleGeometry(0.5 + Math.random() * 1.0, 16);\r\n                const spotMat = new THREE.MeshBasicMaterial({ color: 0x000000 });\r\n                const spot = new THREE.Mesh(spotGeo, spotMat);\r\n                const phi = Math.acos(2 * Math.random() - 1);\r\n                const theta = 2 * Math.PI * Math.random();\r\n                spot.position.set(\r\n                    10 * Math.sin(phi) * Math.cos(theta),\r\n                    10 * Math.sin(phi) * Math.sin(theta),\r\n                    10 * Math.cos(phi)\r\n                );\r\n                spot.lookAt(star.position);\r\n                star.add(spot);\r\n            }\r\n\r\n            // Corona (simple particle ring)\r\n            const coronaGeo = new THREE.RingGeometry(11, 14, 64);\r\n            const coronaMat = new THREE.MeshBasicMaterial({\r\n                color: 0xffff99,\r\n                side: THREE.DoubleSide,\r\n                transparent: true,\r\n                opacity: 0.3\r\n            });\r\n            const corona = new THREE.Mesh(coronaGeo, coronaMat);\r\n            corona.rotation.x = Math.PI / 2;\r\n            scene.add(corona);\r\n\r\n            // Collectors group\r\n            collectorsGroup = new THREE.Group();\r\n            scene.add(collectorsGroup);\r\n            prepareCollectors();\r\n\r\n            // UI bindings\r\n            document.getElementById('total').textContent = totalCollectors;\r\n            document.getElementById('playPause').addEventListener('click', togglePlay);\r\n            document.getElementById('progress').addEventListener('input', onSlider);\r\n            document.getElementById('toggleCollectors').addEventListener('change', e => collectorsGroup.visible = e.target.checked);\r\n            document.getElementById('brightness').addEventListener('input', e => star.material.emissiveIntensity = e.target.value);\r\n            window.addEventListener('resize', onWindowResize);\r\n        }\r\n\r\n        function prepareCollectors() {\r\n            const panelGeo = new THREE.PlaneGeometry(1.5, 1);\r\n            const panelMat = new THREE.MeshStandardMaterial({ color: 0xdddddd, metalness: 0.7, roughness: 0.2 });\r\n            for (let i = 0; i < totalCollectors; i++) {\r\n                const collector = new THREE.Mesh(panelGeo, panelMat.clone());\r\n                // random position on sphere\r\n                const phi = Math.acos(2 * Math.random() - 1);\r\n                const theta = 2 * Math.PI * Math.random();\r\n                collector.position.set(\r\n                    20 * Math.sin(phi) * Math.cos(theta),\r\n                    20 * Math.sin(phi) * Math.sin(theta),\r\n                    20 * Math.cos(phi)\r\n                );\r\n                collector.lookAt(0, 0, 0);\r\n                collector.visible = false;\r\n                collectorsGroup.add(collector);\r\n            }\r\n        }\r\n\r\n        function updateCollectors(progress) {\r\n            const builtCount = Math.floor(totalCollectors * progress);\r\n            collectorsGroup.children.forEach((c, idx) => c.visible = idx < builtCount);\r\n            document.getElementById('built').textContent = builtCount;\r\n            document.getElementById('percent').textContent = Math.floor(progress * 100) + '%';\r\n            const remaining = totalCollectors - builtCount;\r\n            const secs = remaining / buildRate;\r\n            document.getElementById('eta').textContent = new Date(secs * 1000).toISOString().substr(11, 8);\r\n        }\r\n\r\n        function togglePlay() {\r\n            playing = !playing;\r\n            document.getElementById('playPause').textContent = playing ? 'Pause' : 'Play';\r\n            lastTime = performance.now();\r\n        }\r\n\r\n        function onSlider(e) {\r\n            constructionProgress = e.target.value / 100;\r\n            updateCollectors(constructionProgress);\r\n        }\r\n\r\n        function animate(time) {\r\n            requestAnimationFrame(animate);\r\n            const delta = (time - lastTime) / 1000;\r\n            if (playing) {\r\n                constructionProgress = Math.min(1, constructionProgress + buildRate * delta / totalCollectors);\r\n                document.getElementById('progress').value = constructionProgress * 100;\r\n                updateCollectors(constructionProgress);\r\n            }\r\n            lastTime = time;\r\n            collectorsGroup.rotation.y += 0.0005; // subtle orbital movement\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "dyson-sphere-gpt-04-mini-high",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:58.015Z",
    "model": "gpt-04-mini-high",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, astronomy, architecture."
  }
}
