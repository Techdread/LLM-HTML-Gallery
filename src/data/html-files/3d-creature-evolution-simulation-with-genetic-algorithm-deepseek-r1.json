{
  "title": "3D Creature Evolution",
  "htmlContent": "<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n    <title>3D Creature Evolution</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n        }\r\n\r\n        #ui {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            color: white;\r\n            background: rgba(0, 0, 0, 0.7);\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        button {\r\n            margin-right: 5px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"ui\">\r\n        <button id=\"startBtn\">Start</button>\r\n        <button id=\"resetBtn\">Reset</button>\r\n        <div>Generation: <span id=\"generation\">0</span></div>\r\n        <div>Best Fitness: <span id=\"bestFitness\">0.00</span></div>\r\n    </div>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/cannon-es@0.20.0/dist/cannon-es.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js\"></script>\r\n\r\n    <script>\r\n        class Creature {\r\n            constructor(genome) {\r\n                this.genome = genome;\r\n                this.bodies = [];\r\n                this.joints = [];\r\n                this.meshes = [];\r\n            }\r\n\r\n            createPhysicsObjects(world) {\r\n                // Main body\r\n                const bodySize = this.genome.bodySize;\r\n                const bodyShape = new CANNON.Box(new CANNON.Vec3(bodySize / 2, bodySize / 2, bodySize / 2));\r\n                const bodyBody = new CANNON.Body({ mass: 1 });\r\n                bodyBody.addShape(bodyShape);\r\n                bodyBody.position.set(0, bodySize, 0);\r\n                world.addBody(bodyBody);\r\n                this.bodies.push(bodyBody);\r\n\r\n                // Legs\r\n                const createLeg = (side) => {\r\n                    const legLength = this.genome.legLength;\r\n                    const legShape = new CANNON.Box(new CANNON.Vec3(legLength / 2, legLength / 2, legLength / 2));\r\n                    const legBody = new CANNON.Body({ mass: 0.5 });\r\n                    legBody.addShape(legShape);\r\n\r\n                    const pivotX = side === 'left' ? -bodySize / 2 : bodySize / 2;\r\n                    legBody.position.set(pivotX, bodySize - legLength / 2, 0);\r\n                    world.addBody(legBody);\r\n                    this.bodies.push(legBody);\r\n\r\n                    const hinge = new CANNON.HingeConstraint(\r\n                        bodyBody,\r\n                        legBody,\r\n                        {\r\n                            pivotA: new CANNON.Vec3(pivotX, 0, 0),\r\n                            pivotB: new CANNON.Vec3(side === 'left' ? legLength / 2 : -legLength / 2, 0, 0),\r\n                            axisA: new CANNON.Vec3(0, 0, 1),\r\n                            axisB: new CANNON.Vec3(0, 0, 1)\r\n                        }\r\n                    );\r\n                    world.addConstraint(hinge);\r\n                    this.joints.push(hinge);\r\n                };\r\n\r\n                createLeg('left');\r\n                createLeg('right');\r\n            }\r\n\r\n            applyActuation(time) {\r\n                const freq = this.genome.frequency;\r\n                const amp = this.genome.hingeAmplitude;\r\n                const phaseOffset = this.genome.phaseOffset;\r\n\r\n                this.joints.forEach((joint, i) => {\r\n                    const phase = i === 0 ? 0 : Math.PI;\r\n                    const angle = amp * Math.sin(time * freq * 2 * Math.PI + phaseOffset + phase);\r\n                    joint.enableMotor();\r\n                    joint.motorTargetVelocity = angle;\r\n                    joint.motorMaxForce = 1000;\r\n                });\r\n            }\r\n\r\n            removeFromWorld(world) {\r\n                this.bodies.forEach(body => world.removeBody(body));\r\n                this.joints.forEach(joint => world.removeConstraint(joint));\r\n            }\r\n        }\r\n\r\n        class GeneticAlgorithm {\r\n            constructor(populationSize) {\r\n                this.populationSize = populationSize;\r\n                this.population = [];\r\n                this.generation = 0;\r\n                this.bestFitness = 0;\r\n            }\r\n\r\n            initializePopulation() {\r\n                for (let i = 0; i < this.populationSize; i++) {\r\n                    this.population.push({\r\n                        genome: {\r\n                            bodySize: Math.random() * 0.3 + 0.2,\r\n                            legLength: Math.random() * 0.4 + 0.1,\r\n                            hingeAmplitude: Math.random() * 0.5 + 0.1,\r\n                            frequency: Math.random() * 2 + 0.5,\r\n                            phaseOffset: Math.random() * Math.PI * 2\r\n                        },\r\n                        fitness: 0\r\n                    });\r\n                }\r\n            }\r\n\r\n            evaluatePopulation() {\r\n                const simTime = 3; // seconds\r\n                this.population.forEach(individual => {\r\n                    const world = new CANNON.World();\r\n                    world.gravity.set(0, -9.82, 0);\r\n\r\n                    // Add ground\r\n                    const ground = new CANNON.Body({ mass: 0 });\r\n                    ground.addShape(new CANNON.Plane());\r\n                    ground.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);\r\n                    world.addBody(ground);\r\n\r\n                    const creature = new Creature(individual.genome);\r\n                    creature.createPhysicsObjects(world);\r\n\r\n                    const startX = creature.bodies[0].position.x;\r\n                    let time = 0;\r\n                    while (time < simTime) {\r\n                        creature.applyActuation(time);\r\n                        world.step(1 / 60);\r\n                        time += 1 / 60;\r\n                    }\r\n                    individual.fitness = creature.bodies[0].position.x - startX;\r\n                    creature.removeFromWorld(world);\r\n                });\r\n                this.population.sort((a, b) => b.fitness - a.fitness);\r\n                this.bestFitness = this.population[0].fitness;\r\n            }\r\n\r\n            nextGeneration() {\r\n                const newPop = [];\r\n                while (newPop.length < this.populationSize) {\r\n                    const parentA = this.tournamentSelect();\r\n                    const parentB = this.tournamentSelect();\r\n                    const child = this.crossover(parentA, parentB);\r\n                    newPop.push({ genome: this.mutate(child), fitness: 0 });\r\n                }\r\n                this.population = newPop;\r\n                this.generation++;\r\n            }\r\n\r\n            tournamentSelect() {\r\n                const candidates = Array.from({ length: 3 }, () =>\r\n                    this.population[Math.floor(Math.random() * this.population.length)]);\r\n                return candidates.reduce((a, b) => a.fitness > b.fitness ? a : b).genome;\r\n            }\r\n\r\n            crossover(a, b) {\r\n                const child = {};\r\n                for (const key in a) {\r\n                    child[key] = Math.random() < 0.5 ? a[key] : b[key];\r\n                }\r\n                return child;\r\n            }\r\n\r\n            mutate(genome) {\r\n                Object.keys(genome).forEach(key => {\r\n                    if (Math.random() < 0.2) {\r\n                        genome[key] += (Math.random() - 0.5) * 0.3 * genome[key];\r\n                    }\r\n                });\r\n                return genome;\r\n            }\r\n        }\r\n\r\n        class Simulation {\r\n            constructor() {\r\n                this.initThree();\r\n                this.initPhysics();\r\n                this.initGA();\r\n                this.setupControls();\r\n                this.animate();\r\n            }\r\n\r\n            initThree() {\r\n                this.scene = new THREE.Scene();\r\n                this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n                this.renderer = new THREE.WebGLRenderer({ antialias: true });\r\n                this.renderer.setSize(window.innerWidth, window.innerHeight);\r\n                document.body.appendChild(this.renderer.domElement);\r\n                this.camera.position.set(5, 5, 5);\r\n                this.controls = new THREE.OrbitControls(this.camera, this.renderer.domElement);\r\n\r\n                // Lighting\r\n                const light = new THREE.DirectionalLight(0xffffff, 1);\r\n                light.position.set(5, 5, 5);\r\n                this.scene.add(light);\r\n                this.scene.add(new THREE.AmbientLight(0x404040));\r\n            }\r\n\r\n            initPhysics() {\r\n                this.physicsWorld = new CANNON.World();\r\n                this.physicsWorld.gravity.set(0, -9.82, 0);\r\n\r\n                // Ground\r\n                const ground = new CANNON.Body({ mass: 0 });\r\n                ground.addShape(new CANNON.Plane());\r\n                ground.quaternion.setFromAxisAngle(new CANNON.Vec3(1, 0, 0), -Math.PI / 2);\r\n                this.physicsWorld.addBody(ground);\r\n\r\n                const groundMesh = new THREE.Mesh(\r\n                    new THREE.PlaneGeometry(20, 20),\r\n                    new THREE.MeshPhongMaterial({ color: 0x808080 })\r\n                );\r\n                groundMesh.rotation.x = -Math.PI / 2;\r\n                this.scene.add(groundMesh);\r\n            }\r\n\r\n            initGA() {\r\n                this.ga = new GeneticAlgorithm(12);\r\n                this.ga.initializePopulation();\r\n                this.currentCreature = null;\r\n            }\r\n\r\n            setupControls() {\r\n                document.getElementById('startBtn').addEventListener('click', () => this.runGeneration());\r\n                document.getElementById('resetBtn').addEventListener('click', () => {\r\n                    this.ga = new GeneticAlgorithm(12);\r\n                    this.ga.initializePopulation();\r\n                    this.generation = 0;\r\n                    this.updateUI();\r\n                });\r\n            }\r\n\r\n            async runGeneration() {\r\n                this.ga.evaluatePopulation();\r\n                this.showBestCreature();\r\n                this.ga.nextGeneration();\r\n                this.updateUI();\r\n            }\r\n\r\n            showBestCreature() {\r\n                if (this.currentCreature) {\r\n                    this.currentCreature.removeFromWorld(this.physicsWorld);\r\n                    this.currentCreature.meshes.forEach(mesh => this.scene.remove(mesh));\r\n                }\r\n\r\n                const best = this.ga.population[0];\r\n                this.currentCreature = new Creature(best.genome);\r\n                this.currentCreature.createPhysicsObjects(this.physicsWorld);\r\n\r\n                // Create meshes\r\n                this.currentCreature.bodies.forEach(body => {\r\n                    const size = body.shapes[0].halfExtents;\r\n                    const mesh = new THREE.Mesh(\r\n                        new THREE.BoxGeometry(size.x * 2, size.y * 2, size.z * 2),\r\n                        new THREE.MeshPhongMaterial({ color: 0x00ff00 })\r\n                    );\r\n                    this.scene.add(mesh);\r\n                    this.currentCreature.meshes.push(mesh);\r\n                });\r\n            }\r\n\r\n            updateUI() {\r\n                document.getElementById('generation').textContent = this.ga.generation;\r\n                document.getElementById('bestFitness').textContent = this.ga.bestFitness.toFixed(2);\r\n            }\r\n\r\n            animate() {\r\n                requestAnimationFrame(() => this.animate());\r\n\r\n                // Update physics\r\n                this.physicsWorld.step(1 / 60);\r\n                if (this.currentCreature) {\r\n                    this.currentCreature.applyActuation(performance.now() / 1000);\r\n\r\n                    // Sync meshes with physics bodies\r\n                    this.currentCreature.bodies.forEach((body, i) => {\r\n                        this.currentCreature.meshes[i].position.copy(body.position);\r\n                        this.currentCreature.meshes[i].quaternion.copy(body.quaternion);\r\n                    });\r\n                }\r\n\r\n                this.renderer.render(this.scene, this.camera);\r\n                this.controls.update();\r\n            }\r\n        }\r\n\r\n        // Start simulation\r\n        new Simulation();\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "3d-creature-evolution-simulation-with-genetic-algorithm-deepseek-r1",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.762Z",
    "model": "deepseek-r1",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, simulation, architecture."
  }
}
