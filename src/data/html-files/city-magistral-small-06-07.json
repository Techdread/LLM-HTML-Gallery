{
  "title": "Futuristic Cityscape with Flying Vehicles",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Futuristic Cityscape with Flying Vehicles</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n            font-family: Arial, sans-serif;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #ui {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background-color: rgba(0, 0, 0, 0.7);\r\n            color: white;\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        #ui h1 {\r\n            margin: 0 0 15px 0;\r\n        }\r\n\r\n        #ui .control-group {\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        #ui label {\r\n            display: inline-block;\r\n            width: 120px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <!-- Import map for three.js and its addons -->\r\n    <script type=\"importmap\">\r\n    {\r\n      \"imports\": {\r\n        \"three\": \"https://unpkg.com/three@0.165.0/build/three.module.js\",\r\n        \"three/addons/\": \"https://unpkg.com/three@0.165.0/examples/jsm/\"\r\n      }\r\n    }\r\n    </script>\r\n\r\n    <!-- UI -->\r\n    <div id=\"ui\">\r\n        <h1>Futuristic Cityscape</h1>\r\n        <div class=\"control-group\">\r\n            <label for=\"gridSize\">Grid Size:</label>\r\n            <input type=\"range\" id=\"gridSize\" min=\"10\" max=\"100\" value=\"30\">\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label for=\"citySize\">City Size:</label>\r\n            <input type=\"range\" id=\"citySize\" min=\"10\" max=\"200\" value=\"50\">\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label for=\"vehicleCount\">Vehicle Count:</label>\r\n            <input type=\"range\" id=\"vehicleCount\" min=\"1\" max=\"100\" value=\"10\">\r\n        </div>\r\n        <div class=\"control-group\">\r\n            <label for=\"timeOfDay\">Time of Day:</label>\r\n            <input type=\"range\" id=\"timeOfDay\" min=\"0\" max=\"24\" value=\"0\">\r\n        </div>\r\n    </div>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n        import { ImprovedNoise } from 'three/addons/math/ImprovedNoise.js';\r\n\r\n        let scene, camera, renderer, controls, vehicles = [];\r\n        let clock = new THREE.Clock();\r\n        let timeOfDay = 0;\r\n        let dayNightCycleSpeed = 0.1;\r\n\r\n        // UI elements\r\n        const gridSizeSlider = document.getElementById('gridSize');\r\n        const citySizeSlider = document.getElementById('citySize');\r\n        const vehicleCountSlider = document.getElementById('vehicleCount');\r\n        const timeOfDaySlider = document.getElementById('timeOfDay');\r\n\r\n        init();\r\n        animate();\r\n\r\n        function init() {\r\n            // Create scene, camera, renderer\r\n            scene = new THREE.Scene();\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.z = 50;\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.shadowMap.enabled = true;\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // Add orbit controls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.25;\r\n\r\n            // Add lights\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n            scene.add(ambientLight);\r\n\r\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n            directionalLight.position.set(1, 1, 1);\r\n            directionalLight.castShadow = true;\r\n            scene.add(directionalLight);\r\n\r\n            // Create cityscape\r\n            createCityscape();\r\n\r\n            // Create flying vehicles\r\n            createFlyingVehicles();\r\n\r\n            // Add event listeners for UI controls\r\n            gridSizeSlider.addEventListener('input', function () {\r\n                recreateCityscape();\r\n            });\r\n\r\n            citySizeSlider.addEventListener('input', function () {\r\n                recreateCityscape();\r\n            });\r\n\r\n            vehicleCountSlider.addEventListener('input', function () {\r\n                recreateFlyingVehicles();\r\n            });\r\n\r\n            timeOfDaySlider.addEventListener('input', function () {\r\n                updateTimeOfDay();\r\n            });\r\n\r\n            // Resize listener\r\n            window.addEventListener('resize', onWindowResize);\r\n        }\r\n\r\n        function createCityscape() {\r\n            // Clear existing buildings\r\n            scene.children.forEach(child => {\r\n                if (child instanceof THREE.Mesh && child.name.startsWith('building')) {\r\n                    scene.remove(child);\r\n                }\r\n            });\r\n\r\n            // Clear parks and other recreational areas\r\n            scene.children.forEach(child => {\r\n                if (child instanceof THREE.Mesh && child.name.startsWith('park')) {\r\n                    scene.remove(child);\r\n                }\r\n            });\r\n\r\n            // Grid parameters\r\n            const gridSize = parseInt(gridSizeSlider.value);\r\n            const citySize = parseInt(citySizeSlider.value);\r\n            const gridHalfSize = gridSize / 2;\r\n            const noise = new ImprovedNoise();\r\n\r\n            // Create buildings\r\n            for (let x = -gridHalfSize; x <= gridHalfSize; x++) {\r\n                for (let z = -gridHalfSize; z <= gridHalfSize; z++) {\r\n                    // Determine building height based on noise and distance from center\r\n                    const distanceFromCenter = Math.max(0, Math.abs(x) + Math.abs(z));\r\n                    const noiseValue = noise.noise(x * 0.1, z * 0.1, 0);\r\n                    const buildingHeight = Math.max(5, Math.floor((citySize - distanceFromCenter) * 0.5 + noiseValue * citySize * 0.3));\r\n\r\n                    if (buildingHeight > 5) {\r\n                        // Create building\r\n                        const buildingGeometry = new THREE.BoxGeometry(2, buildingHeight, 2);\r\n                        const buildingMaterial = new THREE.MeshStandardMaterial({\r\n                            color: new THREE.Color(Math.random(), Math.random(), Math.random()),\r\n                            metalness: 0.5,\r\n                            roughness: 0.5\r\n                        });\r\n                        const building = new THREE.Mesh(buildingGeometry, buildingMaterial);\r\n                        building.position.set(x * 3, buildingHeight / 2, z * 3);\r\n                        building.name = 'building-' + x + '-' + z;\r\n                        building.castShadow = true;\r\n                        building.receiveShadow = true;\r\n                        scene.add(building);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Create parks and other recreational areas\r\n            const parkGeometry = new THREE.PlaneGeometry(10, 10);\r\n            const parkMaterial = new THREE.MeshStandardMaterial({\r\n                color: new THREE.Color(0.2, 0.8, 0.2),\r\n                side: THREE.DoubleSide\r\n            });\r\n\r\n            // Create a park\r\n            const park = new THREE.Mesh(parkGeometry, parkMaterial);\r\n            park.position.set(0, 0, gridHalfSize * 3 + 5);\r\n            park.rotation.x = -Math.PI / 2;\r\n            park.name = 'park';\r\n            park.receiveShadow = true;\r\n            scene.add(park);\r\n\r\n            // Create a beach\r\n            const beachGeometry = new THREE.PlaneGeometry(20, 10);\r\n            const beachMaterial = new THREE.MeshStandardMaterial({\r\n                color: new THREE.Color(0.8, 0.7, 0.5),\r\n                side: THREE.DoubleSide\r\n            });\r\n\r\n            const beach = new THREE.Mesh(beachGeometry, beachMaterial);\r\n            beach.position.set(0, 0, -gridHalfSize * 3 - 5);\r\n            beach.rotation.x = -Math.PI / 2;\r\n            beach.name = 'beach';\r\n            beach.receiveShadow = true;\r\n            scene.add(beach);\r\n\r\n            // Add some trees or other decorative elements\r\n            const treeGeometry = new THREE.ConeGeometry(1, 3, 8);\r\n            const treeMaterial = new THREE.MeshStandardMaterial({ color: new THREE.Color(0.1, 0.5, 0.1) });\r\n\r\n            for (let i = 0; i < 20; i++) {\r\n                const tree = new THREE.Mesh(treeGeometry, treeMaterial);\r\n                tree.position.set(\r\n                    (Math.random() - 0.5) * parkGeometry.parameters.width,\r\n                    1.5,\r\n                    park.position.z + (Math.random() - 0.5) * parkGeometry.parameters.width\r\n                );\r\n                tree.name = 'tree';\r\n                tree.castShadow = true;\r\n                tree.receiveShadow = true;\r\n                scene.add(tree);\r\n            }\r\n        }\r\n\r\n        function recreateCityscape() {\r\n            // Recreate the cityscape with new parameters\r\n            createCityscape();\r\n            recreateFlyingVehicles();\r\n        }\r\n\r\n        function createFlyingVehicles() {\r\n            // Clear existing vehicles\r\n            vehicles.forEach(vehicle => {\r\n                scene.remove(vehicle);\r\n            });\r\n            vehicles = [];\r\n\r\n            // Vehicle count\r\n            const vehicleCount = parseInt(vehicleCountSlider.value);\r\n\r\n            // Create flying vehicles\r\n            for (let i = 0; i < vehicleCount; i++) {\r\n                // Create a simple vehicle (a sphere with a cone for the front)\r\n                const vehicleBody = new THREE.SphereGeometry(0.5, 16, 16);\r\n                const vehicleCone = new THREE.ConeGeometry(0.5, 1, 8);\r\n                vehicleCone.position.y = -0.25; // Position the cone to be at the front of the sphere\r\n\r\n                const vehicleGeometry = new THREE.BufferGeometry();\r\n                const vehiclePositions = new Float32Array((vehicleBody.attributes.position.count + vehicleCone.attributes.position.count) * 3);\r\n                const vehicleNormals = new Float32Array((vehicleBody.attributes.position.count + vehicleCone.attributes.position.count) * 3);\r\n\r\n                // Copy positions and normals from the body\r\n                vehicleBody.attributes.position.array.copyToRange(vehiclePositions, 0, 0, 0);\r\n                vehicleBody.attributes.normal.array.copyToRange(vehicleNormals, 0, 0, 0);\r\n\r\n                // Copy positions and normals from the cone (offset by the body's position count)\r\n                vehicleCone.attributes.position.array.copyToRange(vehiclePositions, vehicleBody.attributes.position.count * 3, 0, 0);\r\n                vehicleCone.attributes.normal.array.copyToRange(vehicleNormals, vehicleBody.attributes.normal.count * 3, 0, 0);\r\n\r\n                vehicleGeometry.setAttribute('position', new THREE.BufferAttribute(vehiclePositions, 3));\r\n                vehicleGeometry.setAttribute('normal', new THREE.BufferAttribute(vehicleNormals, 3));\r\n\r\n                const vehicleMaterial = new THREE.MeshStandardMaterial({\r\n                    color: new THREE.Color(Math.random(), Math.random(), Math.random()),\r\n                    metalness: 0.8,\r\n                    roughness: 0.2\r\n                });\r\n\r\n                const vehicle = new THREE.Mesh(vehicleGeometry, vehicleMaterial);\r\n                vehicle.name = 'vehicle-' + i;\r\n\r\n                // Random initial position\r\n                vehicle.position.set(\r\n                    (Math.random() - 0.5) * 100,\r\n                    Math.random() * 50 + 10,\r\n                    (Math.random() - 0.5) * 100\r\n                );\r\n\r\n                // Random direction and speed\r\n                vehicle.userData.direction = new THREE.Vector3(\r\n                    Math.random() - 0.5,\r\n                    Math.random() - 0.5,\r\n                    Math.random() - 0.5\r\n                ).normalize();\r\n                vehicle.userData.speed = Math.random() * 2 + 1;\r\n\r\n                // Rotate vehicle to face direction\r\n                vehicle.lookAt(vehicle.position.clone().add(vehicle.userData.direction));\r\n\r\n                vehicle.castShadow = true;\r\n                vehicle.receiveShadow = true;\r\n                scene.add(vehicle);\r\n\r\n                vehicles.push(vehicle);\r\n            }\r\n        }\r\n\r\n        function recreateFlyingVehicles() {\r\n            // Recreate the flying vehicles with new parameters\r\n            createFlyingVehicles();\r\n        }\r\n\r\n        function updateTimeOfDay() {\r\n            timeOfDay = parseInt(timeOfDaySlider.value);\r\n            const dayNightCycle = timeOfDay / 24;\r\n\r\n            // Update lighting based on time of day\r\n            const sunIntensity = 0.8 * Math.max(0, Math.min(1, 1 - Math.abs(dayNightCycle - 0.5) * 2));\r\n            const ambientIntensity = 0.5 * (1 - sunIntensity);\r\n\r\n            scene.children.forEach(child => {\r\n                if (child instanceof THREE.DirectionalLight) {\r\n                    child.intensity = sunIntensity;\r\n                    child.color.setHSL(dayNightCycle, 0.5, 0.5);\r\n                } else if (child instanceof THREE.AmbientLight) {\r\n                    child.intensity = ambientIntensity;\r\n                    child.color.setHSL((dayNightCycle + 0.5) % 1, 0.5, 0.5);\r\n                }\r\n            });\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            // Update vehicles\r\n            const delta = clock.getDelta();\r\n            vehicles.forEach(vehicle => {\r\n                // Move vehicle along its path\r\n                vehicle.position.add(vehicle.userData.direction.clone().multiplyScalar(vehicle.userData.speed * delta));\r\n\r\n                // If vehicle is too far from the center, reverse direction\r\n                if (vehicle.position.distanceTo(new THREE.Vector3(0, 0, 0)) > 200) {\r\n                    vehicle.userData.direction.multiplyScalar(-1);\r\n                    vehicle.lookAt(vehicle.position.clone().add(vehicle.userData.direction));\r\n                }\r\n            });\r\n\r\n            // Update day/night cycle\r\n            timeOfDay = (timeOfDay + dayNightCycleSpeed * delta) % 24;\r\n            timeOfDaySlider.value = Math.floor(timeOfDay);\r\n            updateTimeOfDay();\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "city-magistral-small-06-07",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Procedural Generation",
      "Astronomy",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:58.076Z",
    "model": "magistral-small-06-07",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, procedural generation, astronomy, architecture."
  }
}
