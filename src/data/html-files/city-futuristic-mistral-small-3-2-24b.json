{
  "title": "Futuristic Cityscape Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Futuristic Cityscape Simulation</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n            font-family: Arial, sans-serif;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #ui {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background-color: rgba(0, 0, 0, 0.5);\r\n            color: white;\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        label {\r\n            display: inline-block;\r\n            width: 120px;\r\n        }\r\n\r\n        input {\r\n            width: 100px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"ui\">\r\n        <label for=\"gridSize\">Grid Size:</label>\r\n        <input type=\"range\" id=\"gridSize\" min=\"1\" max=\"10\" value=\"5\"><br>\r\n        <label for=\"citySize\">City Size:</label>\r\n        <input type=\"range\" id=\"citySize\" min=\"1\" max=\"10\" value=\"5\"><br>\r\n        <label for=\"vehicleCount\">Vehicle Count:</label>\r\n        <input type=\"range\" id=\"vehicleCount\" min=\"1\" max=\"50\" value=\"10\"><br>\r\n        <label for=\"timeOfDay\">Time of Day:</label>\r\n        <input type=\"range\" id=\"timeOfDay\" min=\"0\" max=\"24\" value=\"12\"><br>\r\n    </div>\r\n\r\n    <script type=\"importmap\">\r\n    {\r\n      \"imports\": {\r\n        \"three\": \"https://unpkg.com/three@0.165.0/build/three.module.js\",\r\n        \"three/addons/\": \"https://unpkg.com/three@0.165.0/examples/jsm/\"\r\n      }\r\n    }\r\n  </script>\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n        import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\r\n        import { ImprovedNoise } from 'three/addons/math/ImprovedNoise.js';\r\n\r\n        let scene, camera, renderer, controls, clock;\r\n        let city, vehicles, timeOfDay = 12;\r\n        let gridSize = 5, citySize = 5, vehicleCount = 10;\r\n\r\n        init();\r\n        animate();\r\n\r\n        function init() {\r\n            // Create scene, camera, renderer\r\n            scene = new THREE.Scene();\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(50, 50, 50);\r\n            clock = new THREE.Clock();\r\n\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.shadowMap.enabled = true;\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // OrbitControls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.25;\r\n\r\n            // Resize listener\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n            // UI event listeners\r\n            document.getElementById('gridSize').addEventListener('input', onGridSizeChange);\r\n            document.getElementById('citySize').addEventListener('input', onCitySizeChange);\r\n            document.getElementById('vehicleCount').addEventListener('input', onVehicleCountChange);\r\n            document.getElementById('timeOfDay').addEventListener('input', onTimeOfDayChange);\r\n\r\n            // Create city\r\n            createCity();\r\n\r\n            // Create vehicles\r\n            createVehicles();\r\n\r\n            // Add ambient light\r\n            const ambientLight = new THREE.AmbientLight(0x404040);\r\n            scene.add(ambientLight);\r\n\r\n            // Add directional light (sun)\r\n            const sunLight = new THREE.DirectionalLight(0xffffff, 1);\r\n            sunLight.position.set(100, 100, 100);\r\n            sunLight.castShadow = true;\r\n            sunLight.shadow.mapSize.width = 2048;\r\n            sunLight.shadow.mapSize.height = 2048;\r\n            scene.add(sunLight);\r\n        }\r\n\r\n        function createCity() {\r\n            // Clear previous city\r\n            if (city) {\r\n                scene.remove(city);\r\n            }\r\n\r\n            city = new THREE.Group();\r\n\r\n            const noise = new ImprovedNoise();\r\n            const size = citySize * 10;\r\n            const grid = gridSize * 10;\r\n\r\n            for (let i = 0; i < grid; i++) {\r\n                for (let j = 0; j < grid; j++) {\r\n                    const x = i * size / grid - size / 2;\r\n                    const z = j * size / grid - size / 2;\r\n\r\n                    // Generate random building height and type\r\n                    const height = Math.random() * 20 + 5;\r\n                    const type = Math.floor(Math.random() * 3);\r\n\r\n                    // Create building geometry\r\n                    let geometry;\r\n                    switch (type) {\r\n                        case 0:\r\n                            geometry = new THREE.BoxGeometry(5, height, 5);\r\n                            break;\r\n                        case 1:\r\n                            geometry = new THREE.CylinderGeometry(2.5, 2.5, height, 8);\r\n                            break;\r\n                        case 2:\r\n                            geometry = new THREE.ConeGeometry(2.5, height, 8);\r\n                            break;\r\n                    }\r\n\r\n                    // Create building material\r\n                    const color = new THREE.Color();\r\n                    color.setHSL(Math.random(), 0.5, 0.5);\r\n                    const material = new THREE.MeshPhongMaterial({ color: color });\r\n                    const building = new THREE.Mesh(geometry, material);\r\n                    building.position.set(x, height / 2, z);\r\n                    building.castShadow = true;\r\n                    building.receiveShadow = true;\r\n                    city.add(building);\r\n\r\n                    // Add some random parks and beaches\r\n                    if (Math.random() > 0.8) {\r\n                        const park = new THREE.Mesh(\r\n                            new THREE.PlaneGeometry(10, 10),\r\n                            new THREE.MeshPhongMaterial({ color: 0x3a5f0b })\r\n                        );\r\n                        park.position.set(x, 0, z);\r\n                        park.rotation.x = -Math.PI / 2;\r\n                        park.receiveShadow = true;\r\n                        city.add(park);\r\n                    } else if (Math.random() > 0.8) {\r\n                        const beach = new THREE.Mesh(\r\n                            new THREE.PlaneGeometry(10, 10),\r\n                            new THREE.MeshPhongMaterial({ color: 0xe6b800 })\r\n                        );\r\n                        beach.position.set(x, 0, z);\r\n                        beach.rotation.x = -Math.PI / 2;\r\n                        beach.receiveShadow = true;\r\n                        city.add(beach);\r\n                    }\r\n                }\r\n            }\r\n\r\n            scene.add(city);\r\n        }\r\n\r\n        function createVehicles() {\r\n            // Clear previous vehicles\r\n            if (vehicles) {\r\n                scene.remove(vehicles);\r\n            }\r\n\r\n            vehicles = new THREE.Group();\r\n\r\n            for (let i = 0; i < vehicleCount; i++) {\r\n                // Load vehicle model (placeholder: use a simple geometry)\r\n                const vehicle = new THREE.Mesh(\r\n                    new THREE.SphereGeometry(1, 16, 16),\r\n                    new THREE.MeshPhongMaterial({ color: 0xff0000 })\r\n                );\r\n                vehicle.position.set(\r\n                    Math.random() * citySize * 10 - citySize * 5,\r\n                    Math.random() * 20 + 10,\r\n                    Math.random() * citySize * 10 - citySize * 5\r\n                );\r\n                vehicle.castShadow = true;\r\n                vehicles.add(vehicle);\r\n\r\n                // Create vehicle path\r\n                const path = new THREE.CatmullRomCurve3([\r\n                    new THREE.Vector3(\r\n                        Math.random() * citySize * 10 - citySize * 5,\r\n                        Math.random() * 20 + 10,\r\n                        Math.random() * citySize * 10 - citySize * 5\r\n                    ),\r\n                    new THREE.Vector3(\r\n                        Math.random() * citySize * 10 - citySize * 5,\r\n                        Math.random() * 20 + 10,\r\n                        Math.random() * citySize * 10 - citySize * 5\r\n                    ),\r\n                    new THREE.Vector3(\r\n                        Math.random() * citySize * 10 - citySize * 5,\r\n                        Math.random() * 20 + 10,\r\n                        Math.random() * citySize * 10 - citySize * 5\r\n                    )\r\n                ]);\r\n                vehicle.userData.path = path;\r\n                vehicle.userData.progress = 0;\r\n            }\r\n\r\n            scene.add(vehicles);\r\n        }\r\n\r\n        function onGridSizeChange(event) {\r\n            gridSize = parseInt(event.target.value);\r\n            createCity();\r\n        }\r\n\r\n        function onCitySizeChange(event) {\r\n            citySize = parseInt(event.target.value);\r\n            createCity();\r\n            createVehicles();\r\n        }\r\n\r\n        function onVehicleCountChange(event) {\r\n            vehicleCount = parseInt(event.target.value);\r\n            createVehicles();\r\n        }\r\n\r\n        function onTimeOfDayChange(event) {\r\n            timeOfDay = parseInt(event.target.value);\r\n            updateLighting();\r\n        }\r\n\r\n        function updateLighting() {\r\n            const sunLight = scene.children.find(child => child instanceof THREE.DirectionalLight);\r\n            if (sunLight) {\r\n                const hour = timeOfDay;\r\n                const minute = (hour - Math.floor(hour)) * 60;\r\n\r\n                const sunPosition = new THREE.Vector3();\r\n                sunPosition.setFromSphericalCoords(\r\n                    1,\r\n                    (90 - hour * 15 - minute / 2) * Math.PI / 180,\r\n                    0\r\n                );\r\n                sunLight.position.copy(sunPosition);\r\n                sunLight.position.multiplyScalar(100);\r\n\r\n                // Adjust light intensity based on time of day\r\n                sunLight.intensity = 1 - Math.abs(hour - 12) / 12 * 0.8;\r\n            }\r\n        }\r\n\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            const delta = clock.getDelta();\r\n\r\n            // Update vehicles\r\n            vehicles.children.forEach(vehicle => {\r\n                const path = vehicle.userData.path;\r\n                const progress = vehicle.userData.progress;\r\n                const point = path.getPointAt(progress);\r\n                vehicle.position.copy(point);\r\n\r\n                vehicle.userData.progress += delta * 0.5;\r\n                if (vehicle.userData.progress > 1) {\r\n                    vehicle.userData.progress = 0;\r\n                }\r\n            });\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "city-futuristic-mistral-small-3-2-24b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Procedural Generation",
      "Astronomy",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:58.085Z",
    "model": "mistral-small-3.2-24b",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, procedural generation, astronomy, simulation, architecture."
  }
}
