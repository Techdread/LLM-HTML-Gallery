{
  "title": "Dyson Sphere Construction Simulator",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Dyson Sphere Construction Simulator</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background-color: #111;\r\n            color: #eee;\r\n            overflow: hidden;\r\n            /* Prevent scrollbars from UI */\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #ui-container {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background-color: rgba(0, 0, 0, 0.7);\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 0 15px rgba(0, 128, 255, 0.5);\r\n            border: 1px solid rgba(0, 128, 255, 0.3);\r\n            max-width: 320px;\r\n        }\r\n\r\n        .control-group {\r\n            margin-bottom: 12px;\r\n        }\r\n\r\n        .control-group label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n            font-size: 0.9em;\r\n            color: #aaa;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n            width: calc(100% - 20px);\r\n            margin-right: 5px;\r\n            vertical-align: middle;\r\n        }\r\n\r\n        button {\r\n            background-color: #007bff;\r\n            color: white;\r\n            border: none;\r\n            padding: 8px 12px;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 0.9em;\r\n            transition: background-color 0.3s ease;\r\n            margin-right: 5px;\r\n            margin-bottom: 5px;\r\n        }\r\n\r\n        button:hover {\r\n            background-color: #0056b3;\r\n        }\r\n\r\n        button:disabled {\r\n            background-color: #555;\r\n            cursor: not-allowed;\r\n        }\r\n\r\n        #stats {\r\n            margin-top: 15px;\r\n            border-top: 1px solid #444;\r\n            padding-top: 10px;\r\n        }\r\n\r\n        #stats p {\r\n            margin: 5px 0;\r\n            font-size: 0.85em;\r\n            color: #ccc;\r\n        }\r\n\r\n        #stats span {\r\n            font-weight: bold;\r\n            color: #0af;\r\n        }\r\n\r\n        #progressPercentDisplay {\r\n            font-size: 0.9em;\r\n            color: #0af;\r\n            vertical-align: middle;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"ui-container\">\r\n        <div class=\"control-group\">\r\n            <label for=\"progressSlider\">Construction Progress (<span id=\"progressPercentDisplay\">0%</span>):</label>\r\n            <input type=\"range\" id=\"progressSlider\" min=\"0\" max=\"1\" step=\"0.001\" value=\"0\">\r\n        </div>\r\n        <button id=\"startStopButton\">Start Construction</button>\r\n        <button id=\"toggleCollectorsButton\">Hide Collectors</button>\r\n        <div class=\"control-group\">\r\n            <label for=\"starBrightnessSlider\">Star Brightness:</label>\r\n            <input type=\"range\" id=\"starBrightnessSlider\" min=\"0.2\" max=\"3\" step=\"0.05\" value=\"1\">\r\n        </div>\r\n        <div id=\"stats\">\r\n            <p>Completion: <span id=\"statCompletion\">0%</span></p>\r\n            <p>Collectors Built: <span id=\"statCollectors\">0 / 0</span></p>\r\n            <p>Est. Time to Full Build: <span id=\"statTime\">-- s</span></p>\r\n        </div>\r\n    </div>\r\n\r\n    <script type=\"importmap\">\r\n        {\r\n            \"imports\": {\r\n                \"three\": \"https://cdn.jsdelivr.net/npm/three@0.165.0/build/three.module.js\",\r\n                \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.165.0/examples/jsm/\"\r\n            }\r\n        }\r\n    </script>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        let scene, camera, renderer, controls, clock;\r\n        let starMesh, coronaSprite, pointLight, ambientLight;\r\n        let dysonSphereGroup, allCollectors = [];\r\n\r\n        // Configuration\r\n        const STAR_RADIUS = 1.5;\r\n        const CORONA_SCALE = STAR_RADIUS * 2.5;\r\n        const SUNSPOT_COUNT = 15;\r\n        const DYSON_SPHERE_RADIUS = STAR_RADIUS * 3;\r\n        const NUM_COLLECTORS = 600; // Number of solar collectors\r\n        const COLLECTOR_SIZE = { width: 0.25, height: 0.4, depth: 0.05 };\r\n        const TOTAL_CONSTRUCTION_TIME = 60; // seconds for full build\r\n\r\n        // State\r\n        let constructionProgress = 0;\r\n        let isConstructing = false;\r\n        let showCollectorsToggle = true;\r\n\r\n        init();\r\n        animate();\r\n\r\n        function createCoronaTexture() {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = 128;\r\n            canvas.height = 128;\r\n            const context = canvas.getContext('2d');\r\n            const gradient = context.createRadialGradient(64, 64, 0, 64, 64, 64);\r\n            gradient.addColorStop(0.1, 'rgba(255,255,220,0.8)');\r\n            gradient.addColorStop(0.3, 'rgba(255,220,180,0.5)');\r\n            gradient.addColorStop(0.6, 'rgba(255,200,100,0.2)');\r\n            gradient.addColorStop(1, 'rgba(255,160,50,0)');\r\n            context.fillStyle = gradient;\r\n            context.fillRect(0, 0, 128, 128);\r\n            return new THREE.CanvasTexture(canvas);\r\n        }\r\n\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x050510); // Dark space blue/black\r\n\r\n            // Clock\r\n            clock = new THREE.Clock();\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, DYSON_SPHERE_RADIUS * 0.8, DYSON_SPHERE_RADIUS * 2);\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // OrbitControls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.05;\r\n            controls.minDistance = STAR_RADIUS * 2;\r\n            controls.maxDistance = DYSON_SPHERE_RADIUS * 5;\r\n            controls.target.set(0, 0, 0);\r\n\r\n            // Lighting\r\n            ambientLight = new THREE.AmbientLight(0xffffff, 0.1); // Soft ambient light\r\n            scene.add(ambientLight);\r\n\r\n            pointLight = new THREE.PointLight(0xffddaa, 1.5, DYSON_SPHERE_RADIUS * 5, 1.5); // Star's light\r\n            pointLight.position.set(0, 0, 0);\r\n            scene.add(pointLight);\r\n\r\n            // Star\r\n            const starGeometry = new THREE.SphereGeometry(STAR_RADIUS, 64, 32);\r\n            // Using MeshPhongMaterial for better interaction with light\r\n            const starMaterial = new THREE.MeshPhongMaterial({\r\n                color: 0xffff88, // Yellowish star color\r\n                emissive: 0xffcc00, // Emits its own light\r\n                emissiveIntensity: 1,\r\n                shininess: 30, // Some shininess\r\n                fog: false\r\n            });\r\n            starMesh = new THREE.Mesh(starGeometry, starMaterial);\r\n            scene.add(starMesh);\r\n\r\n            // Corona\r\n            const coronaMaterial = new THREE.SpriteMaterial({\r\n                map: createCoronaTexture(),\r\n                color: 0xffcc33,\r\n                transparent: true,\r\n                blending: THREE.AdditiveBlending,\r\n                opacity: 0.9,\r\n                fog: false,\r\n                sizeAttenuation: true\r\n            });\r\n            coronaSprite = new THREE.Sprite(coronaMaterial);\r\n            coronaSprite.scale.set(CORONA_SCALE, CORONA_SCALE, 1);\r\n            starMesh.add(coronaSprite); // Add as child to star\r\n\r\n            // Sunspots\r\n            const sunspotGeometry = new THREE.SphereGeometry(STAR_RADIUS * 0.05, 16, 8);\r\n            const sunspotMaterial = new THREE.MeshBasicMaterial({ color: 0x332211, fog: false });\r\n            for (let i = 0; i < SUNSPOT_COUNT; i++) {\r\n                const sunspot = new THREE.Mesh(sunspotGeometry, sunspotMaterial);\r\n                const phi = Math.random() * Math.PI * 2; // longitude\r\n                const theta = Math.acos((Math.random() * 2) - 1); // latitude\r\n                sunspot.position.setFromSphericalCoords(STAR_RADIUS * 1.005, phi, theta); // Slightly above surface\r\n                sunspot.lookAt(new THREE.Vector3(0, 0, 0)); // Orient towards center\r\n                starMesh.add(sunspot);\r\n            }\r\n\r\n            // Dyson Sphere Collectors\r\n            dysonSphereGroup = new THREE.Group();\r\n            scene.add(dysonSphereGroup);\r\n\r\n            const collectorGeometry = new THREE.BoxGeometry(COLLECTOR_SIZE.width, COLLECTOR_SIZE.height, COLLECTOR_SIZE.depth);\r\n            const collectorMaterial = new THREE.MeshStandardMaterial({\r\n                color: 0x7799cc, // Bluish-metallic\r\n                metalness: 0.9,\r\n                roughness: 0.3,\r\n                side: THREE.DoubleSide\r\n            });\r\n\r\n            const points = fibonacciSphere(NUM_COLLECTORS, DYSON_SPHERE_RADIUS);\r\n            points.forEach(point => {\r\n                const collector = new THREE.Mesh(collectorGeometry, collectorMaterial);\r\n                collector.position.copy(point);\r\n                collector.lookAt(new THREE.Vector3(0, 0, 0)); // Point towards the star\r\n                collector.visible = false; // Initially hidden\r\n                dysonSphereGroup.add(collector);\r\n                allCollectors.push(collector);\r\n            });\r\n\r\n            document.getElementById('statCollectors').textContent = `0 / ${NUM_COLLECTORS}`;\r\n\r\n\r\n            // UI Event Listeners\r\n            const progressSlider = document.getElementById('progressSlider');\r\n            progressSlider.addEventListener('input', (event) => {\r\n                constructionProgress = parseFloat(event.target.value);\r\n                if (isConstructing && constructionProgress < 1) { // If user scrubs while constructing, stop auto-construction\r\n                    isConstructing = false;\r\n                    document.getElementById('startStopButton').textContent = 'Start Construction';\r\n                    document.getElementById('startStopButton').disabled = false;\r\n                } else if (constructionProgress >= 1) {\r\n                    document.getElementById('startStopButton').textContent = 'Construction Complete';\r\n                    document.getElementById('startStopButton').disabled = true;\r\n                    isConstructing = false;\r\n                }\r\n                updateCollectorsVisibility();\r\n                updateStats();\r\n            });\r\n\r\n            document.getElementById('startStopButton').addEventListener('click', () => {\r\n                if (constructionProgress >= 1) return;\r\n                isConstructing = !isConstructing;\r\n                document.getElementById('startStopButton').textContent = isConstructing ? 'Stop Construction' : 'Start Construction';\r\n            });\r\n\r\n            document.getElementById('toggleCollectorsButton').addEventListener('click', () => {\r\n                showCollectorsToggle = !showCollectorsToggle;\r\n                document.getElementById('toggleCollectorsButton').textContent = showCollectorsToggle ? 'Hide Collectors' : 'Show Collectors';\r\n                updateCollectorsVisibility();\r\n            });\r\n\r\n            document.getElementById('starBrightnessSlider').addEventListener('input', (event) => {\r\n                const brightness = parseFloat(event.target.value);\r\n                starMesh.material.emissiveIntensity = brightness;\r\n                pointLight.intensity = brightness * 1.5; // Adjust point light intensity as well\r\n                coronaSprite.material.opacity = Math.min(0.9, brightness * 0.7); // Corona opacity tied to brightness\r\n            });\r\n\r\n            // Handle window resize\r\n            window.addEventListener('resize', onWindowResize, false);\r\n            onWindowResize(); // Initial call\r\n            updateStats(); // Initial stat update\r\n        }\r\n\r\n        function fibonacciSphere(samples, radius) {\r\n            const points = [];\r\n            const phi = Math.PI * (Math.sqrt(5) - 1); // golden angle in radians\r\n\r\n            for (let i = 0; i < samples; i++) {\r\n                const y = 1 - (i / (samples - 1)) * 2;  // y goes from 1 to -1\r\n                const R = Math.sqrt(1 - y * y) * radius; // radius at y\r\n\r\n                const theta = phi * i; // golden angle increment\r\n\r\n                const x = Math.cos(theta) * R;\r\n                const z = Math.sin(theta) * R;\r\n\r\n                points.push(new THREE.Vector3(x, y * radius, z));\r\n            }\r\n            return points;\r\n        }\r\n\r\n        function updateCollectorsVisibility() {\r\n            const collectorsToShow = Math.floor(allCollectors.length * constructionProgress);\r\n            let visibleCount = 0;\r\n            allCollectors.forEach((collector, index) => {\r\n                if (showCollectorsToggle && index < collectorsToShow) {\r\n                    collector.visible = true;\r\n                    visibleCount++;\r\n                } else {\r\n                    collector.visible = false;\r\n                }\r\n            });\r\n            document.getElementById('statCollectors').textContent = `${visibleCount} / ${NUM_COLLECTORS}`;\r\n        }\r\n\r\n        function updateStats() {\r\n            const progressPercent = Math.round(constructionProgress * 100);\r\n            document.getElementById('progressPercentDisplay').textContent = `${progressPercent}%`;\r\n            document.getElementById('progressSlider').value = constructionProgress; // Keep slider in sync if changed by animation\r\n\r\n            document.getElementById('statCompletion').textContent = `${progressPercent}%`;\r\n\r\n            // Collectors built stat is updated in updateCollectorsVisibility\r\n\r\n            let timeToFullBuild = '-- s';\r\n            if (constructionProgress < 1) {\r\n                if (isConstructing) {\r\n                    timeToFullBuild = `${Math.round(TOTAL_CONSTRUCTION_TIME * (1 - constructionProgress))} s`;\r\n                } else {\r\n                    timeToFullBuild = `${Math.round(TOTAL_CONSTRUCTION_TIME * (1 - constructionProgress))} s (paused)`;\r\n                }\r\n            } else {\r\n                timeToFullBuild = 'Complete';\r\n            }\r\n            document.getElementById('statTime').textContent = timeToFullBuild;\r\n        }\r\n\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            const deltaTime = clock.getDelta();\r\n\r\n            controls.update(); // For damping\r\n\r\n            // Star and Corona animation\r\n            starMesh.rotation.y += 0.0005 * deltaTime * 60; // Slow rotation for star and sunspots\r\n            coronaSprite.rotation.z += 0.001 * deltaTime * 60; // Corona shimmers/rotates slightly differently\r\n\r\n            // Construction progress\r\n            if (isConstructing && constructionProgress < 1) {\r\n                constructionProgress += (1 / TOTAL_CONSTRUCTION_TIME) * deltaTime;\r\n                constructionProgress = Math.min(constructionProgress, 1.0);\r\n\r\n                if (constructionProgress >= 1) {\r\n                    constructionProgress = 1.0;\r\n                    isConstructing = false;\r\n                    document.getElementById('startStopButton').textContent = 'Construction Complete';\r\n                    document.getElementById('startStopButton').disabled = true;\r\n                }\r\n                updateCollectorsVisibility();\r\n                updateStats();\r\n            }\r\n\r\n            // Optional: Animate constructed part of Dyson Sphere\r\n            if (dysonSphereGroup && constructionProgress > 0.01) {\r\n                dysonSphereGroup.rotation.y += 0.00005 * deltaTime * 60 * constructionProgress; // Slower rotation, increases with completion\r\n                dysonSphereGroup.rotation.x += 0.00002 * deltaTime * 60 * constructionProgress;\r\n            }\r\n\r\n\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "dyson-sphere-gemini-pro-2-5",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.925Z",
    "model": "gemini-pro-2.5",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, astronomy, architecture."
  }
}
