{
  "title": "Dyson Sphere Construction Simulator",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Dyson Sphere Construction Simulator</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            overflow: hidden;\r\n            font-family: 'Arial', sans-serif;\r\n            background-color: #000;\r\n            color: #fff;\r\n        }\r\n\r\n        #canvas-container {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n        }\r\n\r\n        #ui-container {\r\n            position: absolute;\r\n            bottom: 20px;\r\n            left: 0;\r\n            right: 0;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            z-index: 100;\r\n            padding: 0 20px;\r\n        }\r\n\r\n        #controls {\r\n            background: rgba(0, 0, 0, 0.7);\r\n            border-radius: 10px;\r\n            padding: 15px;\r\n            width: 100%;\r\n            max-width: 800px;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 10px;\r\n        }\r\n\r\n        .control-group {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n        }\r\n\r\n        .control-label {\r\n            min-width: 120px;\r\n            font-size: 14px;\r\n        }\r\n\r\n        button {\r\n            background: #333;\r\n            color: white;\r\n            border: 1px solid #555;\r\n            border-radius: 4px;\r\n            padding: 5px 10px;\r\n            cursor: pointer;\r\n            transition: background 0.3s;\r\n        }\r\n\r\n        button:hover {\r\n            background: #444;\r\n        }\r\n\r\n        button.active {\r\n            background: #0066ff;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n            flex-grow: 1;\r\n            width: 100%;\r\n        }\r\n\r\n        #progress-container {\r\n            width: 100%;\r\n            margin-bottom: 10px;\r\n        }\r\n\r\n        #progress-bar {\r\n            width: 100%;\r\n            height: 10px;\r\n            -webkit-appearance: none;\r\n            appearance: none;\r\n            background: #333;\r\n            border-radius: 5px;\r\n            outline: none;\r\n        }\r\n\r\n        #progress-bar::-webkit-slider-thumb {\r\n            -webkit-appearance: none;\r\n            appearance: none;\r\n            width: 20px;\r\n            height: 20px;\r\n            border-radius: 50%;\r\n            background: #0066ff;\r\n            cursor: pointer;\r\n        }\r\n\r\n        #stats {\r\n            position: absolute;\r\n            top: 20px;\r\n            right: 20px;\r\n            background: rgba(0, 0, 0, 0.7);\r\n            border-radius: 10px;\r\n            padding: 10px;\r\n            font-size: 14px;\r\n            max-width: 200px;\r\n        }\r\n\r\n        #title {\r\n            position: absolute;\r\n            top: 20px;\r\n            left: 20px;\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            background: rgba(0, 0, 0, 0.7);\r\n            border-radius: 10px;\r\n            padding: 10px;\r\n        }\r\n\r\n        .hidden {\r\n            display: none !important;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"canvas-container\"></div>\r\n\r\n    <div id=\"title\">Dyson Sphere Construction Simulator</div>\r\n\r\n    <div id=\"stats\">\r\n        <div>Construction Progress: <span id=\"progress-text\">0%</span></div>\r\n        <div>Collectors Built: <span id=\"collectors-text\">0</span></div>\r\n        <div>Time Remaining: <span id=\"time-text\">0 years</span></div>\r\n    </div>\r\n\r\n    <div id=\"ui-container\">\r\n        <div id=\"progress-container\">\r\n            <input type=\"range\" id=\"progress-bar\" min=\"0\" max=\"100\" value=\"0\" step=\"0.1\">\r\n        </div>\r\n\r\n        <div id=\"controls\">\r\n            <div class=\"control-group\">\r\n                <button id=\"play-pause-btn\">▶ Play</button>\r\n                <button id=\"reset-btn\">↻ Reset</button>\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <span class=\"control-label\">Star Brightness:</span>\r\n                <input type=\"range\" id=\"brightness-slider\" min=\"0.5\" max=\"2\" value=\"1\" step=\"0.1\">\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <span class=\"control-label\">Construction Rate:</span>\r\n                <input type=\"range\" id=\"rate-slider\" min=\"0.1\" max=\"5\" value=\"1\" step=\"0.1\">\r\n            </div>\r\n\r\n            <div class=\"control-group\">\r\n                <button id=\"toggle-collectors-btn\" class=\"active\">Hide Collectors</button>\r\n                <button id=\"toggle-animation-btn\">Enable Animation</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js\"></script>\r\n    <script>\r\n        // Main variables\r\n        let scene, camera, renderer, controls;\r\n        let star, corona, dysonSphere = [];\r\n        let isPlaying = false;\r\n        let constructionProgress = 0;\r\n        let constructionRate = 1; // % per second\r\n        let lastTimestamp = 0;\r\n        let totalCollectors = 2000;\r\n        let visibleCollectors = 0;\r\n        let showCollectors = true;\r\n        let animateCollectors = false;\r\n        let starBrightness = 1;\r\n\r\n        // Initialize the application\r\n        init();\r\n\r\n        function init() {\r\n            // Create scene\r\n            scene = new THREE.Scene();\r\n\r\n            // Create camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.z = 5;\r\n\r\n            // Create renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            document.getElementById('canvas-container').appendChild(renderer.domElement);\r\n\r\n            // Add orbit controls\r\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.05;\r\n\r\n            // Create star\r\n            createStar();\r\n\r\n            // Create Dyson Sphere collectors\r\n            createDysonSphere();\r\n\r\n            // Add event listeners\r\n            setupEventListeners();\r\n\r\n            // Start animation loop\r\n            animate();\r\n        }\r\n\r\n        function createStar() {\r\n            // Star core\r\n            const starGeometry = new THREE.SphereGeometry(1, 64, 64);\r\n            const starMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0xffff99,\r\n                transparent: true,\r\n                opacity: 0.9\r\n            });\r\n            star = new THREE.Mesh(starGeometry, starMaterial);\r\n            scene.add(star);\r\n\r\n            // Corona (glow effect)\r\n            const coronaGeometry = new THREE.SphereGeometry(1.1, 64, 64);\r\n            const coronaMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0xff6600,\r\n                transparent: true,\r\n                opacity: 0.3,\r\n                side: THREE.BackSide\r\n            });\r\n            corona = new THREE.Mesh(coronaGeometry, coronaMaterial);\r\n            scene.add(corona);\r\n\r\n            // Sunspots\r\n            const sunspotGeometry = new THREE.SphereGeometry(1.01, 64, 64);\r\n            const sunspotMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0x333333,\r\n                transparent: true,\r\n                opacity: 0.2\r\n            });\r\n            const sunspots = new THREE.Mesh(sunspotGeometry, sunspotMaterial);\r\n            scene.add(sunspots);\r\n        }\r\n\r\n        function createDysonSphere() {\r\n            const radius = 3;\r\n            const collectorSize = 0.1;\r\n\r\n            // Clear existing collectors\r\n            dysonSphere.forEach(collector => scene.remove(collector));\r\n            dysonSphere = [];\r\n\r\n            // Create collectors in a geodesic pattern\r\n            const icoGeometry = new THREE.IcosahedronGeometry(1, 3);\r\n            const positions = icoGeometry.attributes.position;\r\n\r\n            // We'll use the vertices of an icosahedron as starting points\r\n            // and create collectors at each point and its mirrored versions\r\n            for (let i = 0; i < positions.count; i++) {\r\n                const vertex = new THREE.Vector3();\r\n                vertex.fromBufferAttribute(positions, i);\r\n\r\n                const collectorGeometry = new THREE.OctahedronGeometry(collectorSize, 0);\r\n                const collectorMaterial = new THREE.MeshPhongMaterial({\r\n                    color: 0x3399ff,\r\n                    emissive: 0x004488,\r\n                    emissiveIntensity: 0.5,\r\n                    specular: 0xaaaaaa,\r\n                    shininess: 30,\r\n                    transparent: true,\r\n                    opacity: 0.9\r\n                });\r\n\r\n                const collector = new THREE.Mesh(collectorGeometry, collectorMaterial);\r\n\r\n                // Position collector on a sphere\r\n                const position = vertex.clone().normalize().multiplyScalar(radius);\r\n                collector.position.copy(position);\r\n\r\n                // Orient collector to face the star\r\n                collector.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n                // Add some randomness to orientation for visual interest\r\n                collector.rotation.x += (Math.random() - 0.5) * 0.2;\r\n                collector.rotation.y += (Math.random() - 0.5) * 0.2;\r\n                collector.rotation.z += (Math.random() - 0.5) * 0.2;\r\n\r\n                // Store original position and rotation for animation\r\n                collector.userData = {\r\n                    originalPosition: position.clone(),\r\n                    originalRotation: collector.rotation.clone(),\r\n                    orbitSpeed: 0.001 + Math.random() * 0.002,\r\n                    orbitAxis: new THREE.Vector3(\r\n                        Math.random() - 0.5,\r\n                        Math.random() - 0.5,\r\n                        Math.random() - 0.5\r\n                    ).normalize()\r\n                };\r\n\r\n                dysonSphere.push(collector);\r\n            }\r\n\r\n            // Add additional collectors for higher density\r\n            // The loop condition needs to account for the number of vertices from the icosahedron\r\n            for (let i = 0; i < totalCollectors - positions.count; i++) {\r\n                const collectorGeometry = new THREE.OctahedronGeometry(collectorSize, 0);\r\n                const collectorMaterial = new THREE.MeshPhongMaterial({\r\n                    color: 0x3399ff,\r\n                    emissive: 0x004488,\r\n                    emissiveIntensity: 0.5,\r\n                    specular: 0xaaaaaa,\r\n                    shininess: 30,\r\n                    transparent: true,\r\n                    opacity: 0.9\r\n                });\r\n\r\n                const collector = new THREE.Mesh(collectorGeometry, collectorMaterial);\r\n\r\n                // Random position on sphere\r\n                const theta = Math.random() * Math.PI * 2;\r\n                const phi = Math.acos(2 * Math.random() - 1);\r\n                const x = radius * Math.sin(phi) * Math.cos(theta);\r\n                const y = radius * Math.sin(phi) * Math.sin(theta);\r\n                const z = radius * Math.cos(phi);\r\n\r\n                collector.position.set(x, y, z);\r\n\r\n                // Orient collector to face the star\r\n                collector.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n                // Add some randomness to orientation for visual interest\r\n                collector.rotation.x += (Math.random() - 0.5) * 0.2;\r\n                collector.rotation.y += (Math.random() - 0.5) * 0.2;\r\n                collector.rotation.z += (Math.random() - 0.5) * 0.2;\r\n\r\n                // Store original position and rotation for animation\r\n                collector.userData = {\r\n                    originalPosition: collector.position.clone(),\r\n                    originalRotation: collector.rotation.clone(),\r\n                    orbitSpeed: 0.001 + Math.random() * 0.002,\r\n                    orbitAxis: new THREE.Vector3(\r\n                        Math.random() - 0.5,\r\n                        Math.random() - 0.5,\r\n                        Math.random() - 0.5\r\n                    ).normalize()\r\n                };\r\n\r\n                dysonSphere.push(collector);\r\n            }\r\n\r\n            updateCollectorsVisibility();\r\n        }\r\n\r\n        function updateCollectorsVisibility() {\r\n            visibleCollectors = Math.floor(constructionProgress / 100 * totalCollectors);\r\n\r\n            dysonSphere.forEach((collector, index) => {\r\n                if (index < visibleCollectors && showCollectors) {\r\n                    scene.add(collector);\r\n                } else {\r\n                    scene.remove(collector);\r\n                }\r\n            });\r\n\r\n            // Update UI\r\n            document.getElementById('progress-text').textContent = `${constructionProgress.toFixed(1)}%`;\r\n            document.getElementById('collectors-text').textContent = `${visibleCollectors} / ${totalCollectors}`;\r\n\r\n            const yearsRemaining = (100 - constructionProgress) / constructionRate;\r\n            document.getElementById('time-text').textContent = `${yearsRemaining.toFixed(1)} years`;\r\n        }\r\n\r\n        function animateCollectorMovement() {\r\n            if (!animateCollectors) return;\r\n\r\n            dysonSphere.forEach((collector, index) => {\r\n                if (index >= visibleCollectors) return;\r\n\r\n                // Orbital movement\r\n                const time = Date.now() * collector.userData.orbitSpeed;\r\n                const distance = 0.05;\r\n\r\n                // Calculate offset position\r\n                const offset = new THREE.Vector3();\r\n                const perpendicular = new THREE.Vector3().crossVectors(\r\n                    collector.userData.originalPosition,\r\n                    collector.userData.orbitAxis\r\n                ).normalize();\r\n\r\n                offset.copy(perpendicular).multiplyScalar(Math.sin(time) * distance);\r\n\r\n                // Apply offset to original position\r\n                collector.position.copy(collector.userData.originalPosition).add(offset);\r\n\r\n                // Slight rotation change\r\n                collector.rotation.x = collector.userData.originalRotation.x + Math.sin(time * 0.5) * 0.1;\r\n                collector.rotation.y = collector.userData.originalRotation.y + Math.cos(time * 0.3) * 0.1;\r\n            });\r\n        }\r\n\r\n        function setupEventListeners() {\r\n            // Play/Pause button\r\n            document.getElementById('play-pause-btn').addEventListener('click', () => {\r\n                isPlaying = !isPlaying;\r\n                document.getElementById('play-pause-btn').textContent = isPlaying ? '❚❚ Pause' : '▶ Play';\r\n            });\r\n\r\n            // Reset button\r\n            document.getElementById('reset-btn').addEventListener('click', () => {\r\n                constructionProgress = 0;\r\n                document.getElementById('progress-bar').value = 0;\r\n                updateCollectorsVisibility();\r\n                if (isPlaying) {\r\n                    isPlaying = false;\r\n                    document.getElementById('play-pause-btn').textContent = '▶ Play';\r\n                }\r\n            });\r\n\r\n            // Progress bar\r\n            document.getElementById('progress-bar').addEventListener('input', (e) => {\r\n                constructionProgress = parseFloat(e.target.value);\r\n                updateCollectorsVisibility();\r\n            });\r\n\r\n            // Brightness slider\r\n            document.getElementById('brightness-slider').addEventListener('input', (e) => {\r\n                starBrightness = parseFloat(e.target.value);\r\n                star.material.opacity = 0.8 * starBrightness;\r\n                corona.material.opacity = 0.3 * starBrightness;\r\n            });\r\n\r\n            // Rate slider\r\n            document.getElementById('rate-slider').addEventListener('input', (e) => {\r\n                constructionRate = parseFloat(e.target.value);\r\n            });\r\n\r\n            // Toggle collectors button\r\n            document.getElementById('toggle-collectors-btn').addEventListener('click', () => {\r\n                showCollectors = !showCollectors;\r\n                document.getElementById('toggle-collectors-btn').textContent = showCollectors ? 'Hide Collectors' : 'Show Collectors';\r\n                document.getElementById('toggle-collectors-btn').classList.toggle('active', showCollectors);\r\n                updateCollectorsVisibility();\r\n            });\r\n\r\n            // Toggle animation button\r\n            document.getElementById('toggle-animation-btn').addEventListener('click', () => {\r\n                animateCollectors = !animateCollectors;\r\n                document.getElementById('toggle-animation-btn').textContent = animateCollectors ? 'Disable Animation' : 'Enable Animation';\r\n                document.getElementById('toggle-animation-btn').classList.toggle('active', animateCollectors);\r\n            });\r\n\r\n            // Window resize\r\n            window.addEventListener('resize', () => {\r\n                camera.aspect = window.innerWidth / window.innerHeight;\r\n                camera.updateProjectionMatrix();\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n            });\r\n        }\r\n\r\n        function animate(timestamp = 0) {\r\n            requestAnimationFrame(animate);\r\n\r\n            // Calculate delta time for smooth animation\r\n            const deltaTime = (timestamp - lastTimestamp) / 1000;\r\n            lastTimestamp = timestamp;\r\n\r\n            // Update construction progress if playing\r\n            if (isPlaying && constructionProgress < 100) {\r\n                constructionProgress += constructionRate * deltaTime;\r\n                if (constructionProgress > 100) constructionProgress = 100;\r\n                document.getElementById('progress-bar').value = constructionProgress;\r\n                updateCollectorsVisibility();\r\n            }\r\n\r\n            // Animate corona\r\n            corona.rotation.y += 0.001;\r\n\r\n            // Animate collectors if enabled\r\n            animateCollectorMovement();\r\n\r\n            // Update controls\r\n            controls.update();\r\n\r\n            // Render scene\r\n            renderer.render(scene, camera);\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "dyson-sphere-deepseek-v3",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.816Z",
    "model": "deepseek-v3",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, astronomy, architecture."
  }
}
