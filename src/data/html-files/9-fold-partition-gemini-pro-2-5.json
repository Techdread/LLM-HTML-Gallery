{
  "title": "3D Bin Packing Visualization (Level 1 Example)",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>3D Bin Packing Visualization (Level 1 Example)</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            font-family: 'Inter', sans-serif;\r\n            background-color: #f0f0f0;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #info {\r\n            position: absolute;\r\n            top: 10px;\r\n            width: 100%;\r\n            text-align: center;\r\n            z-index: 100;\r\n            display: block;\r\n            color: #333;\r\n            font-size: 16px;\r\n        }\r\n\r\n        #controls {\r\n            position: absolute;\r\n            bottom: 10px;\r\n            left: 10px;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 10px;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        #controls label {\r\n            display: block;\r\n            margin-bottom: 5px;\r\n        }\r\n    </style>\r\n    <script src=\"https://cdn.tailwindcss.com\"></script>\r\n    <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap\" rel=\"stylesheet\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"info\">\r\n        3D Bin Packing Visualization - Level 1 Example (490 Boxes)<br>\r\n        Container: 61x44x50 | Box: 9x6x5 (Orientations vary)\r\n    </div>\r\n    <div id=\"controls\">\r\n        <label><input type=\"checkbox\" id=\"toggleContainer\" checked> Show Container Outline</label>\r\n        <label>Show Subcontainers:</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"A\" checked> A (3 boxes)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"B\" checked> B (1 box)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"C\" checked> C (24 boxes)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"D\" checked> D (18 boxes)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"E\" checked> E (35 boxes)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"F\" checked> F (9 boxes)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"G\" checked> G (220 boxes)</label>\r\n        <label><input type=\"checkbox\" class=\"subcontainer-toggle\" data-subcontainer=\"H\" checked> H (180 boxes)</label>\r\n    </div>\r\n\r\n    <script type=\"importmap\">\r\n        {\r\n            \"imports\": {\r\n                \"three\": \"https://cdn.jsdelivr.net/npm/three@0.163.0/build/three.module.js\",\r\n                \"three/addons/\": \"https://cdn.jsdelivr.net/npm/three@0.163.0/examples/jsm/\"\r\n            }\r\n        }\r\n    </script>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        let scene, camera, renderer, controls;\r\n        let containerMesh, containerOutline;\r\n        const subcontainerGroups = {}; // To hold groups of boxes for toggling\r\n\r\n        // --- Configuration ---\r\n        const containerDimensions = { w: 61, h: 44, d: 50 };\r\n        // Box dimensions (base, orientations will swap these)\r\n        const baseBoxDimensions = { w: 9, h: 6, d: 5 };\r\n\r\n        // Define colors for boxes in each subcontainer for clarity\r\n        const subcontainerColors = {\r\n            A: 0xff0000, // Red\r\n            B: 0xff8800, // Orange\r\n            C: 0xffff00, // Yellow\r\n            D: 0x00ff00, // Lime\r\n            E: 0x00ffff, // Cyan\r\n            F: 0x0000ff, // Blue\r\n            G: 0xff00ff, // Magenta\r\n            H: 0x8800ff  // Purple\r\n        };\r\n\r\n        // --- Initialization ---\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0xf0f0f0);\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            // Position camera to view the container\r\n            camera.position.set(containerDimensions.w * 0.7, containerDimensions.h * 0.8, containerDimensions.d * 1.5);\r\n            camera.lookAt(0, 0, 0); // Look towards the center of the scene origin\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // Lights\r\n            const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\r\n            scene.add(ambientLight);\r\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n            directionalLight.position.set(50, 100, 75);\r\n            scene.add(directionalLight);\r\n\r\n            // Controls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            // Center the controls target slightly above the base\r\n            controls.target.set(containerDimensions.w / 2, containerDimensions.h / 3, containerDimensions.d / 2);\r\n            controls.update();\r\n\r\n            // Create Container Visualization\r\n            createContainerBox();\r\n\r\n            // Visualize the specific packing from Figure 6\r\n            visualizeLevel1Packing();\r\n\r\n            // Add event listeners for controls\r\n            setupControls();\r\n\r\n            // Handle window resize\r\n            window.addEventListener('resize', onWindowResize, false);\r\n\r\n            // Start animation loop\r\n            animate();\r\n        }\r\n\r\n        // --- Geometry Creation ---\r\n\r\n        // Create the main container wireframe\r\n        function createContainerBox() {\r\n            const geometry = new THREE.BoxGeometry(containerDimensions.w, containerDimensions.h, containerDimensions.d);\r\n            // Transparent material (optional, mainly using outline)\r\n            const material = new THREE.MeshBasicMaterial({\r\n                color: 0xaaaaaa,\r\n                transparent: true,\r\n                opacity: 0.05,\r\n                depthWrite: false // Avoid obscuring boxes inside\r\n            });\r\n            containerMesh = new THREE.Mesh(geometry, material);\r\n            // Position the container so its corner is near the origin (0,0,0)\r\n            containerMesh.position.set(containerDimensions.w / 2, containerDimensions.h / 2, containerDimensions.d / 2);\r\n            scene.add(containerMesh);\r\n\r\n            // Create outline\r\n            const edges = new THREE.EdgesGeometry(geometry);\r\n            containerOutline = new THREE.LineSegments(edges, new THREE.LineBasicMaterial({ color: 0x333333, linewidth: 2 }));\r\n            containerOutline.position.copy(containerMesh.position); // Match position\r\n            scene.add(containerOutline);\r\n        }\r\n\r\n        // Create a single packed box mesh\r\n        // pos: object {x, y, z} - position of the box's corner (min x, y, z)\r\n        // dim: object {w, h, d} - dimensions of the box in its current orientation\r\n        // color: hex color value\r\n        function createPackedBoxMesh(pos, dim, color) {\r\n            const geometry = new THREE.BoxGeometry(dim.w, dim.h, dim.d);\r\n            const material = new THREE.MeshStandardMaterial({ color: color, roughness: 0.7, metalness: 0.1 });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n\r\n            // Position the mesh. THREE.BoxGeometry's origin is its center.\r\n            // We are given the corner position, so adjust by half dimensions.\r\n            mesh.position.set(\r\n                pos.x + dim.w / 2,\r\n                pos.y + dim.h / 2,\r\n                pos.z + dim.d / 2\r\n            );\r\n            return mesh;\r\n        }\r\n\r\n        // --- Packing Logic (Specific to Level 1 Example) ---\r\n\r\n        // Add multiple boxes arranged in a grid within a defined subcontainer space\r\n        // subcontainerId: 'A' through 'H'\r\n        // origin: {x, y, z} of the subcontainer space corner\r\n        // boxDim: {w, h, d} dimensions of the box in *this* orientation\r\n        // arrangement: {cols, rows, layers} number of boxes along w, h, d axes\r\n        function addBoxesInSubcontainer(subcontainerId, origin, boxDim, arrangement) {\r\n            const group = new THREE.Group();\r\n            group.name = subcontainerId; // For identification\r\n            const color = subcontainerColors[subcontainerId];\r\n\r\n            for (let l = 0; l < arrangement.layers; l++) { // Depth (z)\r\n                for (let r = 0; r < arrangement.rows; r++) {    // Height (y)\r\n                    for (let c = 0; c < arrangement.cols; c++) { // Width (x)\r\n                        const boxPos = {\r\n                            x: origin.x + c * boxDim.w,\r\n                            y: origin.y + r * boxDim.h,\r\n                            z: origin.z + l * boxDim.d\r\n                        };\r\n                        const boxMesh = createPackedBoxMesh(boxPos, boxDim, color);\r\n                        group.add(boxMesh);\r\n                    }\r\n                }\r\n            }\r\n            subcontainerGroups[subcontainerId] = group;\r\n            scene.add(group);\r\n        }\r\n\r\n        // Define and pack the 8 subcontainers from Figure 6\r\n        function visualizeLevel1Packing() {\r\n            console.log(\"Visualizing Level 1 Packing...\");\r\n\r\n            // --- Depth 0 Layer (z = 0 to 5) ---\r\n            // Subcontainer A: 1-stack of (1x3) arrangement of (6x9x5)-boxes: 3 boxes\r\n            addBoxesInSubcontainer('A', { x: 0, y: 17, z: 0 }, { w: 6, h: 9, d: 5 }, { cols: 1, rows: 3, layers: 1 });\r\n\r\n            // Subcontainer B: 1-stack of (1x1)-arrangement of (6x9x5)-boxes: 1 box\r\n            addBoxesInSubcontainer('B', { x: 0, y: 0, z: 0 }, { w: 6, h: 9, d: 5 }, { cols: 1, rows: 1, layers: 1 }); // Adjusted y based on figure\r\n\r\n            // Subcontainer C: 1-stack of (6x4)-arrangement of (9x6x5)-boxes: 24 boxes\r\n            addBoxesInSubcontainer('C', { x: 7, y: 20, z: 0 }, { w: 9, h: 6, d: 5 }, { cols: 6, rows: 4, layers: 1 });\r\n\r\n            // Subcontainer D: 1-stack of (6x3)-arrangement of (9x6x5)-boxes: 18 boxes\r\n            addBoxesInSubcontainer('D', { x: 7, y: 0, z: 0 }, { w: 9, h: 6, d: 5 }, { cols: 6, rows: 3, layers: 1 }); // Adjusted y based on figure\r\n\r\n            // --- Depth 5 Layer (z = 5 to 50) ---\r\n            // Subcontainer E: 5-stack of (1x7)-arrangement of (6x5x9)-boxes: 35 boxes\r\n            addBoxesInSubcontainer('E', { x: 0, y: 9, z: 5 }, { w: 6, h: 5, d: 9 }, { cols: 1, rows: 7, layers: 5 }); // Adjusted y based on figure\r\n\r\n            // Subcontainer F: 9-stack of (1x1)-arrangement of (6x9x5)-boxes: 9 boxes\r\n            addBoxesInSubcontainer('F', { x: 0, y: 0, z: 5 }, { w: 6, h: 9, d: 5 }, { cols: 1, rows: 1, layers: 9 }); // Note orientation change\r\n\r\n            // Subcontainer G: 5-stack of (11x4)-arrangement of (5x6x9)-boxes: 220 boxes\r\n            addBoxesInSubcontainer('G', { x: 6, y: 20, z: 5 }, { w: 5, h: 6, d: 9 }, { cols: 11, rows: 4, layers: 5 });\r\n\r\n            // Subcontainer H: 5-stack of (9x4)-arrangement of (6x5x9)-boxes: 180 boxes\r\n            addBoxesInSubcontainer('H', { x: 7, y: 0, z: 5 }, { w: 6, h: 5, d: 9 }, { cols: 9, rows: 4, layers: 5 }); // Adjusted y based on figure\r\n\r\n            console.log(\"Total boxes visualized:\", 3 + 1 + 24 + 18 + 35 + 9 + 220 + 180); // Should be 490\r\n        }\r\n\r\n\r\n        // --- UI Controls ---\r\n        function setupControls() {\r\n            // Toggle Container Outline\r\n            document.getElementById('toggleContainer').addEventListener('change', (event) => {\r\n                containerOutline.visible = event.target.checked;\r\n                containerMesh.visible = event.target.checked; // Also toggle the faint mesh\r\n            });\r\n\r\n            // Toggle Subcontainer Visibility\r\n            document.querySelectorAll('.subcontainer-toggle').forEach(checkbox => {\r\n                checkbox.addEventListener('change', (event) => {\r\n                    const subcontainerId = event.target.dataset.subcontainer;\r\n                    if (subcontainerGroups[subcontainerId]) {\r\n                        subcontainerGroups[subcontainerId].visible = event.target.checked;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        // --- Animation Loop ---\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            controls.update(); // Only required if controls.enableDamping or controls.autoRotate are set to true\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // --- Event Handlers ---\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        // --- Start ---\r\n        init();\r\n\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "9-fold-partition-gemini-pro-2-5",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.871Z",
    "model": "gemini-pro-2.5",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, architecture."
  }
}
