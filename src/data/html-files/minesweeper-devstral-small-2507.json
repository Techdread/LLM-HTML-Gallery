{
  "title": "Minesweeper Game",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Minesweeper Game</title>\r\n    <style>\r\n        body {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            height: 100vh;\r\n            margin: 0;\r\n            background-color: #2c3e50;\r\n            color: white;\r\n            font-family: 'Arial', sans-serif;\r\n            text-align: center;\r\n        }\r\n\r\n        .container {\r\n            width: 90%;\r\n            max-width: 700px;\r\n            background-color: #34495e;\r\n            padding: 20px;\r\n            border-radius: 10px;\r\n            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);\r\n        }\r\n\r\n        h1 {\r\n            color: #ecf0f1;\r\n            margin-bottom: 20px;\r\n            text-transform: uppercase;\r\n            letter-spacing: 2px;\r\n        }\r\n\r\n        .difficulty-buttons {\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .difficulty-button {\r\n            padding: 8px 16px;\r\n            margin: 0 5px;\r\n            background-color: #3498db;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .difficulty-button:hover {\r\n            background-color: #2980b9;\r\n        }\r\n\r\n        .difficulty-button.active {\r\n            background-color: #e74c3c;\r\n        }\r\n\r\n        .game-board {\r\n            display: grid;\r\n            gap: 5px;\r\n            margin-bottom: 20px;\r\n        }\r\n\r\n        .cell {\r\n            width: 40px;\r\n            height: 40px;\r\n            background-color: #7f8c8d;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            font-weight: bold;\r\n            cursor: pointer;\r\n            border-radius: 5px;\r\n            user-select: none;\r\n        }\r\n\r\n        .cell:hover {\r\n            background-color: #95a5a6;\r\n        }\r\n\r\n        .cell.revealed {\r\n            background-color: #ecf0f1;\r\n            color: #2c3e50;\r\n            cursor: default;\r\n        }\r\n\r\n        .cell.mine {\r\n            background-color: #e74c3c;\r\n            color: white;\r\n        }\r\n\r\n        .cell.mine-revealed {\r\n            background-color: #e74c3c;\r\n            color: white;\r\n            font-size: 20px;\r\n        }\r\n\r\n        .cell.flagged {\r\n            background-color: #f1c40f;\r\n            cursor: default;\r\n        }\r\n\r\n        .cell.flagged:hover {\r\n            background-color: #f39c12;\r\n        }\r\n\r\n        .message {\r\n            margin-top: 20px;\r\n            font-size: 18px;\r\n        }\r\n\r\n        .reset-button {\r\n            padding: 10px 20px;\r\n            background-color: #e74c3c;\r\n            color: white;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-weight: bold;\r\n            margin-top: 10px;\r\n        }\r\n\r\n        .reset-button:hover {\r\n            background-color: #c0392b;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"container\">\r\n        <h1>Minesweeper</h1>\r\n\r\n        <div class=\"difficulty-buttons\">\r\n            <button class=\"difficulty-button active\" data-difficulty=\"easy\"\r\n                onclick=\"setDifficulty('easy')\">Easy</button>\r\n            <button class=\"difficulty-button\" data-difficulty=\"medium\" onclick=\"setDifficulty('medium')\">Medium</button>\r\n            <button class=\"difficulty-button\" data-difficulty=\"hard\" onclick=\"setDifficulty('hard')\">Hard</button>\r\n        </div>\r\n\r\n        <div id=\"game-board\" class=\"game-board\"></div>\r\n        <button class=\"reset-button\" onclick=\"resetGame()\">Reset Game</button>\r\n        <div id=\"message\" class=\"message\"></div>\r\n\r\n        <script>\r\n            const difficulties = {\r\n                easy: { rows: 9, cols: 9, numMines: 10 },\r\n                medium: { rows: 16, cols: 16, numMines: 40 },\r\n                hard: { rows: 30, cols: 16, numMines: 99 }\r\n            };\r\n\r\n            let currentDifficulty = 'easy';\r\n            let board = [];\r\n            let revealedCells = 0;\r\n            let gameOver = false;\r\n\r\n            function setDifficulty(difficulty) {\r\n                // Remove active class from all buttons\r\n                document.querySelectorAll('.difficulty-button').forEach(btn => {\r\n                    btn.classList.remove('active');\r\n                });\r\n\r\n                // Add active class to selected button\r\n                const selectedButton = document.querySelector(`.difficulty-button[data-difficulty=\"${difficulty}\"]`);\r\n                if (selectedButton) {\r\n                    selectedButton.classList.add('active');\r\n                }\r\n\r\n                currentDifficulty = difficulty;\r\n                resetGame();\r\n            }\r\n\r\n            function createBoard() {\r\n                // Create the board with cells\r\n                const gameBoard = document.getElementById('game-board');\r\n                gameBoard.innerHTML = '';\r\n                const { rows, cols } = difficulties[currentDifficulty];\r\n\r\n                // Set grid template based on difficulty\r\n                gameBoard.style.gridTemplateColumns = `repeat(${cols}, 40px)`;\r\n\r\n                for (let r = 0; r < rows; r++) {\r\n                    board[r] = [];\r\n                    for (let c = 0; c < cols; c++) {\r\n                        const cell = document.createElement('div');\r\n                        cell.className = 'cell';\r\n                        cell.dataset.row = r;\r\n                        cell.dataset.col = c;\r\n                        cell.addEventListener('click', handleCellClick);\r\n                        cell.addEventListener('contextmenu', handleRightClick);\r\n\r\n                        board[r][c] = {\r\n                            element: cell,\r\n                            hasMine: false,\r\n                            revealed: false,\r\n                            flagged: false,\r\n                            adjacentMines: 0\r\n                        };\r\n\r\n                        gameBoard.appendChild(cell);\r\n                    }\r\n                }\r\n\r\n                // Place mines randomly\r\n                let minesPlaced = 0;\r\n                const { numMines } = difficulties[currentDifficulty];\r\n                while (minesPlaced < numMines) {\r\n                    const r = Math.floor(Math.random() * rows);\r\n                    const c = Math.floor(Math.random() * cols);\r\n\r\n                    if (!board[r][c].hasMine) {\r\n                        board[r][c].hasMine = true;\r\n                        minesPlaced++;\r\n\r\n                        // Update adjacent cells' mine count\r\n                        for (let dr = -1; dr <= 1; dr++) {\r\n                            for (let dc = -1; dc <= 1; dc++) {\r\n                                const nr = r + dr;\r\n                                const nc = c + dc;\r\n\r\n                                if (nr >= 0 && nr < rows && nc >= 0 && nc < cols) {\r\n                                    board[nr][nc].adjacentMines++;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function handleCellClick(event) {\r\n                if (gameOver) return;\r\n\r\n                const cell = event.target;\r\n                const row = parseInt(cell.dataset.row);\r\n                const col = parseInt(cell.dataset.col);\r\n\r\n                if (board[row][col].flagged || board[row][col].revealed) return;\r\n\r\n                revealCell(row, col);\r\n\r\n                if (board[row][col].hasMine) {\r\n                    gameOver = true;\r\n                    showMessage('Game Over! You hit a mine.');\r\n                    revealAllMines();\r\n                } else if (checkWinCondition()) {\r\n                    gameOver = true;\r\n                    showMessage('Congratulations! You won!');\r\n                }\r\n            }\r\n\r\n            function handleRightClick(event) {\r\n                event.preventDefault();\r\n\r\n                const cell = event.target;\r\n                const row = parseInt(cell.dataset.row);\r\n                const col = parseInt(cell.dataset.col);\r\n\r\n                if (board[row][col].revealed) return;\r\n\r\n                board[row][col].flagged = !board[row][col].flagged;\r\n                updateCellDisplay(row, col);\r\n            }\r\n\r\n            function revealCell(row, col) {\r\n                if (board[row][col].revealed || board[row][col].flagged) return;\r\n\r\n                board[row][col].revealed = true;\r\n                revealedCells++;\r\n                updateCellDisplay(row, col);\r\n\r\n                if (board[row][col].adjacentMines === 0) {\r\n                    // Auto-reveal adjacent cells\r\n                    for (let dr = -1; dr <= 1; dr++) {\r\n                        for (let dc = -1; dc <= 1; dc++) {\r\n                            const nr = row + dr;\r\n                            const nc = col + dc;\r\n\r\n                            if (nr >= 0 && nr < board.length && nc >= 0 && nc < board[0].length) {\r\n                                revealCell(nr, nc);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function updateCellDisplay(row, col) {\r\n                const cell = board[row][col].element;\r\n                const content = board[row][col];\r\n\r\n                if (content.flagged) {\r\n                    cell.classList.add('flagged');\r\n                    cell.textContent = '⚑';\r\n                } else if (content.revealed) {\r\n                    cell.classList.add('revealed');\r\n\r\n                    if (content.hasMine) {\r\n                        cell.classList.add('mine-revealed');\r\n                        cell.textContent = '💣';\r\n                    } else {\r\n                        cell.textContent = content.adjacentMines > 0 ? content.adjacentMines : '';\r\n                    }\r\n                } else {\r\n                    cell.classList.remove('flagged', 'revealed', 'mine-revealed');\r\n                    cell.textContent = '';\r\n                }\r\n            }\r\n\r\n            function revealAllMines() {\r\n                for (let r = 0; r < board.length; r++) {\r\n                    for (let c = 0; c < board[0].length; c++) {\r\n                        if (board[r][c].hasMine && !board[r][c].revealed) {\r\n                            board[r][c].revealed = true;\r\n                            updateCellDisplay(r, c);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function checkWinCondition() {\r\n                const { rows, cols, numMines } = difficulties[currentDifficulty];\r\n                return revealedCells === (rows * cols - numMines);\r\n            }\r\n\r\n            function showMessage(text) {\r\n                const messageElement = document.getElementById('message');\r\n                messageElement.textContent = text;\r\n            }\r\n\r\n            function resetGame() {\r\n                gameOver = false;\r\n                revealedCells = 0;\r\n                createBoard();\r\n                showMessage('');\r\n            }\r\n\r\n            // Initialize the game\r\n            window.onload = function () {\r\n                setDifficulty(currentDifficulty);\r\n            };\r\n        </script>\r\n    </div>\r\n</body>\r\n\r\n</html>",
  "id": "minesweeper-devstral-small-2507",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": "Game",
    "timestamp": "2025-08-04T21:59:57.860Z",
    "model": "devstral-small-2507",
    "description": "An interactive web application featuring game."
  }
}
