{
  "title": "Rubik's Cube Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Rubik's Cube Simulation</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n\r\n        #controlPanel {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background: rgba(255, 255, 255, 0.8);\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"controlPanel\">\r\n        Cube Size: <input type=\"number\" id=\"cubeSize\" value=\"3\" min=\"1\" max=\"20\">\r\n        <button onclick=\"init(parseInt(document.getElementById('cubeSize').value))\">Set Size</button>\r\n        <br><br>\r\n        <button onclick=\"scrambleCube()\">Scramble</button>\r\n        <button onclick=\"solveCube()\">Solve</button>\r\n    </div>\r\n\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js\"></script>\r\n    <script>\r\n        let scene, camera, renderer, controls, cube, originalState;\r\n\r\n        function createMaterial(color) {\r\n            return new THREE.MeshPhongMaterial({ color: color, shininess: 100 });\r\n        }\r\n\r\n        function createCube(size) {\r\n            const geometry = new THREE.BoxGeometry(1, 1, 1);\r\n            const materials = [\r\n                createMaterial(0xffffff), // top face: white\r\n                createMaterial(0xffff00), // bottom face: yellow\r\n                createMaterial(0xff0000), // front face: red\r\n                createMaterial(0xffa500), // right face: orange\r\n                createMaterial(0x0000ff), // left face: blue\r\n                createMaterial(0x00ff00)  // back face: green\r\n            ];\r\n\r\n            let cubeGroup = new THREE.Group();\r\n\r\n            const colors = ['white', 'yellow', 'red', 'orange', 'blue', 'green'];\r\n\r\n            for (let x = 0; x < size; x++) {\r\n                for (let y = 0; y < size; y++) {\r\n                    for (let z = 0; z < size; z++) {\r\n                        const materialIndex = (x === size - 1 ? 0 :\r\n                            (y === 0 ? 1 :\r\n                                (z === size - 1 ? 2 :\r\n                                    (x === 0 ? 4 :\r\n                                        (z === 0 ? 5 : 3)))))\r\n                        const material = materials[materialIndex];\r\n                        const cubeElement = new THREE.Mesh(geometry, material);\r\n                        cubeElement.position.set(x - (size / 2), y - (size / 2), z - (size / 2));\r\n                        cubeElement.userData = { x, y, z, originalColor: materialIndex };\r\n                        cubeGroup.add(cubeElement);\r\n                    }\r\n                }\r\n            }\r\n            return cubeGroup;\r\n        }\r\n\r\n        function init(size) {\r\n            const container = document.body;\r\n            if (!scene) {\r\n                scene = new THREE.Scene();\r\n                camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n                camera.position.z = 10;\r\n\r\n                renderer = new THREE.WebGLRenderer();\r\n                renderer.setSize(window.innerWidth, window.innerHeight);\r\n                container.appendChild(renderer.domElement);\r\n\r\n                controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n                const ambientLight = new THREE.AmbientLight(0x404040, 1);\r\n                scene.add(ambientLight);\r\n                const pointLight = new THREE.PointLight(0xffffff, 1);\r\n                pointLight.position.set(10, 10, 10);\r\n                scene.add(pointLight);\r\n            }\r\n\r\n            if (cube) {\r\n                scene.remove(cube);\r\n            }\r\n            const newCube = createCube(size);\r\n            scene.add(newCube);\r\n            cube = newCube;\r\n\r\n            originalState = {\r\n                cubes: newCube.children.map(c => ({ ...c.userData }))\r\n            };\r\n\r\n            window.addEventListener('resize', onWindowResize);\r\n            animate();\r\n        }\r\n\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function scrambleCube() {\r\n            const moves = ['U', 'D', 'L', 'R', 'F', 'B'];\r\n\r\n            function executeMove(move) {\r\n                const axis = move === 'U' || move === 'D' ? 'y' :\r\n                    move === 'L' || move === 'R' ? 'x' :\r\n                        move === 'F' || move === 'B' ? 'z' : null;\r\n\r\n                const layer = move === 'U' || move === 'F' || move === 'L' ? Math.max(...cube.children.map(c => c.userData[axis])) :\r\n                    move === 'D' || move === 'B' || move === 'R' ? Math.min(...cube.children.map(c => c.userData[axis])) : 0;\r\n\r\n                const direction = move === 'U' || move === 'F' || move === 'L' ? -1 : 1;\r\n                cube.children.filter(c => c.userData[axis] === layer).forEach(cubeElement => {\r\n                    let [u, v, w] = [cubeElement.userData.x, cubeElement.userData.y, cubeElement.userData.z];\r\n                    const originalPosition = {\r\n                        x: cubeElement.position.x,\r\n                        y: cubeElement.position.y,\r\n                        z: cubeElement.position.z\r\n                    };\r\n\r\n                    if (axis === 'x') {\r\n                        let temp = v;\r\n                        v = w * direction;\r\n                        w = temp * direction;\r\n                        cubeElement.userData.y = v;\r\n                        cubeElement.userData.z = w;\r\n                    } else if (axis === 'y') {\r\n                        let temp = u;\r\n                        u = w * direction;\r\n                        w = temp * direction;\r\n                        cubeElement.userData.x = u;\r\n                        cubeElement.userData.z = w;\r\n                    } else if (axis === 'z') {\r\n                        let temp = u;\r\n                        u = v * direction;\r\n                        v = temp * direction;\r\n                        cubeElement.userData.x = u;\r\n                        cubeElement.userData.y = v;\r\n                    }\r\n\r\n                    cubeElement.position.copy(originalPosition);\r\n                });\r\n            }\r\n\r\n            [1, 2, 3, 4, 5].forEach(step => {\r\n                const randomMove = moves[Math.floor(Math.random() * 6)];\r\n                executeMove(randomMove);\r\n            });\r\n        }\r\n\r\n        function solveCube() {\r\n            const originalStates = originalState.cubes;\r\n            cube.children.forEach((cubeElement, index) => {\r\n                const { x, y, z, originalColor } = originalStates[index];\r\n\r\n                const originalPosition = {\r\n                    x: x - cube.children.length / 2,\r\n                    y: y - cube.children.length / 2,\r\n                    z: z - cube.children.length / 2\r\n                };\r\n\r\n                cubeElement.position.lerp(\r\n                    originalPosition,\r\n                    0.04\r\n                );\r\n            });\r\n\r\n            setTimeout(solveCube, 20);\r\n        }\r\n\r\n        window.onload = function () {\r\n            init(parseInt(document.getElementById('cubeSize').value));\r\n        };\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "rubix-cube-devstral-small",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Simulation"
    ],
    "timestamp": "2025-08-04T21:59:57.845Z",
    "model": "devstral-small",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, simulation."
  }
}
