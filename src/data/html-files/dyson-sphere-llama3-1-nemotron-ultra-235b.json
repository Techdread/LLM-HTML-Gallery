{
  "title": "Dyson Sphere Simulator",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Dyson Sphere Simulator</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            font-family: Arial, sans-serif;\r\n            background-color: #000;\r\n        }\r\n\r\n        #controls {\r\n            position: absolute;\r\n            top: 10px;\r\n            left: 10px;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n        }\r\n\r\n        #progress-bar {\r\n            width: 200px;\r\n        }\r\n\r\n        #stats {\r\n            position: absolute;\r\n            bottom: 10px;\r\n            left: 10px;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div id=\"controls\">\r\n        <button id=\"toggleConstruction\">Toggle Construction</button>\r\n        <input type=\"range\" id=\"progress-bar\" min=\"0\" max=\"100\" value=\"0\">\r\n        <button id=\"toggleCollectors\">Toggle Collectors</button>\r\n        <input type=\"range\" id=\"brightness-slider\" min=\"0\" max=\"1\" step=\"0.1\" value=\"1\">\r\n        <label for=\"brightness-slider\">Star Brightness</label>\r\n    </div>\r\n    <div id=\"stats\"></div>\r\n\r\n    <script type=\"importmap\">\r\n        {\r\n            \"imports\": {\r\n                \"three\": \"https://unpkg.com/three@0.165.0/build/three.module.js\",\r\n                \"three/addons/\": \"https://unpkg.com/three@0.165.0/examples/jsm/\"\r\n            }\r\n        }\r\n    </script>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n        import { GUI } from 'three/addons/libs/dat.gui.module.min.js';\r\n\r\n        let scene, camera, renderer, controls;\r\n        let star, dysonSphere, collectors = [], collector, Geometry, collectorMaterial;\r\n        let constructionProgress = 0; // Percentage\r\n        let isConstructing = false;\r\n        let starBrightness = 1;\r\n        let statsVisible = true;\r\n\r\n        init();\r\n        animate();\r\n\r\n        function init() {\r\n            // Scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x000000);\r\n\r\n            // Camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.z = 5;\r\n\r\n            // Renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            document.body.appendChild(renderer.domElement);\r\n\r\n            // OrbitControls\r\n            controls = new OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.25;\r\n\r\n            // Star\r\n            const starGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n            const starMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, opacity: starBrightness, transparent: true });\r\n            star = new THREE.Mesh(starGeometry, starMaterial);\r\n            scene.add(star);\r\n\r\n            // Sunspots (simple representation)\r\n            for (let i = 0; i < 10; i++) {\r\n                const sunspot = new THREE.Mesh(\r\n                    new THREE.SphereGeometry(0.05, 8, 8),\r\n                    new THREE.MeshBasicMaterial({ color: 0x000000, opacity: 0.5, transparent: true })\r\n                );\r\n                sunspot.position.set(\r\n                    Math.random() * 2 - 1,\r\n                    Math.random() * 2 - 1,\r\n                    Math.random() * 2 - 1\r\n                ).normalize().multiplyScalar(0.9);\r\n                star.add(sunspot);\r\n            }\r\n\r\n            // Corona (simple representation)\r\n            const coronaGeometry = new THREE.SphereGeometry(1.1, 32, 32);\r\n            const coronaMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, opacity: 0.1, transparent: true, wireframe: true });\r\n            const corona = new THREE.Mesh(coronaGeometry, coronaMaterial);\r\n            star.add(corona);\r\n\r\n            // Dyson Sphere (initialization)\r\n            const radius = 3;\r\n            collectorGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1); // Simple cubes for collectors\r\n            collectorMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, opacity: 0.5, transparent: true });\r\n            dysonSphere = new THREE.Group();\r\n            scene.add(dysonSphere);\r\n\r\n            // Initialize some collectors\r\n            for (let i = 0; i < 100; i++) {\r\n                const collector = new THREE.Mesh(collectorGeometry, collectorMaterial);\r\n                collector.position.set(\r\n                    Math.random() * 2 - 1,\r\n                    Math.random() * 2 - 1,\r\n                    Math.random() * 2 - 1\r\n                ).normalize().multiplyScalar(radius);\r\n                collectors.push(collector);\r\n                dysonSphere.add(collector);\r\n            }\r\n\r\n            // Controls\r\n            document.getElementById('toggleConstruction').addEventListener('click', toggleConstruction);\r\n            document.getElementById('progress-bar').addEventListener('input', updateProgress);\r\n            document.getElementById('toggleCollectors').addEventListener('click', toggleCollectorVisibility);\r\n            document.getElementById('brightness-slider').addEventListener('input', updateStarBrightness);\r\n\r\n            // GUI for stats\r\n            const gui = new GUI({ autoPlace: false });\r\n            gui.domElement.style.position = 'absolute';\r\n            gui.domElement.style.top = '60px';\r\n            gui.domElement.style.left = '10px';\r\n            document.body.appendChild(gui.domElement);\r\n            const statsFolder = gui.addFolder('Statistics');\r\n            statsFolder.add({ completion: 0 }, 'completion').listen();\r\n            statsFolder.add({ collectorsBuilt: 0 }, 'collectorsBuilt').listen();\r\n            statsFolder.open();\r\n\r\n            // Initial update\r\n            updateProgress({ target: { value: constructionProgress } }); // Simulate initial progress\r\n            updateStarBrightness({ target: { value: starBrightness } }); // Initial brightness\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            // Update star's corona (simple pulsing effect)\r\n            star.children[10].material.opacity = Math.sin(Date.now() * 0.001) * 0.5 + 0.5; // Adjust the index if sunspots are more than 10\r\n\r\n            // Update construction progress if active\r\n            if (isConstructing) {\r\n                constructionProgress = Math.min(constructionProgress + 0.1, 100);\r\n                document.getElementById('progress-bar').value = constructionProgress;\r\n                updateProgress({ target: { value: constructionProgress } });\r\n            }\r\n\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        function toggleConstruction() {\r\n            isConstructing = !isConstructing;\r\n            document.getElementById('toggleConstruction').textContent = isConstructing ? 'Stop Construction' : 'Start Construction';\r\n        }\r\n\r\n        function updateProgress(event) {\r\n            constructionProgress = parseFloat(event.target.value);\r\n            const collectorsToShow = Math.floor(collectors.length * (constructionProgress / 100));\r\n            collectors.forEach((collector, index) => {\r\n                collector.visible = index < collectorsToShow;\r\n            });\r\n            // Update stats\r\n            const stats = {\r\n                completion: constructionProgress,\r\n                collectorsBuilt: collectorsToShow\r\n            };\r\n            document.getElementById('stats').innerHTML = `\r\n                <p>Completion: ${constructionProgress}%</p>\r\n                <p>Collectors Built: ${collectorsToShow}</p>\r\n            `;\r\n        }\r\n\r\n        function toggleCollectorVisibility() {\r\n            collectors.forEach(collector => collector.visible = !collector.visible);\r\n        }\r\n\r\n        function updateStarBrightness(event) {\r\n            starBrightness = parseFloat(event.target.value);\r\n            star.material.opacity = starBrightness;\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "dyson-sphere-llama3-1-nemotron-ultra-235b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:58.071Z",
    "model": "llama3.1-nemotron-ultra-235b",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, astronomy, architecture."
  }
}
