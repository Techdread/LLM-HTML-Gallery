{
  "title": "ASCII Sphere",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>ASCII Sphere</title>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\"></script>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            background-color: #000;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            min-height: 100vh;\r\n            overflow: hidden;\r\n            font-family: monospace;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <script>\r\n        let points = [];\r\n        const totalPoints = 800;\r\n        const radius = 150;\r\n        const rotationSpeed = 0.003;\r\n\r\n        function setup() {\r\n            createCanvas(windowWidth, windowHeight, WEBGL);\r\n            colorMode(RGB);\r\n\r\n            // Generate points on a sphere\r\n            for (let i = 0; i < totalPoints; i++) {\r\n                // Use spherical coordinates to distribute points evenly\r\n                const phi = acos(1 - 2 * (i / (totalPoints - 1)));\r\n                const theta = sqrt(totalPoints * PI) * phi;\r\n\r\n                // Convert to Cartesian coordinates\r\n                const x = radius * sin(phi) * cos(theta);\r\n                const y = radius * sin(phi) * sin(theta);\r\n                const z = radius * cos(phi);\r\n\r\n                // Random ASCII number (0-9)\r\n                const char = floor(random(10)).toString();\r\n\r\n                points.push({ x, y, z, char });\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n            background(0);\r\n\r\n            // Set camera position\r\n            perspective(PI / 3, width / height, 0.1, 1000);\r\n\r\n            // Rotate around Y and X axes\r\n            rotateY(frameCount * rotationSpeed);\r\n            rotateX(frameCount * rotationSpeed * 0.5);\r\n\r\n            // Sort points by Z for proper depth rendering\r\n            points.sort((a, b) => {\r\n                return a.z - b.z;\r\n            });\r\n\r\n            // Draw each point\r\n            for (const point of points) {\r\n                const x = point.x;\r\n                const y = point.y;\r\n                const z = point.z;\r\n\r\n                // Calculate brightness based on Z coordinate\r\n                // Map Z from [-radius, radius] to [100, 255]\r\n                const brightness = map(z, -radius, radius, 100, 255);\r\n\r\n                fill(brightness);\r\n                noStroke();\r\n\r\n                // Draw character at point position\r\n                push();\r\n                translate(x, y, z);\r\n                textSize(16);\r\n                textAlign(CENTER, CENTER);\r\n                text(point.char, 0, 0);\r\n                pop();\r\n            }\r\n        }\r\n\r\n        function windowResized() {\r\n            resizeCanvas(windowWidth, windowHeight);\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "ascii-qwen-coder-30b-a3b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "WebGL",
      "Shaders",
      "Astronomy"
    ],
    "timestamp": "2025-08-04T21:59:58.095Z",
    "model": "qwen-coder-30b-a3b",
    "description": "An interactive web application featuring webgl, shaders, astronomy."
  }
}
