{
  "title": "Color Matcher",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Color Matcher</title>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            overflow: hidden;\r\n            background-color: #111;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            height: 100vh;\r\n        }\r\n\r\n        canvas {\r\n            border: none;\r\n        }\r\n\r\n        #hud {\r\n            position: fixed;\r\n            top: 10px;\r\n            left: 10px;\r\n            background-color: rgba(255, 255, 255, 0.8);\r\n            padding: 10px;\r\n            border-radius: 5px;\r\n            font-family: sans-serif;\r\n            font-size: 16px;\r\n            color: #fff;\r\n        }\r\n\r\n        #game-over {\r\n            position: fixed;\r\n            top: 50%;\r\n            left: 50%;\r\n            transform: translate(-50%, -50%);\r\n            background-color: rgba(0, 0, 0, 0.7);\r\n            color: white;\r\n            padding: 20px;\r\n            border-radius: 5px;\r\n            text-align: center;\r\n            font-size: 20px;\r\n            z-index: 10;\r\n        }\r\n\r\n        #restart-button {\r\n            background-color: #4CAF50;\r\n            color: white;\r\n            padding: 10px 20px;\r\n            border: none;\r\n            border-radius: 5px;\r\n            cursor: pointer;\r\n            font-size: 16px;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <canvas id=\"gameCanvas\"></canvas>\r\n    <div id=\"hud\">\r\n        Score: <span id=\"score\">0</span>\r\n        Lives: <span id=\"lives\">3</span>\r\n    </div>\r\n    <div id=\"game-over\">\r\n        <p>Game Over!</p>\r\n        <button id=\"restart-button\">Restart</button>\r\n    </div>\r\n\r\n    <script type=\"module\">\r\n        import * as THREE from 'three';\r\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\n\r\n        const canvas = document.getElementById('gameCanvas');\r\n        const scoreElement = document.getElementById('score');\r\n        const livesElement = document.getElementById('lives');\r\n        const restartButton = document.getElementById('restart-button');\r\n\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, canvas.width / canvas.height, 0.1, 1000);\r\n        const renderer = new THREE.WebGLRenderer({ canvas: canvas });\r\n        renderer.setSize(canvas.width, canvas.height);\r\n        document.body.appendChild(renderer.domElement);\r\n\r\n        // --- Color Palette ---\r\n        const colors = [\r\n            new THREE.Color(0xff0000), // Red\r\n            new THREE.Color(0x0000ff), // Blue\r\n            new THREE.Color(0x00ff00), // Green\r\n            new THREE.Color(0xffff00)  // Yellow\r\n        ];\r\n\r\n        // --- Player Object ---\r\n        const player = new THREE.Mesh(new THREE.TorusKnotGeometry(1, 0.5, 16, 16), new THREE.MeshStandardMaterial({ color: 0x000000 }));\r\n        player.position.set(0, 0, 0);\r\n        scene.add(player);\r\n\r\n        // --- Target Object ---\r\n        const targetSize = 0.5;\r\n        const targetSpeed = 2;\r\n        let targets = [];\r\n        let targetCount = 0;\r\n        let gameRunning = true;\r\n        let score = 0;\r\n        let lives = 3;\r\n\r\n        // --- Function to generate a target ---\r\n        function createTarget() {\r\n            const target = new THREE.Mesh(new THREE.SphereGeometry(targetSize), new THREE.MeshStandardMaterial({ color: colors[Math.floor(Math.random() * colors.length)] }));\r\n            target.position.set(-15, 0, 0); // Spawn off-screen\r\n            scene.add(target);\r\n            targets.push(target);\r\n            targetCount++;\r\n        }\r\n\r\n        // --- Animation Loop ---\r\n        function animate() {\r\n            if (!gameRunning) return;\r\n\r\n            // Update target positions\r\n            for (const target of targets) {\r\n                target.position.x += targetSpeed;\r\n                if (target.position.x > 15) {\r\n                    target.position.x = -15;\r\n                    target.position.y = 0;\r\n                    target.position.z = 0;\r\n                    targets.splice(targets.indexOf(target), 1); // Remove from array\r\n                    targetCount--;\r\n                }\r\n            }\r\n\r\n            // Check for matches\r\n            for (let i = 0; i < targets.length; i++) {\r\n                const target = targets[i];\r\n                const playerColor = player.material.color.r * 255 / 255;\r\n                const targetColor = target.material.color.r * 255 / 255;\r\n\r\n                if (target.position.x === 0 && playerColor === targetColor) {\r\n                    score++;\r\n                    targets[i].material.color.set(0xff0000); // Red for match\r\n                    scene.remove(target);\r\n                } else if (target.position.x === 0 && playerColor !== targetColor) {\r\n                    lives--;\r\n                    targets[i].material.color.set(0x000000); // Reset color\r\n                    scene.remove(target);\r\n                }\r\n            }\r\n\r\n            // Update HUD\r\n            scoreElement.textContent = score;\r\n            livesElement.textContent = lives;\r\n\r\n            // Check if game is over\r\n            if (lives <= 0) {\r\n                gameRunning = false;\r\n                showGameOver();\r\n            }\r\n\r\n            // Request the next frame\r\n            requestAnimationFrame(animate);\r\n        }\r\n\r\n        // --- Show Game Over Screen ---\r\n        function showGameOver() {\r\n            document.getElementById('game-over').style.display = 'block';\r\n            document.getElementById('restart-button').style.display = 'block';\r\n            gameRunning = false;\r\n        }\r\n\r\n        // --- Restart Game ---\r\n        function restartGame() {\r\n            document.getElementById('game-over').style.display = 'none';\r\n            document.getElementById('restart-button').style.display = 'none';\r\n            score = 0;\r\n            lives = 3;\r\n            targets = [];\r\n            targetCount = 0;\r\n            gameRunning = true;\r\n            createTarget();\r\n            animate();\r\n        }\r\n\r\n        // --- Initialize the game ---\r\n        animate();\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "colour-game-gemma-3n-e2b-it",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Canvas",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Game"
    ],
    "timestamp": "2025-08-04T21:59:57.998Z",
    "model": "gemma-3n-e2b-it",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, canvas, animation, webgl, shaders, astronomy, game."
  }
}
