{
  "title": "ASCII Sphere Rotation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>ASCII Sphere Rotation</title>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.js\"></script>\r\n    <style>\r\n        body {\r\n            margin: 0;\r\n            padding: 0;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            height: 100vh;\r\n            background-color: #000;\r\n            overflow: hidden;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <script>\r\n        let spherePoints = [];\r\n        const numPoints = 2000; // Number of ASCII characters to use\r\n        const charSet = \"0123456789\"; // ASCII digits\r\n        const radius = 150;\r\n        let angleX = 0;\r\n        let angleY = 0;\r\n        let angleZ = 0;\r\n\r\n        function setup() {\r\n            createCanvas(800, 600, WEBGL);\r\n            colorMode(HSB, 360, 100, 100, 1);\r\n\r\n            // Generate points on a sphere\r\n            for (let i = 0; i < numPoints; i++) {\r\n                // Use spherical coordinates\r\n                const theta = random(TWO_PI);\r\n                const phi = acos(2 * random() - 1); // Uniform distribution over sphere\r\n\r\n                const x = radius * sin(phi) * cos(theta);\r\n                const y = radius * sin(phi) * sin(theta);\r\n                const z = radius * cos(phi);\r\n\r\n                // Choose a random character from the set\r\n                const char = charSet[floor(random(charSet.length))];\r\n\r\n                spherePoints.push({\r\n                    x, y, z,\r\n                    char,\r\n                    distance: 0 // Will be calculated later\r\n                });\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n            background(0);\r\n\r\n            // Update rotation angles\r\n            angleX += 0.005;\r\n            angleY += 0.01;\r\n            angleZ += 0.003;\r\n\r\n            // Set up the 3D transformation\r\n            push();\r\n            rotateX(angleX);\r\n            rotateY(angleY);\r\n            rotateZ(angleZ);\r\n\r\n            // Draw each point\r\n            for (let point of spherePoints) {\r\n                // Calculate distance from camera (which is at origin in this case)\r\n                // We'll use the z-coordinate to determine brightness\r\n                const distFromCamera = point.z;\r\n\r\n                // Normalize distance to 0-1 range (negative z values are farther)\r\n                // We want closer to white, farther to grey\r\n                const normalizedDist = map(distFromCamera, -radius, radius, 0, 1);\r\n\r\n                // Brightness based on distance: closer = brighter\r\n                const brightness = map(normalizedDist, 0, 1, 100, 20); // 100 = white, 20 = grey\r\n                const grayValue = brightness;\r\n\r\n                // Set text style\r\n                noStroke();\r\n                fill(0, 0, grayValue); // HSB: H=0 (black), S=0 (no color), B=grayValue\r\n                textSize(12);\r\n\r\n                // Calculate the actual position after rotation\r\n                const px = point.x;\r\n                const py = point.y;\r\n                const pz = point.z;\r\n\r\n                // Position the text in 3D space\r\n                translate(px, py, pz);\r\n\r\n                // Draw the character\r\n                text(point.char, 0, 0);\r\n\r\n                // Reset translation\r\n                pop();\r\n                push();\r\n            }\r\n\r\n            pop();\r\n        }\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "ascii-qwen3-30b-a3b-instruct",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "WebGL",
      "Shaders",
      "Astronomy"
    ],
    "timestamp": "2025-08-04T21:59:58.131Z",
    "model": "qwen3-30b-a3b-instruct",
    "description": "An interactive web application featuring webgl, shaders, astronomy."
  }
}
