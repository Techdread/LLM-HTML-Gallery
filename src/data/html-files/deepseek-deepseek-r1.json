{
  "title": "Dyson Sphere Simulation",
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dyson Sphere Simulation</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);\n            color: #fff;\n            overflow: hidden;\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n        \n        header {\n            padding: 1rem 2rem;\n            background: rgba(0, 0, 0, 0.5);\n            backdrop-filter: blur(10px);\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n            z-index: 10;\n        }\n        \n        h1 {\n            font-size: 2rem;\n            background: linear-gradient(90deg, #00dbde, #fc00ff);\n            -webkit-background-clip: text;\n            background-clip: text;\n            -webkit-text-fill-color: transparent;\n            text-align: center;\n            margin-bottom: 0.5rem;\n        }\n        \n        .subtitle {\n            text-align: center;\n            color: #a0a0e0;\n            font-size: 1rem;\n            margin-bottom: 1rem;\n        }\n        \n        .container {\n            display: flex;\n            flex: 1;\n            position: relative;\n        }\n        \n        #scene-container {\n            flex: 1;\n            position: relative;\n        }\n        \n        canvas {\n            display: block;\n            position: absolute;\n            top: 0;\n            left: 0;\n        }\n        \n        .controls-panel {\n            width: 300px;\n            background: rgba(10, 10, 30, 0.8);\n            backdrop-filter: blur(10px);\n            border-left: 1px solid rgba(255, 255, 255, 0.1);\n            padding: 1.5rem;\n            overflow-y: auto;\n            z-index: 5;\n        }\n        \n        .panel-title {\n            font-size: 1.2rem;\n            margin-bottom: 1.5rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n            color: #6cf;\n        }\n        \n        .control-group {\n            margin-bottom: 1.5rem;\n        }\n        \n        .control-label {\n            display: block;\n            margin-bottom: 0.5rem;\n            color: #a0a0e0;\n        }\n        \n        .slider-container {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .slider-container input[type=\"range\"] {\n            flex: 1;\n            height: 6px;\n            background: rgba(100, 100, 150, 0.3);\n            border-radius: 3px;\n            outline: none;\n            -webkit-appearance: none;\n        }\n        \n        .slider-container input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            width: 18px;\n            height: 18px;\n            background: #6cf;\n            border-radius: 50%;\n            cursor: pointer;\n        }\n        \n        .slider-value {\n            width: 50px;\n            text-align: center;\n            background: rgba(100, 100, 200, 0.2);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n        }\n        \n        .button-group {\n            display: flex;\n            gap: 10px;\n            margin-top: 0.5rem;\n        }\n        \n        button {\n            flex: 1;\n            padding: 0.6rem;\n            background: linear-gradient(90deg, #00dbde, #fc00ff);\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-weight: bold;\n            transition: all 0.3s ease;\n        }\n        \n        button:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n        }\n        \n        button:active {\n            transform: translateY(0);\n        }\n        \n        .toggle-container {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            margin-top: 0.5rem;\n        }\n        \n        .toggle-switch {\n            position: relative;\n            display: inline-block;\n            width: 50px;\n            height: 24px;\n        }\n        \n        .toggle-switch input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n        }\n        \n        .slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: #444;\n            transition: .4s;\n            border-radius: 24px;\n        }\n        \n        .slider:before {\n            position: absolute;\n            content: \"\";\n            height: 16px;\n            width: 16px;\n            left: 4px;\n            bottom: 4px;\n            background-color: white;\n            transition: .4s;\n            border-radius: 50%;\n        }\n        \n        input:checked + .slider {\n            background: linear-gradient(90deg, #00dbde, #fc00ff);\n        }\n        \n        input:checked + .slider:before {\n            transform: translateX(26px);\n        }\n        \n        .stats-container {\n            background: rgba(0, 0, 0, 0.3);\n            border-radius: 8px;\n            padding: 1rem;\n            margin-top: 1rem;\n        }\n        \n        .stat-item {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 0.5rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n        }\n        \n        .stat-label {\n            color: #a0a0e0;\n        }\n        \n        .stat-value {\n            font-weight: bold;\n            color: #6cf;\n        }\n        \n        .progress-bar {\n            height: 8px;\n            background: rgba(100, 100, 150, 0.3);\n            border-radius: 4px;\n            margin-top: 1rem;\n            overflow: hidden;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: linear-gradient(90deg, #00dbde, #fc00ff);\n            border-radius: 4px;\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n        \n        .info-panel {\n            position: absolute;\n            bottom: 20px;\n            left: 20px;\n            background: rgba(0, 0, 0, 0.6);\n            backdrop-filter: blur(10px);\n            padding: 1rem;\n            border-radius: 8px;\n            max-width: 400px;\n            z-index: 5;\n        }\n        \n        .info-panel h3 {\n            margin-bottom: 0.5rem;\n            color: #6cf;\n        }\n        \n        .info-panel p {\n            font-size: 0.9rem;\n            line-height: 1.5;\n            color: #ccc;\n        }\n        \n        .construction-rate {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            margin-top: 1rem;\n        }\n        \n        .construction-rate input {\n            flex: 1;\n            padding: 0.4rem;\n            background: rgba(100, 100, 200, 0.2);\n            border: 1px solid rgba(255, 255, 255, 0.1);\n            border-radius: 4px;\n            color: white;\n        }\n        \n        @media (max-width: 768px) {\n            .container {\n                flex-direction: column;\n            }\n            \n            .controls-panel {\n                width: 100%;\n                height: 300px;\n                border-left: none;\n                border-top: 1px solid rgba(255, 255, 255, 0.1);\n            }\n            \n            .info-panel {\n                max-width: 90%;\n                font-size: 0.8rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>DYSON SPHERE CONSTRUCTION SIMULATOR</h1>\n        <div class=\"subtitle\">Visualizing the megastructure construction process through time</div>\n    </header>\n    \n    <div class=\"container\">\n        <div id=\"scene-container\"></div>\n        \n        <div class=\"controls-panel\">\n            <h2 class=\"panel-title\">CONSTRUCTION CONTROLS</h2>\n            \n            <div class=\"control-group\">\n                <label class=\"control-label\">Construction Progress: <span id=\"progress-value\">0%</span></label>\n                <div class=\"slider-container\">\n                    <input type=\"range\" id=\"progress-slider\" min=\"0\" max=\"100\" value=\"0\">\n                    <span class=\"slider-value\">0%</span>\n                </div>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" id=\"progress-fill\"></div>\n                </div>\n            </div>\n            \n            <div class=\"button-group\">\n                <button id=\"start-btn\">START</button>\n                <button id=\"pause-btn\">PAUSE</button>\n                <button id=\"reset-btn\">RESET</button>\n            </div>\n            \n            <div class=\"control-group\">\n                <label class=\"control-label\">Star Brightness</label>\n                <div class=\"slider-container\">\n                    <input type=\"range\" id=\"brightness-slider\" min=\"50\" max=\"200\" value=\"100\">\n                    <span class=\"slider-value\" id=\"brightness-value\">100%</span>\n                </div>\n            </div>\n            \n            <div class=\"control-group\">\n                <div class=\"toggle-container\">\n                    <label class=\"control-label\">Show Collectors</label>\n                    <label class=\"toggle-switch\">\n                        <input type=\"checkbox\" id=\"toggle-collectors\" checked>\n                        <span class=\"slider\"></span>\n                    </label>\n                </div>\n            </div>\n            \n            <div class=\"control-group\">\n                <div class=\"toggle-container\">\n                    <label class=\"control-label\">Collector Animation</label>\n                    <label class=\"toggle-switch\">\n                        <input type=\"checkbox\" id=\"toggle-animation\" checked>\n                        <span class=\"slider\"></span>\n                    </label>\n                </div>\n            </div>\n            \n            <div class=\"control-group\">\n                <div class=\"construction-rate\">\n                    <label class=\"control-label\">Construction Rate:</label>\n                    <input type=\"number\" id=\"construction-rate\" min=\"0.1\" max=\"10\" step=\"0.1\" value=\"1.0\">\n                    <span>%/sec</span>\n                </div>\n            </div>\n            \n            <div class=\"stats-container\">\n                <h3>CONSTRUCTION STATISTICS</h3>\n                <div class=\"stat-item\">\n                    <span class=\"stat-label\">Collectors Built:</span>\n                    <span class=\"stat-value\" id=\"collectors-count\">0</span>\n                </div>\n                <div class=\"stat-item\">\n                    <span class=\"stat-label\">Energy Harvested:</span>\n                    <span class=\"stat-value\" id=\"energy-value\">0 PW</span>\n                </div>\n                <div class=\"stat-item\">\n                    <span class=\"stat-label\">Time Elapsed:</span>\n                    <span class=\"stat-value\" id=\"time-elapsed\">0 years</span>\n                </div>\n                <div class=\"stat-item\">\n                    <span class=\"stat-label\">Time Remaining:</span>\n                    <span class=\"stat-value\" id=\"time-remaining\">100 years</span>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"info-panel\">\n        <h3>ABOUT THE DYSON SPHERE</h3>\n        <p>A Dyson Sphere is a hypothetical megastructure that completely encompasses a star and captures a large percentage of its power output. This simulation visualizes the progressive construction of such a structure over time.</p>\n        <p>Use the controls to adjust the construction progress, star brightness, and toggle collector visibility. Drag to rotate the view, and scroll to zoom in and out.</p>\n    </div>\n    \n    <script>\n        // Main variables\n        let scene, camera, renderer, controls;\n        let star, corona, dysonSphere;\n        let collectors = [];\n        let isAnimating = false;\n        let constructionProgress = 0;\n        let constructionRate = 1.0; // % per second\n        let animationSpeed = 0.002;\n        let startTime = Date.now();\n        let elapsedTime = 0;\n        let collectorCount = 0;\n        \n        // DOM Elements\n        const progressSlider = document.getElementById('progress-slider');\n        const progressValue = document.getElementById('progress-value');\n        const brightnessSlider = document.getElementById('brightness-slider');\n        const brightnessValue = document.getElementById('brightness-value');\n        const startBtn = document.getElementById('start-btn');\n        const pauseBtn = document.getElementById('pause-btn');\n        const resetBtn = document.getElementById('reset-btn');\n        const toggleCollectors = document.getElementById('toggle-collectors');\n        const toggleAnimation = document.getElementById('toggle-animation');\n        const constructionRateInput = document.getElementById('construction-rate');\n        const progressFill = document.getElementById('progress-fill');\n        const collectorsCount = document.getElementById('collectors-count');\n        const energyValue = document.getElementById('energy-value');\n        const timeElapsed = document.getElementById('time-elapsed');\n        const timeRemaining = document.getElementById('time-remaining');\n        \n        // Initialize the scene\n        function init() {\n            // Create scene\n            scene = new THREE.Scene();\n            scene.background = new THREE.Color(0x000022);\n            \n            // Create camera\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n            camera.position.z = 30;\n            \n            // Create renderer\n            renderer = new THREE.WebGLRenderer({ antialias: true });\n            renderer.setSize(window.innerWidth, window.innerHeight);\n            renderer.setPixelRatio(window.devicePixelRatio);\n            document.getElementById('scene-container').appendChild(renderer.domElement);\n            \n            // Create orbit controls\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\n            controls.enableDamping = true;\n            controls.dampingFactor = 0.05;\n            controls.screenSpacePanning = false;\n            controls.minDistance = 15;\n            controls.maxDistance = 100;\n            \n            // Create star\n            createStar();\n            \n            // Create corona\n            createCorona();\n            \n            // Create Dyson sphere collectors\n            createDysonSphere();\n            \n            // Add ambient light\n            const ambientLight = new THREE.AmbientLight(0x333333);\n            scene.add(ambientLight);\n            \n            // Add directional light\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n            directionalLight.position.set(5, 5, 5);\n            scene.add(directionalLight);\n            \n            // Add stars in background\n            createStars();\n            \n            // Event listeners\n            window.addEventListener('resize', onWindowResize);\n            progressSlider.addEventListener('input', updateProgress);\n            brightnessSlider.addEventListener('input', updateBrightness);\n            startBtn.addEventListener('click', startConstruction);\n            pauseBtn.addEventListener('click', pauseConstruction);\n            resetBtn.addEventListener('click', resetConstruction);\n            toggleCollectors.addEventListener('change', toggleCollectorsVisibility);\n            toggleAnimation.addEventListener('change', toggleCollectorsAnimation);\n            constructionRateInput.addEventListener('change', updateConstructionRate);\n            \n            // Start animation loop\n            animate();\n        }\n        \n        // Create the central star\n        function createStar() {\n            const geometry = new THREE.SphereGeometry(5, 64, 64);\n            \n            // Create sunspots texture\n            const sunspotTexture = new THREE.CanvasTexture(createSunspotTexture());\n            \n            const material = new THREE.MeshBasicMaterial({\n                color: 0xffffaa,\n                emissive: 0xffff00,\n                emissiveIntensity: 1.0,\n                map: sunspotTexture\n            });\n            \n            star = new THREE.Mesh(geometry, material);\n            scene.add(star);\n        }\n        \n        // Create sunspot texture\n        function createSunspotTexture() {\n            const canvas = document.createElement('canvas');\n            canvas.width = 512;\n            canvas.height = 512;\n            const ctx = canvas.getContext('2d');\n            \n            // Create gradient\n            const gradient = ctx.createRadialGradient(256, 256, 0, 256, 256, 256);\n            gradient.addColorStop(0, '#ffaa00');\n            gradient.addColorStop(1, '#ff6600');\n            \n            // Draw gradient\n            ctx.fillStyle = gradient;\n            ctx.fillRect(0, 0, 512, 512);\n            \n            // Add sunspots\n            ctx.fillStyle = 'rgba(100, 50, 0, 0.3)';\n            for (let i = 0; i < 20; i++) {\n                const x = 100 + Math.random() * 312;\n                const y = 100 + Math.random() * 312;\n                const radius = 10 + Math.random() * 30;\n                \n                ctx.beginPath();\n                ctx.arc(x, y, radius, 0, Math.PI * 2);\n                ctx.fill();\n            }\n            \n            return canvas;\n        }\n        \n        // Create the star corona\n        function createCorona() {\n            const coronaGeometry = new THREE.BufferGeometry();\n            const particleCount = 2000;\n            const positions = new Float32Array(particleCount * 3);\n            \n            for (let i = 0; i < particleCount * 3; i += 3) {\n                const radius = 5 + Math.random() * 3;\n                const theta = Math.random() * Math.PI * 2;\n                const phi = Math.acos(2 * Math.random() - 1);\n                \n                positions[i] = radius * Math.sin(phi) * Math.cos(theta);\n                positions[i + 1] = radius * Math.sin(phi) * Math.sin(theta);\n                positions[i + 2] = radius * Math.cos(phi);\n            }\n            \n            coronaGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n            \n            const coronaMaterial = new THREE.PointsMaterial({\n                color: 0xffaa00,\n                size: 0.05,\n                transparent: true,\n                opacity: 0.8\n            });\n            \n            corona = new THREE.Points(coronaGeometry, coronaMaterial);\n            scene.add(corona);\n        }\n        \n        // Create the Dyson sphere collectors\n        function createDysonSphere() {\n            dysonSphere = new THREE.Group();\n            scene.add(dysonSphere);\n            \n            // Create collectors (hexagons)\n            const collectorGeometry = new THREE.CircleGeometry(0.3, 6);\n            const collectorMaterial = new THREE.MeshBasicMaterial({\n                color: 0x00aaff,\n                transparent: true,\n                opacity: 0.8\n            });\n            \n            const collectorCount = 2000;\n            \n            for (let i = 0; i < collectorCount; i++) {\n                // Position collectors on a sphere\n                const radius = 15;\n                const theta = Math.random() * Math.PI * 2;\n                const phi = Math.acos(2 * Math.random() - 1);\n                \n                const x = radius * Math.sin(phi) * Math.cos(theta);\n                const y = radius * Math.sin(phi) * Math.sin(theta);\n                const z = radius * Math.cos(phi);\n                \n                const collector = new THREE.Mesh(collectorGeometry, collectorMaterial.clone());\n                collector.position.set(x, y, z);\n                \n                // Make collector face outward\n                collector.lookAt(0, 0, 0);\n                \n                // Random rotation for variety\n                collector.rotation.z = Math.random() * Math.PI * 2;\n                \n                // Set initial visibility\n                collector.visible = false;\n                \n                dysonSphere.add(collector);\n                collectors.push(collector);\n            }\n        }\n        \n        // Create background stars\n        function createStars() {\n            const starsGeometry = new THREE.BufferGeometry();\n            const starsMaterial = new THREE.PointsMaterial({\n                color: 0xffffff,\n                size: 0.1,\n                sizeAttenuation: true\n            });\n            \n            const starsVertices = [];\n            for (let i = 0; i < 10000; i++) {\n                const x = (Math.random() - 0.5) * 2000;\n                const y = (Math.random() - 0.5) * 2000;\n                const z = (Math.random() - 0.5) * 2000;\n                starsVertices.push(x, y, z);\n            }\n            \n            starsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starsVertices, 3));\n            const stars = new THREE.Points(starsGeometry, starsMaterial);\n            scene.add(stars);\n        }\n        \n        // Update construction progress\n        function updateProgress() {\n            constructionProgress = parseInt(progressSlider.value);\n            progressValue.textContent = constructionProgress + '%';\n            document.querySelector('.slider-value').textContent = constructionProgress + '%';\n            progressFill.style.width = constructionProgress + '%';\n            \n            // Update collectors visibility based on progress\n            const visibleCount = Math.floor(collectors.length * (constructionProgress / 100));\n            \n            collectors.forEach((collector, index) => {\n                collector.visible = index < visibleCount;\n            });\n            \n            collectorCount = visibleCount;\n            updateStats();\n        }\n        \n        // Update star brightness\n        function updateBrightness() {\n            const brightness = parseInt(brightnessSlider.value);\n            brightnessValue.textContent = brightness + '%';\n            star.material.emissiveIntensity = brightness / 100;\n        }\n        \n        // Start construction animation\n        function startConstruction() {\n            isAnimating = true;\n            startTime = Date.now() - elapsedTime * 1000;\n        }\n        \n        // Pause construction animation\n        function pauseConstruction() {\n            isAnimating = false;\n        }\n        \n        // Reset construction\n        function resetConstruction() {\n            isAnimating = false;\n            constructionProgress = 0;\n            progressSlider.value = 0;\n            elapsedTime = 0;\n            updateProgress();\n            updateStats();\n        }\n        \n        // Toggle collectors visibility\n        function toggleCollectorsVisibility() {\n            dysonSphere.visible = toggleCollectors.checked;\n        }\n        \n        // Toggle collectors animation\n        function toggleCollectorsAnimation() {\n            animationSpeed = toggleAnimation.checked ? 0.002 : 0;\n        }\n        \n        // Update construction rate\n        function updateConstructionRate() {\n            constructionRate = parseFloat(constructionRateInput.value) || 1.0;\n        }\n        \n        // Update statistics display\n        function updateStats() {\n            collectorsCount.textContent = collectorCount.toLocaleString();\n            energyValue.textContent = (constructionProgress * 3.86e26 / 1e15).toFixed(2) + \" PW\";\n            \n            const yearsElapsed = (elapsedTime / (60 * 60 * 24 * 365.25)).toFixed(1);\n            timeElapsed.textContent = yearsElapsed + \" years\";\n            \n            if (constructionProgress < 100) {\n                const remainingTime = (100 - constructionProgress) / constructionRate;\n                const yearsRemaining = (remainingTime / (60 * 60 * 24 * 365.25)).toFixed(1);\n                timeRemaining.textContent = yearsRemaining + \" years\";\n            } else {\n                timeRemaining.textContent = \"Complete\";\n            }\n        }\n        \n        // Handle window resize\n        function onWindowResize() {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(window.innerWidth, window.innerHeight);\n        }\n        \n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n            \n            // Update time\n            if (isAnimating) {\n                elapsedTime = (Date.now() - startTime) / 1000;\n                constructionProgress = Math.min(100, elapsedTime * constructionRate);\n                progressSlider.value = constructionProgress;\n                updateProgress();\n            }\n            \n            // Rotate star\n            star.rotation.y += 0.001;\n            \n            // Rotate corona particles\n            corona.rotation.y += 0.0005;\n            \n            // Animate collectors\n            dysonSphere.rotation.y += animationSpeed;\n            \n            // Update controls\n            controls.update();\n            \n            // Render scene\n            renderer.render(scene, camera);\n        }\n        \n        // Initialize the application\n        init();\n    </script>\n</body>\n</html>",
  "id": "deepseek-deepseek-r1",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.767Z",
    "model": "deepseek-r1",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, astronomy, simulation, architecture."
  }
}
