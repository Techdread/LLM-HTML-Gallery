{
  "title": "Futuristic Cityscape Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <title>Futuristic Cityscape Simulation</title>\r\n    <style>\r\n      /* Reset and style for full-screen canvas */\r\n      body {\r\n        margin: 0;\r\n        overflow: hidden;\r\n        background-color: #000;\r\n      }\r\n      canvas {\r\n        display: block;\r\n      }\r\n      /* Optional UI element for camera control hint */\r\n      .controls {\r\n        position: absolute;\r\n        top: 10px;\r\n        left: 10px;\r\n        color: #fff;\r\n        font-family: Arial, sans-serif;\r\n        background: rgba(0, 0, 0, 0.4);\r\n        padding: 5px 10px;\r\n        border-radius: 4px;\r\n        z-index: 10;\r\n      }\r\n    </style>\r\n  </head>\r\n  <body>\r\n    <div class=\"controls\">\r\n      Use mouse/touch to move the camera.\r\n    </div>\r\n\r\n    <!-- Include Three.js and OrbitControls via ES6 module imports -->\r\n    <script type=\"module\">\r\n      // Import modules from the CDN (ensure you have an Internet connection)\r\n      import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.152.0/build/three.module.js';\r\n      import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.152.0/examples/jsm/controls/OrbitControls.js';\r\n\r\n      // ----------------------------\r\n      // Scene, Camera, and Renderer\r\n      // ----------------------------\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x111111);\r\n\r\n      const camera = new THREE.PerspectiveCamera(\r\n        75,\r\n        window.innerWidth / window.innerHeight,\r\n        0.1,\r\n        1000\r\n      );\r\n      camera.position.set(0, 50, 100);\r\n\r\n      const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      renderer.shadowMap.enabled = true;\r\n      document.body.appendChild(renderer.domElement);\r\n\r\n      // ----------------------------\r\n      // OrbitControls for camera movement\r\n      // ----------------------------\r\n      const controls = new OrbitControls(camera, renderer.domElement);\r\n      controls.enableDamping = true;\r\n      controls.dampingFactor = 0.1;\r\n\r\n      // ----------------------------\r\n      // Lighting Setup\r\n      // ----------------------------\r\n      // Ambient light for soft global illumination.\r\n      const ambientLight = new THREE.AmbientLight(0x404040, 1.5);\r\n      scene.add(ambientLight);\r\n\r\n      // Directional light to mimic sunlight and cast shadows.\r\n      const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);\r\n      directionalLight.position.set(50, 100, 50);\r\n      directionalLight.castShadow = true;\r\n      directionalLight.shadow.mapSize.width = 2048;\r\n      directionalLight.shadow.mapSize.height = 2048;\r\n      scene.add(directionalLight);\r\n\r\n      // ----------------------------\r\n      // Ground Plane\r\n      // ----------------------------\r\n      const groundGeometry = new THREE.PlaneGeometry(500, 500);\r\n      const groundMaterial = new THREE.MeshLambertMaterial({ color: 0x222222 });\r\n      const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n      ground.rotation.x = -Math.PI / 2;\r\n      ground.receiveShadow = true;\r\n      scene.add(ground);\r\n\r\n      // ----------------------------\r\n      // Create Cityscape Buildings\r\n      // ----------------------------\r\n      const buildingGroup = new THREE.Group();\r\n      // Generate a grid of buildings with random dimensions and positions.\r\n      for (let i = -20; i < 20; i++) {\r\n        for (let j = -20; j < 20; j++) {\r\n          // Randomize dimensions for variety.\r\n          const width = THREE.MathUtils.randFloat(2, 8);\r\n          const depth = THREE.MathUtils.randFloat(2, 8);\r\n          const height = THREE.MathUtils.randFloat(10, 80);\r\n\r\n          const buildingGeometry = new THREE.BoxGeometry(width, height, depth);\r\n          // Use HSL colors for a futuristic, subtle variation.\r\n          const buildingMaterial = new THREE.MeshLambertMaterial({\r\n            color: new THREE.Color(`hsl(${Math.random() * 360}, 20%, 50%)`)\r\n          });\r\n\r\n          const building = new THREE.Mesh(buildingGeometry, buildingMaterial);\r\n          building.castShadow = true;\r\n          building.receiveShadow = true;\r\n          // Position buildings on a grid with small random offset\r\n          building.position.x = i * 12 + THREE.MathUtils.randFloatSpread(4);\r\n          building.position.y = height / 2;\r\n          building.position.z = j * 12 + THREE.MathUtils.randFloatSpread(4);\r\n          buildingGroup.add(building);\r\n        }\r\n      }\r\n      scene.add(buildingGroup);\r\n\r\n      // ----------------------------\r\n      // Create Flying Vehicles\r\n      // ----------------------------\r\n      const vehicles = [];\r\n      const numVehicles = 10; // Number of flying vehicles\r\n      \r\n      for (let v = 0; v < numVehicles; v++) {\r\n        // Stylized vehicle: a cone shape representing a futuristic flying craft.\r\n        const vehicleGeometry = new THREE.ConeGeometry(1.5, 4, 8);\r\n        const vehicleMaterial = new THREE.MeshStandardMaterial({\r\n          color: Math.random() * 0xffffff\r\n        });\r\n        const vehicle = new THREE.Mesh(vehicleGeometry, vehicleMaterial);\r\n        // Rotate so the cone points forward (adjust orientation as needed)\r\n        vehicle.rotation.x = Math.PI / 2;\r\n        vehicle.castShadow = true;\r\n        scene.add(vehicle);\r\n\r\n        // Define a circular path with some variance:\r\n        const radius = THREE.MathUtils.randFloat(30, 80);\r\n        const speed = THREE.MathUtils.randFloat(0.001, 0.005);\r\n        vehicles.push({\r\n          mesh: vehicle,\r\n          radius,\r\n          speed,\r\n          offset: Math.random() * Math.PI * 2\r\n        });\r\n      }\r\n\r\n      // ----------------------------\r\n      // Animation Loop\r\n      // ----------------------------\r\n      function animate(time) {\r\n        time *= 0.001; // Convert time to seconds\r\n\r\n        // Update flying vehicles along their circular path with smooth vertical oscillation.\r\n        vehicles.forEach((vehicle) => {\r\n          const angle = time * vehicle.speed * 100 + vehicle.offset;\r\n          vehicle.mesh.position.x = Math.cos(angle) * vehicle.radius;\r\n          vehicle.mesh.position.z = Math.sin(angle) * vehicle.radius;\r\n          // Vertical oscillation: base altitude plus sine variation.\r\n          vehicle.mesh.position.y = 20 + Math.sin(angle * 3) * 5;\r\n          // Rotate the vehicle for added effect.\r\n          vehicle.mesh.rotation.z = angle;\r\n        });\r\n\r\n        controls.update();\r\n        renderer.render(scene, camera);\r\n        requestAnimationFrame(animate);\r\n      }\r\n      requestAnimationFrame(animate);\r\n\r\n      // ----------------------------\r\n      // Handle Window Resize\r\n      // ----------------------------\r\n      window.addEventListener('resize', () => {\r\n        camera.aspect = window.innerWidth / window.innerHeight;\r\n        camera.updateProjectionMatrix();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n      });\r\n    </script>\r\n  </body>\r\n</html>",
  "id": "future-cityscape-gpt-o3-high",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "WebGL",
      "Shaders",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:58.042Z",
    "model": "gpt-o3-high",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, webgl, shaders, simulation, architecture."
  }
}
