{
  "title": "Gravity Well Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Gravity Well Simulation</title>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n        }\r\n\r\n        body {\r\n            overflow: hidden;\r\n            background: linear-gradient(135deg, #0a1826, #1a2a6c, #2c3e50);\r\n            color: white;\r\n            height: 100vh;\r\n        }\r\n\r\n        #canvas-container {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            background: #0a1826;\r\n        }\r\n\r\n        #controls {\r\n            position: absolute;\r\n            top: 20px;\r\n            left: 20px;\r\n            background: rgba(10, 24, 38, 0.8);\r\n            padding: 15px;\r\n            border-radius: 10px;\r\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\r\n            z-index: 10;\r\n            max-width: 300px;\r\n            backdrop-filter: blur(10px);\r\n        }\r\n\r\n        #controls h2 {\r\n            text-align: center;\r\n            margin-bottom: 15px;\r\n            color: #ffcc00;\r\n            font-size: 1.4em;\r\n            border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n            padding-bottom: 5px;\r\n        }\r\n\r\n        .control-group {\r\n            margin-bottom: 20px;\r\n            background: rgba(15, 35, 60, 0.5);\r\n            padding: 15px;\r\n            border-radius: 8px;\r\n        }\r\n\r\n        .control-group h3 {\r\n            margin-bottom: 10px;\r\n            color: #7cff7c;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        .slider-container {\r\n            margin-bottom: 8px;\r\n        }\r\n\r\n        .slider-container label {\r\n            display: block;\r\n            margin-bottom: 4px;\r\n            font-size: 0.9em;\r\n            color: #c9f0ff;\r\n        }\r\n\r\n        .slider-value {\r\n            display: inline-block;\r\n            width: 30px;\r\n            text-align: right;\r\n            color: #7cff7c;\r\n            font-weight: bold;\r\n            font-size: 0.9em;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n            width: 100%;\r\n            -webkit-appearance: none;\r\n            background: #1a2a6c;\r\n            height: 6px;\r\n            border-radius: 3px;\r\n            outline: none;\r\n            transition: background 0.3s;\r\n        }\r\n\r\n        input[type=\"range\"]::-webkit-slider-thumb {\r\n            -webkit-appearance: none;\r\n            width: 15px;\r\n            height: 15px;\r\n            border-radius: 50%;\r\n            background: #ffcc00;\r\n            cursor: pointer;\r\n            box-shadow: 0 0 5px rgba(255, 204, 0, 0.8);\r\n            transition: all 0.2s;\r\n        }\r\n\r\n        input[type=\"range\"]::-webkit-slider-thumb:hover {\r\n            transform: scale(1.2);\r\n            background: #ffd633;\r\n        }\r\n\r\n        .button-group {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            gap: 10px;\r\n        }\r\n\r\n        button {\r\n            flex: 1;\r\n            padding: 10px;\r\n            background: linear-gradient(to bottom, #ff9900, #cc6600);\r\n            border: 1px solid #995500;\r\n            border-radius: 5px;\r\n            color: white;\r\n            font-weight: bold;\r\n            cursor: pointer;\r\n            transition: all 0.2s;\r\n            text-align: center;\r\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        button:hover {\r\n            background: linear-gradient(to bottom, #ffaa33, #dd7700);\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.3);\r\n        }\r\n\r\n        button:active {\r\n            transform: translateY(1px);\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\r\n        }\r\n\r\n        button.secondary {\r\n            background: linear-gradient(to bottom, #777, #333);\r\n            color: #ddd;\r\n        }\r\n\r\n        button.secondary:hover {\r\n            background: linear-gradient(to bottom, #999, #444);\r\n        }\r\n\r\n        #instructions {\r\n            position: absolute;\r\n            bottom: 20px;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            background: rgba(10, 24, 38, 0.8);\r\n            padding: 15px;\r\n            border-radius: 10px;\r\n            text-align: center;\r\n            max-width: 500px;\r\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\r\n            backdrop-filter: blur(10px);\r\n        }\r\n\r\n        #instructions h3 {\r\n            margin-bottom: 10px;\r\n            color: #99ccff;\r\n            font-size: 1.2em;\r\n        }\r\n\r\n        #instructions p {\r\n            margin-bottom: 8px;\r\n            font-size: 0.9em;\r\n            color: #c9f0ff;\r\n        }\r\n\r\n        .legend {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            gap: 15px;\r\n            margin: 10px 0;\r\n        }\r\n\r\n        .legend-item {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 5px;\r\n        }\r\n\r\n        .legend-color {\r\n            width: 15px;\r\n            height: 15px;\r\n            border-radius: 50%;\r\n            display: inline-block;\r\n        }\r\n\r\n        .legend-text {\r\n            font-size: 0.9em;\r\n            font-weight: bold;\r\n        }\r\n\r\n        .loading {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            background: rgba(10, 24, 38, 0.9);\r\n            z-index: 100;\r\n            flex-direction: column;\r\n            gap: 10px;\r\n        }\r\n\r\n        .spinner {\r\n            width: 50px;\r\n            height: 50px;\r\n            border: 5px solid rgba(255, 204, 0, 0.3);\r\n            border-radius: 50%;\r\n            border-top-color: #ffcc00;\r\n            animation: spin 1s ease-in-out infinite;\r\n        }\r\n\r\n        @keyframes spin {\r\n            to {\r\n                transform: rotate(360deg);\r\n            }\r\n        }\r\n\r\n        .loading-text {\r\n            font-size: 1.2em;\r\n            color: #7cff7c;\r\n        }\r\n\r\n        canvas {\r\n            display: block;\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"loading\">\r\n        <div class=\"spinner\"></div>\r\n        <div class=\"loading-text\">Loading Gravity Simulation...</div>\r\n    </div>\r\n\r\n    <div id=\"canvas-container\"></div>\r\n\r\n    <div id=\"controls\">\r\n        <h2>Gravity Well Controls</h2>\r\n\r\n        <div class=\"control-group\">\r\n            <h3>Object Properties</h3>\r\n\r\n            <div class=\"slider-container\">\r\n                <label for=\"mass\">Mass <span id=\"massValue\" class=\"slider-value\">100</span></label>\r\n                <input type=\"range\" id=\"mass\" min=\"10\" max=\"1000\" value=\"100\">\r\n                <div class=\"well-notice\">Higher mass = stronger gravity</div>\r\n            </div>\r\n\r\n            <div class=\"slider-container\">\r\n                <label for=\"radius\">Radius <span id=\"radiusValue\" class=\"slider-value\">4</span></label>\r\n                <input type=\"range\" id=\"radius\" min=\"1\" max=\"10\" value=\"4\">\r\n                <div class=\"well-notice\">Object size in the simulation</div>\r\n            </div>\r\n\r\n            <div class=\"button-group\">\r\n                <button id=\"place-button\">Place Object</button>\r\n                <button class=\"secondary\" id=\"clear-objects\">Clear All</button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <h3>Particle Properties</h3>\r\n\r\n            <div class=\"slider-container\">\r\n                <label for=\"particle-velocity\">Initial Velocity <span id=\"particle-velocity-value\"\r\n                        class=\"slider-value\">5</span></label>\r\n                <input type=\"range\" id=\"particle-velocity\" min=\"2\" max=\"10\" value=\"5\">\r\n                <div class=\"well-notice\">Launch speed of particles</div>\r\n            </div>\r\n\r\n            <div class=\"button-group\">\r\n                <button id=\"launch-particle\">Launch Particle</button>\r\n                <button class=\"secondary\" id=\"clear-particles\">Clear All</button>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <h3>Simulation Mode</h3>\r\n            <div class=\"legend\">\r\n                <div class=\"legend-item\">\r\n                    <div class=\"legend-color\" style=\"background-color: #cc6666;\"></div>\r\n                    <span class=\"legend-text\">Place Object</span>\r\n                </div>\r\n                <div class=\"legend-item\">\r\n                    <div class=\"legend-color\" style=\"background-color: #7777ff;\"></div>\r\n                    <span class=\"legend-text\">Add Particles</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"button-group\">\r\n                <button id=\"mode-place\" style=\"background: linear-gradient(to bottom, #cc6666, #993333);\">Place\r\n                    Objects</button>\r\n                <button id=\"mode-particles\" style=\"background: linear-gradient(to bottom, #7777ff, #5555cc);\">Add\r\n                    Particles</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div id=\"instructions\">\r\n        <h3>Gravity Well Simulation</h3>\r\n        <p>Objects <strong>(red)</strong> create spacetime curvature</p>\r\n        <p>Change the mass and velocity before placing objects or particles</p>\r\n        <p>Click in the simulation to <strong>place objects</strong> (default)</p>\r\n        <p>Right-click in the simulation to <strong>launch particles</strong></p>\r\n    </div>\r\n\r\n    <!-- Load Three.js library -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.134.0/build/three.min.js\"></script>\r\n\r\n    <!-- Manual implementation of OrbitControls, simplified -->\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.134.0/examples/js/controls/OrbitControls.js\"></script>\r\n\r\n    <script>\r\n        // App state\r\n        const state = {\r\n            isPlacingObjects: true,\r\n            objects: [],\r\n            particles: [],\r\n            trails: [],\r\n            gravityWells: [],\r\n            clock: new THREE.Clock(),\r\n            gridScale: 5,\r\n            gridSegments: 30,\r\n            mode: 'placing',\r\n            trailsContainer: null\r\n        };\r\n\r\n        // DOM Elements\r\n        const massSlider = document.getElementById('mass');\r\n        const massValue = document.getElementById('massValue');\r\n        const radiusSlider = document.getElementById('radius');\r\n        const radiusValue = document.getElementById('radiusValue');\r\n        const particleVelocitySlider = document.getElementById('particle-velocity');\r\n        const particleVelocityValue = document.getElementById('particle-velocity-value');\r\n        const placeButton = document.getElementById('place-button');\r\n        const clearObjectsButton = document.getElementById('clear-objects');\r\n        const launchParticleButton = document.getElementById('launch-particle');\r\n        const clearParticlesButton = document.getElementById('clear-particles');\r\n        const modePlaceButton = document.getElementById('mode-place');\r\n        const modeParticlesButton = document.getElementById('mode-particles');\r\n        const canvasContainer = document.getElementById('canvas-container');\r\n        const loadingScreen = document.querySelector('.loading');\r\n\r\n        // World dimensions\r\n        const worldWidth = 100;\r\n        const gridSegments = 50;\r\n\r\n        // Update sliders and values\r\n        massSlider.addEventListener('input', () => {\r\n            state.mass = parseInt(massSlider.value);\r\n            massValue.textContent = state.mass;\r\n        });\r\n\r\n        radiusSlider.addEventListener('input', () => {\r\n            state.radius = parseInt(radiusSlider.value);\r\n            radiusValue.textContent = state.radius;\r\n        });\r\n\r\n        particleVelocitySlider.addEventListener('input', () => {\r\n            state.particleVelocity = parseInt(particleVelocitySlider.value);\r\n            particleVelocityValue.textContent = state.particleVelocity;\r\n        });\r\n\r\n        // Check if the simulation has loaded properly\r\n        window.addEventListener('load', function () {\r\n            // Verify Three.js is loaded\r\n            if (typeof THREE === 'undefined') {\r\n                alert('Three.js library failed to load. Please check your internet connection and try again.');\r\n                console.error('Three.js is not available');\r\n                return;\r\n            }\r\n\r\n            // Start the simulation\r\n            init();\r\n        });\r\n\r\n        // UI Controls\r\n        placeButton.addEventListener('click', () => {\r\n            if (state.mode === 'placing') {\r\n                placeObject();\r\n            }\r\n        });\r\n\r\n        clearObjectsButton.addEventListener('click', () => {\r\n            while (state.objects.length > 0) {\r\n                const obj = state.objects.pop();\r\n                const container = obj.mesh.parent; // Corrected: obj.mesh.parent instead of obj.geometry.parent\r\n                if (container) container.remove(obj.mesh); // Corrected: remove obj.mesh\r\n            }\r\n            state.gravityWells.forEach(well => {\r\n                const container = well.parent; // Corrected: well.parent instead of well.geometry.parent\r\n                if (container) container.remove(well); // Corrected: remove well\r\n            });\r\n            state.gravityWells = [];\r\n            // Removed clearTrails() call here as it might not be defined yet or necessary if particles handle their own trails\r\n        });\r\n\r\n\r\n        launchParticleButton.addEventListener('click', () => {\r\n            // Check if the event object exists, as it might not if called programmatically\r\n            if (state.mode === 'launched' && (typeof event === 'undefined' || event.button === 0)) { // Assuming launch button means a generic launch, not tied to right-click\r\n                launchParticle();\r\n            }\r\n        });\r\n\r\n\r\n        clearParticlesButton.addEventListener('click', () => {\r\n            state.particles.forEach((particle) => {\r\n                if (particle.mesh && particle.mesh.parent) {\r\n                    particle.mesh.parent.remove(particle.mesh);\r\n                }\r\n                // If particles have trails managed separately and added to scene, remove them\r\n                if (particle.trail && particle.trail.parent) {\r\n                    particle.trail.parent.remove(particle.trail);\r\n                }\r\n            });\r\n            state.particles = [];\r\n        });\r\n\r\n        modePlaceButton.addEventListener('click', () => {\r\n            state.mode = 'placing';\r\n            modePlaceButton.style.boxShadow = '0 0 10px rgba(100, 100, 200, 0.8)';\r\n            modeParticlesButton.style.boxShadow = 'none';\r\n            state.isPlacingObjects = true;\r\n            placeButton.textContent = 'Place Object';\r\n            placeButton.style.background = 'linear-gradient(to bottom, #cc6666, #993333)';\r\n            // placeButton.classList.remove('secondary'); // This class was not added to placeButton initially\r\n        });\r\n\r\n        modeParticlesButton.addEventListener('click', () => {\r\n            state.mode = 'launched'; // Changed from 'particles' to 'launched' to match launchParticleButton logic\r\n            modeParticlesButton.style.boxShadow = '0 0 10px rgba(100, 100, 200, 0.8)';\r\n            modePlaceButton.style.boxShadow = 'none';\r\n            state.isPlacingObjects = false;\r\n            // The following lines seem to intend to change the 'placeButton' to act as a 'launch particle' button\r\n            // This might be confusing. Consider renaming placeButton or having separate logic.\r\n            // For now, keeping as is, assuming this is intended UI behavior.\r\n            placeButton.textContent = 'Launch Particle'; // Text changes\r\n            placeButton.style.background = 'linear-gradient(to bottom, #7777ff, #5555cc)'; // Style changes\r\n            // placeButton.classList.add('secondary'); // This class was not part of placeButton's original classes\r\n        });\r\n\r\n        // Place object function (simplified for clarity)\r\n        function placeObject() {\r\n            // Check if mouse is pressed - this event check is problematic if called from button\r\n            // For button click, event might not be what's expected.\r\n            // Assuming this function is also called by direct canvas click where event is valid.\r\n            // if (event && event.button === 0) { // left click - Removed for button compatibility\r\n            const gridDivisions = 20;\r\n            const gridSize = worldWidth;\r\n\r\n            const x = Math.floor(Math.random() * (gridDivisions - 2)) * (gridSize / gridDivisions) - (gridSize / 2) + 15;\r\n            const z = Math.floor(Math.random() * (gridDivisions - 2)) * (gridSize / gridDivisions) - (gridSize / 2) + 15;\r\n\r\n            const geometry = new THREE.SphereGeometry(state.radius / 5, 32, 32);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0xcc6666,\r\n                emissive: 0x7c2727,\r\n                shininess: 30,\r\n                specular: 0x555555,\r\n            });\r\n\r\n            const objectMesh = new THREE.Mesh(geometry, material); // Renamed to objectMesh for clarity\r\n            objectMesh.position.set(x, state.radius / 5, z); // Y position based on radius for ground placement\r\n            objectMesh.castShadow = true;\r\n\r\n            scene.add(objectMesh);\r\n\r\n            state.objects.push({\r\n                mesh: objectMesh,\r\n                mass: state.mass, // Ensure state.mass is current\r\n                radius: state.radius, // Ensure state.radius is current\r\n                position: objectMesh.position.clone() // Use .clone() for position\r\n            });\r\n\r\n            createGravitationalEffect(objectMesh); // Pass the mesh\r\n            // }\r\n        }\r\n\r\n        // Launch particles function\r\n        function launchParticle() {\r\n            // This event check is problematic if called from button.\r\n            // if (event && event.button === 2) { // right click - Removed for button compatibility\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const speed = state.particleVelocity * (0.7 + Math.random() * 0.5); // Ensure state.particleVelocity is current\r\n\r\n            const direction = new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)); // Launch horizontally for this example\r\n            // Or use camera direction if preferred:\r\n            // const direction = new THREE.Vector3(0, 0, -1);\r\n            // direction.applyQuaternion(camera.quaternion);\r\n            direction.normalize();\r\n\r\n            const particleGeometry = new THREE.SphereGeometry(0.5, 16, 16); // Reduced segments for performance\r\n            const particleMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0x7777ff,\r\n            });\r\n            const particleMesh = new THREE.Mesh(particleGeometry, particleMaterial); // Renamed\r\n\r\n            // Position particle near camera or a fixed point\r\n            particleMesh.position.copy(camera.position).add(direction.clone().multiplyScalar(5)); // Start 5 units in front of camera\r\n\r\n            scene.add(particleMesh);\r\n\r\n            state.particles.push({\r\n                mesh: particleMesh,\r\n                label: 'Particle',\r\n                velocity: new THREE.Vector3(direction.x * speed, direction.y * speed, direction.z * speed), // Store as Vector3\r\n                timer: 0,\r\n                // trail: [] // Trail logic needs to be implemented if desired\r\n            });\r\n            // }\r\n        }\r\n\r\n        // MOVED INITIALIZATIONS UP //\r\n        // Create scene and camera (simplified)\r\n        const scene = new THREE.Scene();\r\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n        camera.position.set(0, 15, 30);\r\n\r\n        // Renderer setup\r\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\r\n        renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n        renderer.shadowMap.enabled = true;\r\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n        canvasContainer.appendChild(renderer.domElement);\r\n\r\n        // Simplified OrbitControls imitation\r\n        const controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.05;\r\n\r\n        // Create gravity effect visualization\r\n        function createGravitationalEffect(objectMesh) { // Takes the object's mesh\r\n            // Visualize the gravity effect\r\n            const effectGeometry = new THREE.RingGeometry(objectMesh.geometry.parameters.radius * 2, objectMesh.geometry.parameters.radius * 5, 32);\r\n            const effectMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0xff9900,\r\n                side: THREE.DoubleSide,\r\n                transparent: true,\r\n                opacity: 0.4\r\n            });\r\n\r\n            const effect = new THREE.Mesh(effectGeometry, effectMaterial);\r\n            effect.rotation.x = Math.PI / 2;\r\n            effect.position.copy(objectMesh.position);\r\n            effect.position.y = 0; // Place effect on the grid plane\r\n\r\n            scene.add(effect);\r\n            state.gravityWells.push(effect); // Store for clearing\r\n        }\r\n\r\n        // Clear all trails (if you implement trails)\r\n        function clearTrails() {\r\n            state.trails.forEach(trail => {\r\n                if (trail.parent) trail.parent.remove(trail);\r\n            });\r\n            state.trails = [];\r\n        }\r\n\r\n\r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            const delta = state.clock.getDelta(); // Get time delta for frame-rate independent movement\r\n\r\n            // Update controls\r\n            controls.update();\r\n\r\n            // Handle particle movement\r\n            for (let i = state.particles.length - 1; i >= 0; i--) {\r\n                const p = state.particles[i];\r\n\r\n                // Apply gravity from objects\r\n                state.objects.forEach(obj => {\r\n                    const directionToObj = new THREE.Vector3().subVectors(obj.mesh.position, p.mesh.position);\r\n                    const distanceSq = directionToObj.lengthSq();\r\n                    if (distanceSq < 0.1) distanceSq = 0.1; // Avoid division by zero / extreme forces\r\n\r\n                    const forceMagnitude = (0.01 * obj.mass) / distanceSq; // G * m1*m2 / r^2 (m2=1 for particle)\r\n                    directionToObj.normalize().multiplyScalar(forceMagnitude);\r\n                    p.velocity.add(directionToObj);\r\n                });\r\n\r\n                p.mesh.position.addScaledVector(p.velocity, delta);\r\n                p.timer += delta;\r\n\r\n                // Check if particle is out of bounds or lifetime exceeded\r\n                if (p.mesh.position.length() > worldWidth * 2 || p.timer > 10) { // Example: remove after 10 seconds or if too far\r\n                    if (p.mesh.parent) p.mesh.parent.remove(p.mesh);\r\n                    // if (p.trail && p.trail.parent) p.trail.parent.remove(p.trail); // If trails exist\r\n                    state.particles.splice(i, 1);\r\n                }\r\n            }\r\n\r\n            // Render the scene\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n\r\n        // Lighting\r\n        const ambientLight = new THREE.AmbientLight(0x333355, 0.4);\r\n        scene.add(ambientLight);\r\n\r\n        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.6);\r\n        directionalLight.position.set(0, 1, 1); // Adjusted light direction\r\n        directionalLight.castShadow = true; // Enable shadows for this light\r\n        scene.add(directionalLight);\r\n\r\n        // Create a simple grid for reference\r\n        const gridHelper = new THREE.GridHelper(worldWidth, gridSegments, 0x3366aa, 0x224499);\r\n        // gridHelper.position.y = -0.5; // Grid is usually at y=0 by default\r\n        scene.add(gridHelper);\r\n\r\n        // Create a reference sphere (can be removed if not needed)\r\n        const referenceSphere = new THREE.Mesh(\r\n            new THREE.SphereGeometry(3, 32, 32),\r\n            new THREE.MeshBasicMaterial({\r\n                color: 0x88ccff,\r\n                wireframe: true,\r\n                transparent: true,\r\n                opacity: 0.5\r\n            })\r\n        );\r\n        referenceSphere.visible = false; // Keep it hidden unless for debugging\r\n        scene.add(referenceSphere);\r\n\r\n        // Create a ground plane\r\n        const groundGeometry = new THREE.PlaneGeometry(worldWidth, worldWidth);\r\n        const groundMaterial = new THREE.MeshStandardMaterial({ // Use MeshStandardMaterial for better lighting\r\n            color: 0x1a1a40, // Dark blue ground\r\n            roughness: 0.8,\r\n            metalness: 0.2\r\n            // wireframe: true, // Usually not needed for solid ground\r\n            // transparent: true, // Usually not needed for solid ground\r\n            // opacity: 0.5 // Usually not needed for solid ground\r\n        });\r\n        const ground = new THREE.Mesh(groundGeometry, groundMaterial);\r\n        ground.rotation.x = -Math.PI / 2;\r\n        ground.receiveShadow = true; // Ground should receive shadows\r\n        // ground.position.y = -10; // If grid is at y=0, ground should be at y=0 or slightly below\r\n        scene.add(ground);\r\n\r\n\r\n        // Handle window resize\r\n        window.addEventListener('resize', () => {\r\n            camera.aspect = canvasContainer.clientWidth / canvasContainer.clientHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(canvasContainer.clientWidth, canvasContainer.clientHeight);\r\n        });\r\n\r\n        // File cleanup example (handle on load)\r\n        // Conditionally call init only when the simulation is ready\r\n        function init() {\r\n            console.log(\"Gravity simulation initialized!\");\r\n            loadingScreen.style.display = 'none';\r\n            animate();\r\n        }\r\n\r\n        // Show confirmation on load\r\n        setTimeout(() => {\r\n            alert(\"Gravity Well Simulation is ready!\\n\\nLeft-click on canvas to place objects (if in Place Object mode)\\nOr use buttons in control panel.\\nDrag to rotate view.\");\r\n        }, 1000);\r\n\r\n        // Set initial state values from sliders\r\n        state.mass = parseInt(massSlider.value);\r\n        state.radius = parseInt(radiusSlider.value);\r\n        state.particleVelocity = parseInt(particleVelocitySlider.value);\r\n\r\n        // Add canvas click listeners for placing objects or particles based on mode\r\n        canvasContainer.addEventListener('click', (event) => {\r\n            if (state.mode === 'placing') {\r\n                // Convert mouse click to world coordinates to place object\r\n                // This requires a raycaster. For simplicity, this example will use the random placement\r\n                // from the placeObject function if called directly.\r\n                // To implement precise placement:\r\n                // const mouse = new THREE.Vector2();\r\n                // mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                // mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n                // const raycaster = new THREE.Raycaster();\r\n                // raycaster.setFromCamera(mouse, camera);\r\n                // const intersects = raycaster.intersectObject(ground); // Intersect with the ground plane\r\n                // if (intersects.length > 0) {\r\n                //     const point = intersects[0].point;\r\n                //     placeObjectAtPoint(point.x, point.z); // A new function to place at specific coords\r\n                // }\r\n                // For now, just call the existing random placeObject:\r\n                placeObject(); // This will place randomly as per its current logic\r\n            }\r\n        });\r\n\r\n        canvasContainer.addEventListener('contextmenu', (event) => {\r\n            event.preventDefault(); // Prevent context menu\r\n            if (state.mode === 'launched') { // Or a dedicated \"launch on right click\" mode\r\n                // Similar to above, could use raycaster for direction or launch from camera view\r\n                launchParticle(); // This will launch as per its current logic\r\n            }\r\n        });\r\n\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "gravity-sim-deepseek-r1-0528-qwen8b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.786Z",
    "model": "deepseek-r1-0528-qwen8b",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, astronomy, simulation, architecture."
  }
}
