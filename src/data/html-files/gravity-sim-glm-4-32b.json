{
  "title": "Spacetime Gravity Well Simulation",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Spacetime Gravity Well Simulation</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n\r\n        body {\r\n            font-family: 'Arial', sans-serif;\r\n            background-color: #0a0a0a;\r\n            color: #f0f0f0;\r\n            overflow: hidden;\r\n        }\r\n\r\n        #canvas-container {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            z-index: 1;\r\n        }\r\n\r\n        #controls-panel {\r\n            position: absolute;\r\n            top: 20px;\r\n            right: 20px;\r\n            background-color: rgba(20, 20, 30, 0.8);\r\n            border-radius: 10px;\r\n            padding: 20px;\r\n            width: 300px;\r\n            z-index: 2;\r\n            box-shadow: 0 0 20px rgba(0, 140, 255, 0.3);\r\n            border: 1px solid rgba(0, 140, 255, 0.5);\r\n        }\r\n\r\n        .control-group {\r\n            margin-bottom: 15px;\r\n        }\r\n\r\n        h2 {\r\n            margin-bottom: 15px;\r\n            color: #00a8ff;\r\n            font-size: 18px;\r\n            text-align: center;\r\n        }\r\n\r\n        h3 {\r\n            margin-bottom: 10px;\r\n            color: #00a8ff;\r\n            font-size: 14px;\r\n        }\r\n\r\n        label {\r\n            display: block;\r\n            margin: 5px 0;\r\n            font-size: 14px;\r\n        }\r\n\r\n        input[type=\"range\"],\r\n        input[type=\"number\"] {\r\n            width: 100%;\r\n            margin: 5px 0;\r\n            padding: 5px;\r\n            background-color: rgba(30, 30, 40, 0.8);\r\n            border: 1px solid #00a8ff;\r\n            border-radius: 4px;\r\n            color: #f0f0f0;\r\n        }\r\n\r\n        input[type=\"number\"] {\r\n            width: 60px;\r\n            display: inline-block;\r\n        }\r\n\r\n        button {\r\n            background-color: #00a8ff;\r\n            color: #fff;\r\n            border: none;\r\n            padding: 8px 15px;\r\n            margin: 5px 0;\r\n            border-radius: 4px;\r\n            cursor: pointer;\r\n            transition: background-color 0.3s;\r\n            width: 100%;\r\n            font-weight: bold;\r\n        }\r\n\r\n        button:hover {\r\n            background-color: #0088cc;\r\n        }\r\n\r\n        .color-picker {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            gap: 5px;\r\n            margin-top: 5px;\r\n        }\r\n\r\n        .color-option {\r\n            width: 25px;\r\n            height: 25px;\r\n            border-radius: 50%;\r\n            cursor: pointer;\r\n            border: 2px solid transparent;\r\n            transition: transform 0.2s;\r\n        }\r\n\r\n        .color-option:hover {\r\n            transform: scale(1.1);\r\n        }\r\n\r\n        .color-option.selected {\r\n            border: 2px solid white;\r\n        }\r\n\r\n        .info-text {\r\n            font-size: 12px;\r\n            color: #aaa;\r\n            margin-top: 5px;\r\n        }\r\n\r\n        .toggle-panel {\r\n            position: absolute;\r\n            top: 20px;\r\n            right: 20px;\r\n            background-color: rgba(20, 20, 30, 0.8);\r\n            border-radius: 50%;\r\n            width: 40px;\r\n            height: 40px;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            cursor: pointer;\r\n            z-index: 3;\r\n            box-shadow: 0 0 10px rgba(0, 140, 255, 0.3);\r\n            border: 1px solid rgba(0, 140, 255, 0.5);\r\n            transition: all 0.3s;\r\n        }\r\n\r\n        .toggle-panel:hover {\r\n            background-color: rgba(30, 30, 50, 0.9);\r\n        }\r\n\r\n        .toggle-panel i {\r\n            font-size: 20px;\r\n            color: #00a8ff;\r\n        }\r\n\r\n        .hidden {\r\n            display: none;\r\n        }\r\n\r\n        .help-panel {\r\n            position: absolute;\r\n            bottom: 20px;\r\n            left: 20px;\r\n            background-color: rgba(20, 20, 30, 0.8);\r\n            border-radius: 10px;\r\n            padding: 15px;\r\n            max-width: 300px;\r\n            z-index: 2;\r\n            box-shadow: 0 0 20px rgba(0, 140, 255, 0.3);\r\n            border: 1px solid rgba(0, 140, 255, 0.5);\r\n        }\r\n\r\n        .help-panel ul {\r\n            margin-left: 20px;\r\n        }\r\n\r\n        .help-panel li {\r\n            margin: 5px 0;\r\n        }\r\n\r\n        .button-group {\r\n            display: flex;\r\n            gap: 10px;\r\n        }\r\n\r\n        .button-group button {\r\n            flex: 1;\r\n        }\r\n\r\n        .mode-indicator {\r\n            position: absolute;\r\n            top: 80px;\r\n            right: 20px;\r\n            padding: 5px 10px;\r\n            background-color: rgba(0, 0, 0, 0.5);\r\n            color: white;\r\n            border-radius: 4px;\r\n            font-size: 12px;\r\n        }\r\n    </style>\r\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\r\n</head>\r\n\r\n<body>\r\n    <div id=\"canvas-container\"></div>\r\n\r\n    <div class=\"toggle-panel\" id=\"toggle-controls\">\r\n        <i class=\"fas fa-cog\"></i>\r\n    </div>\r\n\r\n    <div id=\"controls-panel\">\r\n        <h2>Gravity Well Simulator</h2>\r\n\r\n        <div class=\"control-group\">\r\n            <h3>Massive Object</h3>\r\n            <label>Mass: <span id=\"mass-value\">50</span></label>\r\n            <input type=\"range\" id=\"mass-slider\" min=\"10\" max=\"200\" value=\"50\">\r\n\r\n            <label>Object Color:</label>\r\n            <div class=\"color-picker\" id=\"object-colors\">\r\n                <div class=\"color-option selected\" style=\"background-color: #ff5555;\" data-color=\"#ff5555\"></div>\r\n                <div class=\"color-option\" style=\"background-color: #55ff55;\" data-color=\"#55ff55\"></div>\r\n                <div class=\"color-option\" style=\"background-color: #5555ff;\" data-color=\"#5555ff\"></div>\r\n                <div class=\"color-option\" style=\"background-color: #ffff55;\" data-color=\"#ffff55\"></div>\r\n                <div class=\"color-option\" style=\"background-color: #ff55ff;\" data-color=\"#ff55ff\"></div>\r\n            </div>\r\n\r\n            <button id=\"add-object\" class=\"button-group\">\r\n                <span>A SVG subtract Subtract</span>\r\n            </button>\r\n\r\n            <p class=\"info-text\">Click anywhere on the grid to place a massive object</p>\r\n\r\n            <button id=\"clear-objects\">Clear All Objects</button>\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <h3>Test Particle</h3>\r\n            <label>Initial Velocity:</label>\r\n            <div style=\"display: flex; align-items: center; gap: 5px;\">\r\n                <input type=\"number\" id=\"velocity-x\" min=\"-20\" max=\"20\" value=\"5\" step=\"0.5\">\r\n                <span>X</span>\r\n            </div>\r\n            <div style=\"display: flex; align-items: center; gap: 5px;\">\r\n                <input type=\"number\" id=\"velocity-y\" min=\"-20\" max=\"20\" value=\"0\" step=\"0.5\">\r\n                <span>Y</span>\r\n            </div>\r\n            <div style=\"display: flex; align-items: center; gap: 5px;\">\r\n                <input type=\"number\" id=\"velocity-z\" min=\"-20\" max=\"20\" value=\"0\" step=\"0.5\">\r\n                <span>Z</span>\r\n            </div>\r\n\r\n            <div class=\"button-group\">\r\n                <button id=\"launch-particle\">Launch</button>\r\n                <button id=\"clear-particles\">Clear</button>\r\n            </div>\r\n\r\n            <p class=\"info-text\">Click and drag to aim, then release to launch a particle</p>\r\n        </div>\r\n\r\n        <div class=\"control-group\">\r\n            <h3>Simulation Controls</h3>\r\n            <button id=\"toggle-simulation\">Pause Simulation</button>\r\n            <button id=\"toggle-wireframe\">Toggle Wireframe</button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"mode-indicator\" id=\"mode-display\">\r\n        Mode: Place Massive Object\r\n    </div>\r\n\r\n    <div class=\"help-panel\">\r\n        <h3><i class=\"fas fa-info-circle\"></i> How to Use</h3>\r\n        <ul>\r\n            <li>Use mouse to rotate the view (Alt+Click to pan)</li>\r\n            <li>Set mass and color, then click on grid to place objects</li>\r\n            <li>Set initial velocity, then click and drag to aim, release to launch</li>\r\n            <li>Particles will follow curved paths around massive objects</li>\r\n            <li>The grid represents spacetime, deforming around massive objects</li>\r\n        </ul>\r\n    </div>\r\n\r\n    <script>\r\n        // Main variables\r\n        let scene, camera, renderer, controls;\r\n        let grid, gridGeometry;\r\n        let massiveObjects = [];\r\n        let particles = [];\r\n        let raycaster, mouse;\r\n        let isSimulationRunning = true;\r\n\r\n        // Mode tracking\r\n        let currentMode = \"place-massive-object\"; // or \"place-particle\"\r\n\r\n        // Physics constants\r\n        const G = 0.1; // Gravitational constant for the simulation\r\n\r\n        // Initialize the simulation\r\n        function init() {\r\n            // Create scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x111122);\r\n\r\n            // Create camera\r\n            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 50, 0);\r\n\r\n            // Create renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n            renderer.setPixelRatio(window.devicePixelRatio);\r\n            document.getElementById('canvas-container').appendChild(renderer.domElement);\r\n\r\n            // Add orbit controls\r\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.05;\r\n\r\n            // Lighting\r\n            const ambientLight = new THREE.AmbientLight(0x404040, 1);\r\n            scene.add(ambientLight);\r\n\r\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n            directionalLight.position.set(1, 1, 1);\r\n            scene.add(directionalLight);\r\n\r\n            // Create coordinate grid\r\n            createGrid();\r\n\r\n            // Raycaster for interaction\r\n            raycaster = new THREE.Raycaster();\r\n            mouse = new THREE.Vector2();\r\n\r\n            // Add event listeners\r\n            window.addEventListener('resize', onWindowResize);\r\n            renderer.domElement.addEventListener('click', onMouseClick);\r\n            renderer.domElement.addEventListener('mousedown', onMouseDown);\r\n            renderer.domElement.addEventListener('mouseup', onMouseUp);\r\n            renderer.domElement.addEventListener('mousemove', onMouseMove);\r\n\r\n            // Start animation loop\r\n            animate();\r\n        }\r\n\r\n        function createGrid() {\r\n            const gridSize = 100;\r\n            const gridDivisions = 20;\r\n\r\n            // Create grid plane\r\n            gridGeometry = new THREE.PlaneGeometry(gridSize, gridSize, gridDivisions, gridDivisions);\r\n            const gridMaterial = new THREE.MeshBasicMaterial({\r\n                color: 0x00a8ff,\r\n                wireframe: true,\r\n                transparent: true,\r\n                opacity: 0.5\r\n            });\r\n\r\n            grid = new THREE.Mesh(gridGeometry, gridMaterial);\r\n            grid.rotation.x = -Math.PI / 2;\r\n            grid.position.y = 0;\r\n            scene.add(grid);\r\n\r\n            // Add a reference grid on the bottom\r\n            const referenceGridHelper = new THREE.GridHelper(gridSize, gridDivisions, 0x444444, 0x222222);\r\n            referenceGridHelper.position.y = -0.1;\r\n            scene.add(referenceGridHelper);\r\n        }\r\n\r\n        function addMassiveObject(position, mass, color) {\r\n            const radius = Math.cbrt(mass) * 0.2;\r\n            const geometry = new THREE.SphereGeometry(radius, 32, 32);\r\n            const material = new THREE.MeshStandardMaterial({\r\n                color: color,\r\n                metalness: 0.7,\r\n                roughness: 0.2\r\n            });\r\n\r\n            const object = new THREE.Mesh(geometry, material);\r\n            object.position.copy(position);\r\n            object.userData = { type: 'massiveObject', mass: mass };\r\n\r\n            scene.add(object);\r\n            massiveObjects.push(object);\r\n\r\n            return object;\r\n        }\r\n\r\n        function addParticle(position, velocity, color) {\r\n            const geometry = new THREE.SphereGeometry(0.3, 16, 16);\r\n            const material = new THREE.MeshBasicMaterial({ color: color });\r\n\r\n            const particle = new THREE.Mesh(geometry, material);\r\n            particle.position.copy(position);\r\n            particle.userData = {\r\n                type: 'particle',\r\n                velocity: velocity,\r\n                path: [],\r\n                pathLine: null\r\n            };\r\n\r\n            // Create path line\r\n            const lineMaterial = new THREE.LineBasicMaterial({ color: color });\r\n            const lineGeometry = new THREE.BufferGeometry();\r\n            const pathLine = new THREE.Line(lineGeometry, lineMaterial);\r\n\r\n            scene.add(particle);\r\n            scene.add(pathLine);\r\n\r\n            particle.userData.pathLine = pathLine;\r\n            particle.userData.path.push(new THREE.Vector3().copy(position));\r\n\r\n            particles.push(particle);\r\n\r\n            return particle;\r\n        }\r\n\r\n        function deformGrid() {\r\n            if (!grid) return;\r\n\r\n            const positions = gridGeometry.attributes.position;\r\n            const initialY = [];\r\n\r\n            // Store initial Y values and reset to flat\r\n            for (let i = 0; i < positions.count; i++) {\r\n                initialY[i] = positions.getY(i);\r\n                positions.setY(i, 0);\r\n            }\r\n\r\n            // Apply deformation from each massive object\r\n            for (let i = 0; i < positions.count; i++) {\r\n                const x = positions.getX(i);\r\n                const z = positions.getZ(i);\r\n\r\n                // Reset height\r\n                positions.setY(i, initialY[i] - 0.01);\r\n\r\n                // Apply gravitational deformation\r\n                for (const obj of massiveObjects) {\r\n                    const dx = x - obj.position.x;\r\n                    const dz = z - obj.position.z;\r\n                    const distanceSquared = dx * dx + dz * dz;\r\n\r\n                    if (distanceSquared > 0.1) {\r\n                        const distance = Math.sqrt(distanceSquared);\r\n                        const mass = obj.userData.mass;\r\n                        // Generate negative 'y' to represent spacetime curving 'down'\r\n                        const deformation = mass * 20 / (distance * distance + mass * 0.5);\r\n                        positions.setY(i, positions.getY(i) - deformation);\r\n                    }\r\n                }\r\n            }\r\n\r\n            positions.needsUpdate = true;\r\n            gridGeometry.computeVertexNormals();\r\n        }\r\n\r\n        function updateParticleMovements() {\r\n            if (!isSimulationRunning) return;\r\n\r\n            for (let i = 0; i < particles.length; i++) {\r\n                const particle = particles[i];\r\n\r\n                // Calculate gravitational forces from all massive objects\r\n                let totalForceX = 0;\r\n                let totalForceY = 0;\r\n                let totalForceZ = 0;\r\n\r\n                for (const obj of massiveObjects) {\r\n                    const dx = obj.position.x - particle.position.x;\r\n                    const dy = obj.position.y - particle.position.y;\r\n                    const dz = obj.position.z - particle.position.z;\r\n\r\n                    const distanceSquared = dx * dx + dy * dy + dz * dz;\r\n                    const distance = Math.sqrt(distanceSquared);\r\n\r\n                    if (distance > 0.5) { // Avoid division by zero and extreme forces\r\n                        const forceMagnitude = G * obj.userData.mass / distanceSquared;\r\n\r\n                        totalForceX += forceMagnitude * dx / distance;\r\n                        totalForceY += forceMagnitude * dy / distance;\r\n                        totalForceZ += forceMagnitude * dz / distance;\r\n                    }\r\n                }\r\n\r\n                // Update velocity based on force\r\n                particle.userData.velocity.x += totalForceX * 0.01;\r\n                particle.userData.velocity.y += totalForceY * 0.01;\r\n                particle.userData.velocity.z += totalForceZ * 0.01;\r\n\r\n                // Apply drag to prevent infinite acceleration\r\n                const dragFactor = 0.995;\r\n                particle.userData.velocity.x *= dragFactor;\r\n                particle.userData.velocity.y *= dragFactor;\r\n                particle.userData.velocity.z *= dragFactor;\r\n\r\n                // Update position based on velocity\r\n                particle.position.x += particle.userData.velocity.x * 0.1;\r\n                particle.position.y += particle.userData.velocity.y * 0.1;\r\n                particle.position.z += particle.userData.velocity.z * 0.1;\r\n\r\n                // Add current position to path\r\n                particle.userData.path.push(new THREE.Vector3().copy(particle.position));\r\n\r\n                // Keep path a reasonable length\r\n                if (particle.userData.path.length > 1000) {\r\n                    particle.userData.path.shift();\r\n                }\r\n\r\n                // Update path line\r\n                const path = particle.userData.path;\r\n                const pathLine = particle.userData.pathLine;\r\n\r\n                const lineGeometry = new THREE.BufferGeometry().setFromPoints(path);\r\n                pathLine.geometry.dispose();\r\n                pathLine.geometry = lineGeometry;\r\n\r\n                // Check if particle is out of bounds\r\n                if (Math.abs(particle.position.x) > 100 ||\r\n                    Math.abs(particle.position.y) > 100 ||\r\n                    Math.abs(particle.position.z) > 100) {\r\n\r\n                    scene.remove(particle);\r\n                    scene.remove(pathLine);\r\n                    particles.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Event handlers\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }\r\n\r\n        function onMouseClick(event) {\r\n            if (currentMode !== \"place-massive-object\") return;\r\n\r\n            // Calculate mouse position in normalized device coordinates (-1 to +1)\r\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n            // Update the picking ray with the camera and mouse position\r\n            raycaster.setFromCamera(mouse, camera);\r\n\r\n            // Calculate intersections with the grid\r\n            const intersects = raycaster.intersectObject(grid);\r\n\r\n            if (intersects.length > 0) {\r\n                const point = intersects[0].point;\r\n                const mass = parseFloat(document.getElementById('mass-slider').value);\r\n                const activeColor = document.querySelector('.color-option.selected').getAttribute('data-color');\r\n\r\n                addMassiveObject(point, mass, activeColor);\r\n                deformGrid();\r\n            }\r\n        }\r\n\r\n        let isDragging = false;\r\n        let dragStartPoint = null;\r\n\r\n        function onMouseDown(event) {\r\n            if (event.button !== 0) return; // Only left mouse button\r\n\r\n            // Calculate mouse position in normalized device coordinates (-1 to +1)\r\n            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n            // Update the picking ray with the camera and mouse position\r\n            raycaster.setFromCamera(mouse, camera);\r\n\r\n            // Set dragging mode\r\n            isDragging = true;\r\n            currentMode = \"place-particle\";\r\n\r\n            // Store the starting point\r\n            const intersects = raycaster.intersectObject(grid, true);\r\n            if (intersects.length > 0) {\r\n                dragStartPoint = intersects[0].point;\r\n                document.getElementById('mode-display').textContent = 'Mode: Drag to Launch Particle';\r\n            }\r\n        }\r\n\r\n        function onMouseMove(event) {\r\n            if (isDragging && dragStartPoint) {\r\n                // Update mouse position\r\n                mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n                // Calculate aim point\r\n                raycaster.setFromCamera(mouse, camera);\r\n                const intersects = raycaster.intersectObject(grid, true);\r\n\r\n                if (intersects.length > 0) {\r\n                    const endPoint = intersects[0].point;\r\n\r\n                    // This is where we would display the aiming line\r\n                    // For now, we'll just update the velocity inputs based on the drag\r\n                    const vec = new THREE.Vector3().subVectors(dragStartPoint, endPoint);\r\n                    const velocityScale = 0.1;\r\n\r\n                    document.getElementById('velocity-x').value = -vec.x * velocityScale;\r\n                    document.getElementById('velocity-y').value = -vec.y * velocityScale;\r\n                    document.getElementById('velocity-z').value = -vec.z * velocityScale;\r\n                }\r\n            }\r\n        }\r\n\r\n        function onMouseUp(event) {\r\n            if (isDragging && dragStartPoint && currentMode === \"place-particle\") {\r\n                // Update mouse position\r\n                mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n\r\n                // Calculate launch point\r\n                raycaster.setFromCamera(mouse, camera);\r\n                const intersects = raycaster.intersectObject(grid, true);\r\n\r\n                if (intersects.length > 0) {\r\n                    // Get velocity components from input fields\r\n                    const vx = parseFloat(document.getElementById('velocity-x').value);\r\n                    const vy = parseFloat(document.getElementById('velocity-y').value);\r\n                    const vz = parseFloat(document.getElementById('velocity-z').value);\r\n\r\n                    // Launch particle\r\n                    const particle = addParticle(\r\n                        new THREE.Vector3().copy(dragStartPoint),\r\n                        new THREE.Vector3(vx, vy, vz),\r\n                        document.querySelector('.color-option.selected').getAttribute('data-color')\r\n                    );\r\n                }\r\n            }\r\n\r\n            isDragging = false;\r\n            dragStartPoint = null;\r\n            currentMode = \"place-massive-object\";\r\n            document.getElementById('mode-display').textContent = 'Mode: Place Massive Object';\r\n        }\r\n\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            controls.update();\r\n            updateParticleMovements();\r\n\r\n            // Render the scene\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // Initialize UI controls\r\n        function initControls() {\r\n            // Mass slider\r\n            const massSlider = document.getElementById('mass-slider');\r\n            const massValue = document.getElementById('mass-value');\r\n\r\n            massSlider.addEventListener('input', function () {\r\n                massValue.textContent = this.value;\r\n            });\r\n\r\n            // Color selection\r\n            const colorOptions = document.querySelectorAll('.color-option');\r\n            colorOptions.forEach(option => {\r\n                option.addEventListener('click', function () {\r\n                    document.querySelector('.color-option.selected').classList.remove('selected');\r\n                    this.classList.add('selected');\r\n                    updateGridDeformation();\r\n                });\r\n            });\r\n\r\n            // Add massive object button\r\n            document.getElementById('add-object').addEventListener('click', function () {\r\n                const activeColor = document.querySelector('.color-option.selected').getAttribute('data-color');\r\n                const mass = parseFloat(document.getElementById('mass-slider').value);\r\n\r\n                // Place at a default position\r\n                const position = new THREE.Vector3(0, 0, 0);\r\n                addMassiveObject(position, mass, activeColor);\r\n                deformGrid();\r\n            });\r\n\r\n            // Clear objects button\r\n            document.getElementById('clear-objects').addEventListener('click', function () {\r\n                massiveObjects.forEach(obj => {\r\n                    scene.remove(obj);\r\n                });\r\n                massiveObjects = [];\r\n                deformGrid();\r\n            });\r\n\r\n            // Clear particles button\r\n            document.getElementById('clear-particles').addEventListener('click', function () {\r\n                particles.forEach(particle => {\r\n                    scene.remove(particle);\r\n                    scene.remove(particle.userData.pathLine);\r\n                });\r\n                particles = [];\r\n            });\r\n\r\n            // Launch particle button\r\n            document.getElementById('launch-particle').addEventListener('click', function () {\r\n                const mass = parseFloat(document.getElementById('mass-slider').value);\r\n                const vx = parseFloat(document.getElementById('velocity-x').value);\r\n                const vy = parseFloat(document.getElementById('velocity-y').value);\r\n                const vz = parseFloat(document.getElementById('velocity-z').value);\r\n                const activeColor = document.querySelector('.color-option.selected').getAttribute('data-color');\r\n\r\n                // Launch from a default position\r\n                const position = new THREE.Vector3(20, 1, 0);\r\n                const velocity = new THREE.Vector3(vx, vy, vz);\r\n                addParticle(position, velocity, activeColor);\r\n            });\r\n\r\n            // Toggle simulation button\r\n            const toggleSimBtn = document.getElementById('toggle-simulation');\r\n            toggleSimBtn.addEventListener('click', function () {\r\n                isSimulationRunning = !isSimulationRunning;\r\n                this.textContent = isSimulationRunning ? \"Pause Simulation\" : \"Resume Simulation\";\r\n            });\r\n\r\n            // Toggle wireframe button\r\n            const toggleWireframeBtn = document.getElementById('toggle-wireframe');\r\n            toggleWireframeBtn.addEventListener('click', function () {\r\n                grid.material.wireframe = !grid.material.wireframe;\r\n            });\r\n\r\n            // Toggle controls panel\r\n            const toggleControlsBtn = document.getElementById('toggle-controls');\r\n            const controlsPanel = document.getElementById('controls-panel');\r\n            toggleControlsBtn.addEventListener('click', function () {\r\n                controlsPanel.classList.toggle('hidden');\r\n                toggleControlsBtn.innerHTML = controlsPanel.classList.contains('hidden')\r\n                    ? '<i class=\"fas fa-cog\"></i>'\r\n                    : '<i class=\"fas fa-times\"></i>';\r\n            });\r\n        }\r\n\r\n        // Initialize the simulation\r\n        window.addEventListener('DOMContentLoaded', function () {\r\n            init();\r\n            initControls();\r\n\r\n            // Set default values\r\n            document.getElementById('mass-slider').addEventListener('input', function () {\r\n                document.getElementById('mass-value').textContent = this.value;\r\n            });\r\n        });\r\n\r\n        // Function to update grid deformation based on current massive objects\r\n        function updateGridDeformation() {\r\n            deformGrid();\r\n        }\r\n\r\n        // Initialize the controls panel\r\n        initControls();\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "gravity-sim-glm-4-32b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:58.009Z",
    "model": "glm-4-32b",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, astronomy, simulation, architecture."
  }
}
