{
  "title": "Dyson Sphere Construction Simulator",
  "htmlContent": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dyson Sphere Construction Simulator</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n\n        body {\n            font-family: 'Segoe UI', Arial, sans-serif;\n            color: #f0f0f0;\n            background-color: #0a0a0a;\n            overflow: hidden;\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .header {\n            padding: 1rem;\n            text-align: center;\n            background-color: rgba(16, 16, 32, 0.8);\n            border-bottom: 1px solid #1e5799;\n            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.5);\n        }\n\n        header h1 {\n            font-size: 2.2rem;\n            font-weight: 300;\n            margin-bottom: 0.5rem;\n            text-transform: uppercase;\n            letter-spacing: 2px;\n        }\n\n        header p {\n            font-size: 0.9rem;\n            opacity: 0.7;\n            max-width: 85%;\n            margin: 0 auto;\n        }\n\n        .main-container {\n            display: flex;\n            flex: 1;\n            overflow: hidden;\n        }\n\n        #animation-canvas {\n            flex: 1;\n            width: 100%;\n            height: 100%;\n        }\n\n        .controls-container {\n            width: 300px;\n            background-color: rgba(20, 20, 40, 0.7);\n            padding: 1.5rem;\n            overflow-y: auto;\n            box-shadow: -5px 0 15px rgba(0, 0, 0, 0.5);\n            z-index: 10;\n        }\n\n        .control-group {\n            margin-bottom: 1.5rem;\n        }\n\n        .control-group h2 {\n            font-size: 1.1rem;\n            font-weight: 400;\n            margin-bottom: 1rem;\n            color: #0e9aa7;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n        }\n\n        .slider-container {\n            margin-bottom: 1rem;\n        }\n\n        .slider-container label {\n            display: block;\n            font-size: 0.9rem;\n            margin-bottom: 0.5rem;\n            display: flex;\n            justify-content: space-between;\n            flex-wrap: wrap;\n        }\n\n        .slider-container #progress-label {\n            flex: 1;\n        }\n\n        input[type=\"range\"] {\n            width: 100%;\n            height: 6px;\n            -webkit-appearance: none;\n            background: rgba(142, 187, 211, 0.2);\n            border-radius: 3px;\n            outline: none;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            width: 18px;\n            height: 18px;\n            border-radius: 50%;\n            background: #0e9aa7;\n            cursor: pointer;\n            transition: all 0.3s;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb:hover {\n            background: #0a7a93;\n        }\n\n        .toggle-toggle {\n            display: inline-block;\n            position: relative;\n            width: 50px;\n            height: 24px;\n        }\n\n        .toggle-toggle input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n        }\n\n        .toggle-slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            background-color: rgba(255, 255, 255, 0.3);\n            transition: .4s;\n            border-radius: 24px;\n        }\n\n        .toggle-slider:before {\n            position: absolute;\n            content: \"\";\n            height: 16px;\n            width: 16px;\n            left: 4px;\n            bottom: 4px;\n            background-color: #fff;\n            transition: .4s;\n            border-radius: 50%;\n        }\n\n        input:checked+.toggle-slider {\n            background-color: #0e9aa7;\n        }\n\n        input:checked+.toggle-slider:before {\n            transform: translateX(26px);\n        }\n\n        .button {\n            background-color: #1c3864;\n            color: #fff;\n            border: none;\n            padding: 0.7rem 1.5rem;\n            font-size: 0.9rem;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: all 0.3s;\n            text-transform: uppercase;\n            letter-spacing: 1px;\n            margin-right: 10px;\n            margin-bottom: 10px;\n            font-family: 'Courier New', monospace;\n        }\n\n        .button:hover {\n            background-color: #0e9aa7;\n            color: #fff;\n        }\n\n        .button.running {\n            background-color: #0e9aa7;\n            width: auto;\n        }\n\n        .button.running:hover {\n            background-color: #0a7a93;\n        }\n\n        .stats-container {\n            margin-top: 20px;\n            padding: 15px;\n            background-color: rgba(14, 105, 163, 0.3);\n            border-radius: 6px;\n            border-left: 3px solid #0e9aa7;\n        }\n\n        .stat-row {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 5px;\n            font-size: 0.8rem;\n        }\n\n        .stat-row .labeled {\n            font-weight: 500;\n        }\n\n        /* Responsive adjustments */\n        @media (max-width: 992px) {\n            .main-container {\n                flex-direction: column;\n            }\n\n            .controls-container {\n                width: 100%;\n                max-height: 40vh;\n                flex-shrink: 0;\n                margin-top: 1rem;\n            }\n        }\n\n        .loading {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: #0a0a0a;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            z-index: 1000;\n            transition: opacity 0.5s;\n        }\n\n        .spinner {\n            width: 40px;\n            height: 40px;\n            border: 4px solid rgba(237, 243, 249, 0.3);\n            border-radius: 50%;\n            border-top: 4px solid #0e9aa7;\n            animation: spin 1s linear infinite;\n        }\n\n        @keyframes spin {\n            0% {\n                transform: rotate(0deg);\n            }\n\n            100% {\n                transform: rotate(360deg);\n            }\n        }\n    </style>\n</head>\n\n<body>\n    <!-- Loading screen -->\n    <div class=\"loading\">\n        <div class=\"spinner\"></div>\n    </div>\n\n    <!-- Header -->\n    <header class=\"header\">\n        <h1>DYSON SPHERE CONSTRUCTION SIMULATOR</h1>\n        <p>Track the progress of harvesting energy from a distant star</p>\n    </header>\n\n    <!-- Main Content -->\n    <div class=\"main-container\">\n        <!-- Canvas for Three.js -->\n        <canvas id=\"animation-canvas\"></canvas>\n\n        <!-- Controls Panel -->\n        <div class=\"controls-container\">\n            <!-- Progress Controls -->\n            <div class=\"control-group\">\n                <h2>CONSTRUCTION CONTROLS</h2>\n\n                <div class=\"slider-container\">\n                    <label>\n                        Construction Progress\n                        <span id=\"progress-label\">0%</span>\n                    </label>\n                    <input type=\"range\" id=\"progress-slider\" min=\"0\" max=\"100\" value=\"0\">\n                </div>\n\n                <div>\n                    <button id=\"start-btn\" class=\"button\">START BUILD</button>\n                    <button id=\"pause-btn\" class=\"button\" disabled>PAUSE</button>\n                </div>\n            </div>\n\n            <!-- Solar Collector Controls -->\n            <div class=\"control-group\">\n                <h2>SOLAR COLLECTOR CONTROL</h2>\n\n                <label>\n                    Show Solar Collectors\n                    <div class=\"toggle-toggle\">\n                        <input type=\"checkbox\" id=\"show-collectors\" checked>\n                        <span class=\"toggle-slider\"></span>\n                    </div>\n                </label>\n            </div>\n\n            <!-- Star Appearance Controls -->\n            <div class=\"control-group\">\n                <h2>STAR APPEARANCE</h2>\n\n                <div class=\"slider-container\">\n                    <span>Sunspots Intensity</span>\n                    <input type=\"range\" id=\"sunspots\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.5\">\n                </div>\n\n                <div class=\"slider-container\">\n                    <span>Corona Brightness</span>\n                    <input type=\"range\" id=\"corona\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.7\">\n                </div>\n\n                <div class=\"slider-container\">\n                    <span>Star Brightness</span>\n                    <input type=\"range\" id=\"brightness\" min=\"0.5\" max=\"2\" step=\"0.1\" value=\"1\">\n                </div>\n            </div>\n\n            <!-- Animation Settings -->\n            <div class=\"control-group\">\n                <h2>ANIMATION SETTINGS</h2>\n\n                <div class=\"slider-container\">\n                    <span>Orbital Speed</span>\n                    <input type=\"range\" id=\"orbit-speed\" min=\"0\" max=\"1\" step=\"0.01\" value=\"0.3\">\n                </div>\n\n                <div class=\"slider-container\">\n                    <span>Detail Level</span>\n                    <input type=\"range\" id=\"detail-level\" min=\"0\" max=\"10\" step=\"1\" value=\"5\">\n                </div>\n            </div>\n\n            <!-- Statistics Panel -->\n            <div class=\"stats-container\">\n                <h2>CONSTRUCTION STATS</h2>\n                <div class=\"stat-row\">\n                    <span class=\"labeled\">Progress:</span>\n                    <span id=\"progress-percent\">0%</span>\n                </div>\n                <div class=\"stat-row\">\n                    <span class=\"labeled\">Collectors:</span>\n                    <span id=\"collector-count\">0/500</span>\n                </div>\n                <div class=\"stat-row\">\n                    <span class=\"labeled\">Energy Prod:</span>\n                    <span id=\"energy-production\">0 GW</span>\n                </div>\n                <div class=\"stat-row\">\n                    <span class=\"labeled\">Time Left:</span>\n                    <span id=\"time-left\">N/A</span>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script type=\"importmap\">\n        {\n            \"imports\": {\n                \"three\": \"https://unpkg.com/three@0.165.0/build/three.module.js\",\n                \"three/addons/\": \"https://unpkg.com/three@0.165.0/examples/jsm/\"\n            }\n        }\n    </script>\n\n    <script type=\"module\">\n        import * as THREE from 'three';\n        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';\n\n        // Constants\n        const STAR_RADIUS = 1;\n        const COLLECTOR_COUNT = 500;\n        const ORBITAL_RADIUS = 12;\n\n        // Global variables\n        let scene, camera, renderer, controls;\n        let star, starMesh, coronaMesh;\n        let solarCollectors = [];\n        let sunspotsGeometry, sunspotsMaterial;\n        let clock = new THREE.Clock();\n        let starBrightness = 1;\n        let showSolarCollectors = true;\n        let animationSpeed = 0.03;\n        let lastUpdated = 0;\n        let totalAnimationTime = 1000; // seconds\n        let constructionStartTime = 0;\n\n        // DOM Elements\n        const progressSlider = document.getElementById('progress-slider');\n        const startBtn = document.getElementById('start-btn');\n        const pauseBtn = document.getElementById('pause-btn');\n        const showCollectorsToggle = document.getElementById('show-collectors');\n        const sunspotsSlider = document.getElementById('sunspots');\n        const coronaSlider = document.getElementById('corona');\n        const brightnessSlider = document.getElementById('brightness');\n        const orbitSpeedSlider = document.getElementById('orbit-speed');\n        const detailLevelSlider = document.getElementById('detail-level');\n        const progressLabel = document.getElementById('progress-label');\n        const progressPercent = document.getElementById('progress-percent');\n        const collectorCount = document.getElementById('collector-count');\n        const energyProduction = document.getElementById('energy-production');\n        const timeLeft = document.getElementById('time-left');\n\n        // Initialize the application\n        function init() {\n            // Set up the scene\n            scene = new THREE.Scene();\n            scene.background = new THREE.Color(0x0a0a0a);\n\n            // Set up the camera\n            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\n            camera.position.z = 40;\n\n            // Set up the renderer\n            renderer = new THREE.WebGLRenderer({\n                canvas: document.getElementById('animation-canvas'),\n                antialias: true,\n                alpha: true\n            });\n            renderer.setSize(document.getElementById('animation-canvas').clientWidth, document.getElementById('animation-canvas').clientHeight);\n            renderer.setPixelRatio(window.devicePixelRatio);\n\n            // Remove loading screen\n            document.querySelector('.loading').style.opacity = '0';\n\n            // Set up controls\n            controls = new OrbitControls(camera, renderer.domElement);\n            controls.enableDamping = true;\n            controls.dampingFactor = 0.05;\n            controls.minDistance = 30;\n            controls.maxDistance = 200;\n\n            // Add lights\n            const ambientLight = new THREE.AmbientLight(0x333333);\n            scene.add(ambientLight);\n\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);\n            directionalLight.position.set(1, 1, 1);\n            scene.add(directionalLight);\n\n            const pointLight = new THREE.PointLight(0xffffff, 0.7);\n            pointLight.position.set(0, 0, 0);\n            scene.add(pointLight);\n\n            // Create the star\n            createStar();\n\n            // Create solar collectors\n            createSolarCollectors();\n\n            // Animation\n            animate();\n\n            // Event listeners\n            window.addEventListener('resize', onWindowResize);\n\n            // Control UI listeners\n            progressSlider.addEventListener('input', updateProgress);\n            startBtn.addEventListener('click', startConstruction);\n            pauseBtn.addEventListener('click', pauseConstruction);\n            showCollectorsToggle.addEventListener('change', toggleSolarCollectors);\n\n            sunspotsSlider.addEventListener('input', updateStarAppearance);\n            coronaSlider.addEventListener('input', updateCorona);\n            brightnessSlider.addEventListener('input', updateBrightness);\n            orbitSpeedSlider.addEventListener('input', updateOrbitSpeed);\n            detailLevelSlider.addEventListener('input', updateDetailLevel);\n\n            // Hide loader once everything is ready\n            setTimeout(() => {\n                document.querySelector('.loading').style.display = 'none';\n            }, 1000);\n        }\n\n        // Create the star with sunspots and corona effect\n        function createStar() {\n            // Create the star geometry and material\n            const starGeometry = new THREE.SphereGeometry(STAR_RADIUS, 64, 64);\n\n            // Star surface material - includes sunspots\n            const starMaterial = new THREE.MeshPhongMaterial({\n                color: 0xffff55,\n                shininess: 10,\n                transparent: true\n            });\n\n            starMesh = new THREE.Mesh(starGeometry, starMaterial);\n            scene.add(starMesh);\n\n            // Create sunspots using texture coordinates to mask areas with spots\n            const spotsGeometry = new THREE.BufferGeometry();\n            const positions = [];\n\n            // Set positions for sunspots (random across the surface)\n            for (let i = 0; i < 300; i++) {\n                const phi = Math.acos((Math.random() * 2 - 1));\n                const theta = Math.random() * Math.PI * 2;\n                const u = (phi - Math.PI / 2) / (Math.PI / 2) * 0.5 + 0.25; // Map phi (0 to π) to 0.25 to 0.75 for UV\n                const v = theta / (Math.PI * 2) * 0.5 + 0.25; // Map theta (0 to 2π) to 0.25 to 0.75 for UV\n\n                positions.push(\n                    Math.cos(phi) * Math.sin(theta) * STAR_RADIUS,\n                    Math.sin(phi) * STAR_RADIUS,\n                    Math.cos(phi) * Math.cos(theta) * STAR_RADIUS,\n                    u,           // s\n                    v            // t\n                );\n            }\n\n            spotsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 5));\n\n            // Create render targets for sunspots (just representing brightness variation)\n            const spotsMaterial = new THREE.ShaderMaterial({\n                uniforms: {\n                    uvScale: { value: new THREE.Vector2(1, 1) }\n                },\n                vertexShader: `\n                    varying vec2 vUv;\n                    void main() {\n                        vUv = uv;\n                        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                    }\n                `,\n                fragmentShader: `\n                    uniform vec2 uvScale;\n                    varying vec2 vUv;\n                    void main() {\n                        // Create spots pattern\n                        float spotIntensity = smoothstep(0.05, 0.15, abs(sin(vUv.x * 10.0 + vUv.y * 20.0) + sin(vUv.x * 20.0 + vUv.y * 15.0)));\n                        gl_FragColor = vec4(0.0, 0.0, 0.0, mix(0.8, 0.9, spotIntensity));\n                    }\n                `\n            });\n\n            const spotsMesh = new THREE.LineSegments(spotsGeometry, new THREE.LineBasicMaterial({\n                color: 0x000000\n            }));\n            sunspotsMaterial = spotsMaterial;\n            //star.add(spotsMesh);\n\n            // Create corona effect as an add-on to the star light\n            const coronaGeometry = new THREE.SphereGeometry(STAR_RADIUS * 2, 32, 32);\n            const coronaMaterial = new THREE.MeshBasicMaterial({\n                color: 0xffffff,\n                transparent: true,\n                opacity: 0.3\n            });\n            coronaMesh = new THREE.Mesh(coronaGeometry, coronaMaterial);\n            starMesh.add(coronaMesh);\n\n            // Add star glow effect using bloom or custom shader if we have time\n        }\n\n        // Create solar collectors\n        function createSolarCollectors() {\n            for (let i = 0; i < COLLECTOR_COUNT; i++) {\n                const angle = (i / COLLECTOR_COUNT) * Math.PI * 2;\n\n                // Randomize position slightly for a more natural look\n                const radius = ORBITAL_RADIUS + (Math.random() * 1.5 - 0.75);\n                const x = Math.cos(angle) * radius;\n                const z = Math.sin(angle) * radius;\n                const y = (Math.random() * 2 - 1) + 1; // Slight variation in height\n\n                const collector = createSolarCollector(i, x, y, z);\n                solarCollectors.push(collector);\n                scene.add(collector);\n            }\n        }\n\n        // Create a solar collector panel with orbital effect\n        function createSolarCollector(index, x, y, z) {\n            // Collector plate\n            const geometry = new THREE.PlaneGeometry(2, 1.5, 1, 1);\n            // Orient the panel to face toward the star\n            geometry.rotateX(Math.PI / 2);\n\n            const material = new THREE.MeshPhongMaterial({\n                color: 0x3498db,\n                shininess: 60,\n                transparent: true,\n                opacity: 0.9\n            });\n\n            const collector = new THREE.Mesh(geometry, material);\n            collector.position.set(x, y, z);\n            collector.userData = { index };\n            collector.visible = showSolarCollectors;\n\n            // Add some details to the collector\n            const panelMaterial = new THREE.MeshPhongMaterial({\n                color: 0x0f75bc,\n                wireframe: true,\n                transparent: true,\n                opacity: 0.2\n            });\n\n            const detailGeometry = new THREE.BoxGeometry(0.1, 1.5, 2.5);\n            const detail = new THREE.Mesh(detailGeometry, panelMaterial);\n            detail.position.y = 0;\n            detail.userData = { group: \"detail\", index };\n            collector.add(detail);\n\n            // Add grid lines\n            const depthLines = createPatternLines(2, Math.PI / 2, Math.PI / 2);\n            const widthLines = createPatternLines(1.5, -Math.PI / 2, Math.PI / 2);\n\n            const frontLinesGeometry = new THREE.BufferGeometry();\n            frontLinesGeometry.setFromPoints([\n                new THREE.Vector3(-1, 0, 0), new THREE.Vector3(1, 0, 0),\n                new THREE.Vector3(-1, 1.5, 0), new THREE.Vector3(1, 1.5, 0)\n            ]);\n\n            const linesMaterial = new THREE.LineBasicMaterial({ color: 0x0d6efd, transparent: true, opacity: 0.4 });\n            const frontLines = new THREE.LineSegments(frontLinesGeometry, linesMaterial);\n\n            const backLinesGeometry = new THREE.BufferGeometry();\n            backLinesGeometry.setFromPoints([\n                new THREE.Vector3(-1, 0, 0), new THREE.Vector3(1, 0, 0),\n                new THREE.Vector3(-1, 1.5, 0), new THREE.Vector3(1, 1.5, 0)\n            ]);\n            const backLines = new THREE.LineSegments(backLinesGeometry, linesMaterial);\n\n            collector.add(frontLines);\n            collector.add(backLines);\n\n            // Store orbital data\n            collector.userData.orbitData = {\n                angle: Math.random() * Math.PI * 2,\n                speed: Math.random() * 0.01 + 0.005,\n                radius: 1,\n                phase: Math.random() * Math.PI * 2\n            };\n\n            return collector;\n        }\n\n        // Create a simple checkerboard pattern for Panel details\n        function createPatternLines(width, rotation1, rotation2) {\n            const startAngle1 = rotation1;\n            const startAngle2 = rotation1 + Math.PI / 2;\n            const endAngle1 = rotation2;\n            const endAngle2 = rotation2 + Math.PI / 2;\n\n            const points = [];\n            const widthSeg = 10;\n            const heightSeg = 5;\n\n            for (let i = -widthSeg / 2 + 0.5; i <= widthSeg / 2 - 0.5; i++) {\n                points.push(new THREE.Vector3(-width / 2, i / widthSeg * 1.5, -0.01));\n                points.push(new THREE.Vector3(width / 2, i / widthSeg * 1.5, -0.01));\n            }\n\n            for (let i = -heightSeg / 2; i <= heightSeg / 2; i++) {\n                points.push(new THREE.Vector3(i / heightSeg * width, -width / 2, -0.01));\n                points.push(new THREE.Vector3(i / heightSeg * width, width / 2, -0.01));\n            }\n\n            const geometry = new THREE.BufferGeometry().setFromPoints(points);\n            const colors = new Float32Array(geometry.attributes.position.count * 3).fill(0xd1e9ff, 0, 1);\n\n            const material = new THREE.LineBasicMaterial({\n                color: 0xd1e9ff,\n                transparent: true,\n                opacity: 0.3\n            });\n\n            return new THREE.LineSegments(geometry, material);\n        }\n\n        // Animation loop\n        function animate() {\n            requestAnimationFrame(animate);\n\n            const elapsedTime = clock.getElapsedTime();\n            const progressBar = parseFloat(progressSlider.value) / 100;\n\n            updateStarAppearance(elapsedTime);\n            updateSolarCollectors(elapsedTime, progressBar);\n\n            controls.update();\n            renderer.render(scene, camera);\n        }\n\n        // Update star appearance based on controls\n        function updateStarAppearance(elapsedTime) {\n            // Update sunspots based on slider value\n            if (sunspotsMaterial) {\n                const scale = 1 + (parseFloat(sunspotsSlider.value) * 0.5);\n                sunspotsMaterial.uniforms.uvScale.value.set(scale, scale);\n            }\n\n            // Update corona brightness\n            coronaMesh.material.opacity = parseFloat(coronaSlider.value);\n            coronaMesh.material.opacity = Math.min(0.7, parseFloat(coronaSlider.value));\n\n            // Update star brightness using point light\n            const lights = scene.children.filter(child => child.isLight);\n            if (lights.length > 0) {\n                lights[0].intensity = starBrightness * (0.3 + 0.2 * Math.sin(elapsedTime * 0.3));\n            }\n\n            // Update star color and brightness based on overall slider\n            if (starMesh && starMesh.material) {\n                starMesh.material.emissiveIntensity = starBrightness * 0.2 + 0.1;\n            }\n        }\n\n        // Update solar collectors behavior\n        function updateSolarCollectors(elapsedTime, progress) {\n            // Only let constructed collectors move if construction is active\n            const constructionRate = 0.5 + parseFloat(orbitSpeedSlider.value) * 2;\n            const timeSinceLastUpdate = elapsedTime - lastUpdated;\n\n            for (let i = 0; i < solarCollectors.length; i++) {\n                const collector = solarCollectors[i];\n\n                if (collector.visible) {\n                    // Rotate the collector slightly to simulate orbital movement\n                    if (constructionStartTime > 0) {\n                        const angle = elapsedTime * 0.05 + (i / COLLECTOR_COUNT) * Math.PI;\n                        collector.rotation.y = angle * constructionRate;\n\n                        // Update progress for drawn panels\n                        if ('orbitData' in collector.userData && progressSlider.value === '100') {\n                            collector.userData.orbitData.angle += collector.userData.orbitData.speed * timeSinceLastUpdate;\n                            if (collector.userData.orbitData.angle > Math.PI * 2) {\n                                collector.userData.orbitData.angle -= Math.PI * 2;\n                            }\n\n                            // Update panel position for orbital motion\n                            const radius = ORBITAL_RADIUS + (Math.random() * 1.5 - 0.75);\n                            const updateX = radius * Math.cos(collector.userData.orbitData.angle);\n                            const updateZ = radius * Math.sin(collector.userData.orbitData.angle);\n                            collector.position.x = updateX;\n                            collector.position.z = updateZ;\n                        }\n                    }\n                }\n            }\n\n            lastUpdated = elapsedTime;\n        }\n\n        // Construction control functions\n        function startConstruction() {\n            constructionStartTime = clock.getElapsedTime();\n            startBtn.classList.add('running');\n            startBtn.disabled = true;\n            pauseBtn.disabled = false;\n        }\n\n        function pauseConstruction() {\n            constructionStartTime = 0;\n            startBtn.classList.remove('running');\n            startBtn.disabled = false;\n            pauseBtn.disabled = true;\n        }\n\n        function updateProgress() {\n            // When progress slider is moved, update the progress bar\n            const progress = parseFloat(progressSlider.value);\n            progressLabel.textContent = progress + '%';\n            progressPercent.textContent = progress + '%';\n\n            // Calculate progress of construction (in terms of collectors built)\n            const visibleCount = Math.floor(COLLECTOR_COUNT * (progress / 100));\n\n            // Change visibility for each collector (if necessary)\n            let changedCount = 0;\n            for (let i = 0; i < solarCollectors.length; i++) {\n                const collector = solarCollectors[i];\n                if (progress >= 100 || i < visibleCount) {\n                    if (!collector.visible) {\n                        collector.visible = true;\n                        changedCount++;\n                    }\n                } else if (collector.visible) {\n                    collector.visible = false;\n                    changedCount++;\n                }\n            }\n\n            // Update stats panel\n            collectorCount.textContent = visibleCount + '/' + COLLECTOR_COUNT;\n\n            // Calculate energy production (based on solar collectors built)\n            const energyValue = visibleCount * 2.5;\n            energyProduction.textContent = energyValue.toFixed(0) + ' GW';\n\n            // Calculate time to completion if construction is active\n            if (constructionStartTime > 0) {\n                const initialTime = clock.getElapsedTime();\n                const totalCollectors = COLLECTOR_COUNT;\n                const timePerCollector = initialTime / totalAnimationTime; // Simple estimation\n\n                const timeRemaining = timePerCollector * (totalCollectors - visibleCount);\n                const minutes = Math.floor(timeRemaining / 60);\n                const seconds = Math.floor(timeRemaining % 60);\n\n                timeLeft.textContent = `~ ${minutes}m ${seconds}s`;\n            }\n        }\n\n        function toggleSolarCollectors() {\n            showSolarCollectors = showCollectorsToggle.checked;\n\n            for (let i = 0; i < solarCollectors.length; i++) {\n                solarCollectors[i].visible = showSolarCollectors;\n            }\n        }\n\n        // UI control handlers\n        function updateCorona() {\n            // Update corona effect based on slide value\n            coronaSlider.value = parseFloat(coronaSlider.value);\n            updateStarAppearance();\n        }\n\n        function updateBrightness() {\n            starBrightness = parseFloat(brightnessSlider.value);\n            updateStarAppearance();\n        }\n\n        function updateOrbitSpeed() {\n            // Update the base orbit speed\n            animationSpeed = parseFloat(orbitSpeedSlider.value);\n        }\n\n        function updateDetailLevel() {\n            // This affects proxy details (can be expanded later for visibility and quality)\n        }\n\n        // Handle window resizing\n        function onWindowResize() {\n            camera.aspect = document.getElementById('animation-canvas').clientWidth / document.getElementById('animation-canvas').clientHeight;\n            camera.updateProjectionMatrix();\n            renderer.setSize(document.getElementById('animation-canvas').clientWidth, document.getElementById('animation-canvas').clientHeight);\n        }\n\n        // Initialize the application when window loads\n        window.addEventListener('load', init);\n    </script>\n</body>\n\n</html>",
  "id": "dyson-sphere-deepseek-r1-0528-qwen8b",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Canvas",
      "Animation",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.781Z",
    "model": "deepseek-r1-0528-qwen8b",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, canvas, animation, webgl, shaders, astronomy, architecture."
  }
}
