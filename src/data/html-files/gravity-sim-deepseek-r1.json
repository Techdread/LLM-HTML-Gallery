{
  "title": "Gravity Well Simulation | Spacetime Curvature",
  "htmlContent": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Gravity Well Simulation | Spacetime Curvature</title>\r\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.min.js\"></script>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n        }\r\n\r\n        body {\r\n            overflow: hidden;\r\n            background: linear-gradient(135deg, #0f1721, #1a2639);\r\n            color: #e0f7ff;\r\n            height: 100vh;\r\n            display: flex;\r\n            flex-direction: column;\r\n        }\r\n\r\n        header {\r\n            text-align: center;\r\n            padding: 1.2rem;\r\n            background: rgba(10, 20, 35, 0.8);\r\n            border-bottom: 1px solid rgba(0, 195, 255, 0.3);\r\n            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);\r\n            z-index: 10;\r\n        }\r\n\r\n        h1 {\r\n            font-size: 2.5rem;\r\n            margin-bottom: 0.5rem;\r\n            background: linear-gradient(90deg, #00d2ff, #3a7bd5);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            text-shadow: 0 0 10px rgba(0, 210, 255, 0.3);\r\n        }\r\n\r\n        .subtitle {\r\n            font-size: 1.1rem;\r\n            opacity: 0.8;\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n        }\r\n\r\n        .container {\r\n            display: flex;\r\n            flex: 1;\r\n            overflow: hidden;\r\n        }\r\n\r\n        #canvas-container {\r\n            flex: 1;\r\n            position: relative;\r\n        }\r\n\r\n        #info-panel {\r\n            width: 320px;\r\n            background: rgba(15, 30, 45, 0.85);\r\n            border-left: 1px solid rgba(0, 195, 255, 0.3);\r\n            padding: 1.5rem;\r\n            overflow-y: auto;\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 1.5rem;\r\n            backdrop-filter: blur(5px);\r\n        }\r\n\r\n        .panel-section {\r\n            background: rgba(20, 40, 60, 0.6);\r\n            border-radius: 12px;\r\n            padding: 1.2rem;\r\n            border: 1px solid rgba(0, 195, 255, 0.2);\r\n            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\r\n        }\r\n\r\n        .panel-title {\r\n            font-size: 1.3rem;\r\n            margin-bottom: 1.2rem;\r\n            color: #00d2ff;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 0.5rem;\r\n        }\r\n\r\n        .panel-title i {\r\n            font-size: 1.5rem;\r\n        }\r\n\r\n        .control-group {\r\n            margin-bottom: 1.2rem;\r\n        }\r\n\r\n        label {\r\n            display: block;\r\n            margin-bottom: 0.5rem;\r\n            font-size: 0.95rem;\r\n            color: #a0d2ff;\r\n        }\r\n\r\n        input[type=\"range\"] {\r\n            width: 100%;\r\n            height: 6px;\r\n            background: rgba(0, 100, 150, 0.3);\r\n            border-radius: 3px;\r\n            outline: none;\r\n            -webkit-appearance: none;\r\n        }\r\n\r\n        input[type=\"range\"]::-webkit-slider-thumb {\r\n            -webkit-appearance: none;\r\n            width: 18px;\r\n            height: 18px;\r\n            border-radius: 50%;\r\n            background: #00d2ff;\r\n            cursor: pointer;\r\n            box-shadow: 0 0 8px rgba(0, 210, 255, 0.6);\r\n        }\r\n\r\n        .value-display {\r\n            text-align: right;\r\n            font-size: 0.9rem;\r\n            color: #00e5ff;\r\n            margin-top: 0.3rem;\r\n        }\r\n\r\n        .btn-group {\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 0.8rem;\r\n            margin-top: 0.5rem;\r\n        }\r\n\r\n        button {\r\n            background: linear-gradient(135deg, #0066cc, #00aaff);\r\n            color: white;\r\n            border: none;\r\n            border-radius: 6px;\r\n            padding: 0.8rem;\r\n            cursor: pointer;\r\n            font-weight: 500;\r\n            transition: all 0.3s ease;\r\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);\r\n        }\r\n\r\n        button:hover {\r\n            background: linear-gradient(135deg, #0088ff, #00ccff);\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 6px 12px rgba(0, 100, 255, 0.4);\r\n        }\r\n\r\n        button:active {\r\n            transform: translateY(1px);\r\n        }\r\n\r\n        button.clear {\r\n            background: linear-gradient(135deg, #cc3300, #ff5500);\r\n        }\r\n\r\n        button.clear:hover {\r\n            background: linear-gradient(135deg, #ff4400, #ff8844);\r\n        }\r\n\r\n        .mode-indicator {\r\n            display: inline-block;\r\n            width: 12px;\r\n            height: 12px;\r\n            border-radius: 50%;\r\n            margin-left: 8px;\r\n        }\r\n\r\n        .mode-indicator.place {\r\n            background: #00ffaa;\r\n            box-shadow: 0 0 8px #00ffaa;\r\n        }\r\n\r\n        .mode-indicator.launch {\r\n            background: #ff7700;\r\n            box-shadow: 0 0 8px #ff7700;\r\n        }\r\n\r\n        .instructions {\r\n            font-size: 0.9rem;\r\n            line-height: 1.6;\r\n            color: #a0cfff;\r\n        }\r\n\r\n        .instructions ul {\r\n            padding-left: 1.2rem;\r\n            margin: 0.8rem 0;\r\n        }\r\n\r\n        .instructions li {\r\n            margin-bottom: 0.6rem;\r\n        }\r\n\r\n        .legend {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            margin-top: 1rem;\r\n        }\r\n\r\n        .legend-item {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n        }\r\n\r\n        .legend-color {\r\n            width: 20px;\r\n            height: 20px;\r\n            border-radius: 50%;\r\n            margin-bottom: 0.3rem;\r\n        }\r\n\r\n        .particle-trail {\r\n            position: absolute;\r\n            bottom: 20px;\r\n            left: 20px;\r\n            color: rgba(255, 255, 255, 0.7);\r\n            font-size: 0.9rem;\r\n            background: rgba(0, 0, 0, 0.4);\r\n            padding: 8px 12px;\r\n            border-radius: 6px;\r\n        }\r\n\r\n        .particle-count {\r\n            font-weight: bold;\r\n            color: #ffcc00;\r\n        }\r\n\r\n        @media (max-width: 900px) {\r\n            .container {\r\n                flex-direction: column;\r\n            }\r\n\r\n            #info-panel {\r\n                width: 100%;\r\n                height: 300px;\r\n                border-left: none;\r\n                border-top: 1px solid rgba(0, 195, 255, 0.3);\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <header>\r\n        <h1>Spacetime Curvature Simulator</h1>\r\n        <p class=\"subtitle\">Visualize how massive objects warp spacetime and bend the trajectories of particles</p>\r\n    </header>\r\n\r\n    <div class=\"container\">\r\n        <div id=\"canvas-container\">\r\n            <div class=\"particle-trail\">Active Particles: <span class=\"particle-count\">0</span></div>\r\n        </div>\r\n\r\n        <div id=\"info-panel\">\r\n            <div class=\"panel-section\">\r\n                <h2 class=\"panel-title\"><i class=\"icon\">üåå</i> Simulation Controls</h2>\r\n\r\n                <div class=\"control-group\">\r\n                    <label>Current Mode:\r\n                        <span id=\"mode-indicator\" class=\"mode-indicator place\"></span>\r\n                        <span id=\"mode-text\">Placing Massive Objects</span>\r\n                    </label>\r\n                    <div class=\"btn-group\">\r\n                        <button id=\"mode-place\">Place Objects</button>\r\n                        <button id=\"mode-launch\">Launch Particles</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"control-group\">\r\n                    <label for=\"mass-slider\">Object Mass: <span id=\"mass-value\">10</span> Solar Masses</label>\r\n                    <input type=\"range\" id=\"mass-slider\" min=\"1\" max=\"50\" value=\"10\">\r\n                </div>\r\n\r\n                <div class=\"control-group\">\r\n                    <label for=\"velocity-slider\">Particle Velocity: <span id=\"velocity-value\">0.8</span> c</label>\r\n                    <input type=\"range\" id=\"velocity-slider\" min=\"0.1\" max=\"1.5\" value=\"0.8\" step=\"0.05\">\r\n                </div>\r\n\r\n                <div class=\"btn-group\">\r\n                    <button id=\"reset-btn\">Reset Simulation</button>\r\n                    <button id=\"clear-btn\" class=\"clear\">Clear Particles</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"panel-section\">\r\n                <h2 class=\"panel-title\"><i class=\"icon\">ü™ê</i> How to Use</h2>\r\n                <div class=\"instructions\">\r\n                    <ul>\r\n                        <li><strong>Place massive objects:</strong> Switch to \"Place Objects\" mode and click anywhere on\r\n                            the grid to create stars or black holes</li>\r\n                        <li><strong>Launch particles:</strong> Switch to \"Launch Particles\" mode and click to launch\r\n                            particles with the selected velocity</li>\r\n                        <li><strong>Adjust mass:</strong> Use the slider to change the mass of objects before placing\r\n                            them</li>\r\n                        <li><strong>Adjust velocity:</strong> Control how fast particles travel through spacetime</li>\r\n                        <li><strong>Camera controls:</strong> Orbit: drag to rotate ‚Ä¢ Pan: right-click drag ‚Ä¢ Zoom:\r\n                            scroll wheel</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"panel-section\">\r\n                <h2 class=\"panel-title\"><i class=\"icon\">üî≠</i> Visualization Legend</h2>\r\n                <div class=\"legend\">\r\n                    <div class=\"legend-item\">\r\n                        <div class=\"legend-color\" style=\"background: #ffaa00;\"></div>\r\n                        <span>Stars</span>\r\n                    </div>\r\n                    <div class=\"legend-item\">\r\n                        <div class=\"legend-color\" style=\"background: #ff3300;\"></div>\r\n                        <span>Black Holes</span>\r\n                    </div>\r\n                    <div class=\"legend-item\">\r\n                        <div class=\"legend-color\" style=\"background: #00ccff;\"></div>\r\n                        <span>Particles</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"panel-section\">\r\n                <h2 class=\"panel-title\"><i class=\"icon\">‚öõÔ∏è</i> Physics Explained</h2>\r\n                <div class=\"instructions\">\r\n                    <p>This simulation visualizes how massive objects curve spacetime according to Einstein's theory of\r\n                        general relativity. Particles follow geodesics (straight paths in curved spacetime) which appear\r\n                        as curved trajectories to observers.</p>\r\n                    <p>The grid deformation represents the curvature of spacetime, with greater mass creating deeper\r\n                        gravity wells.</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Main Three.js variables\r\n        let scene, camera, renderer, controls;\r\n        let grid, massiveObjects = [], particles = [];\r\n        let raycaster, mouse;\r\n\r\n        // Simulation parameters\r\n        let simulationMode = 'place'; // 'place' or 'launch'\r\n        let objectMass = 10;\r\n        let particleVelocity = 0.8;\r\n        let particleCount = 0;\r\n\r\n        // Initialize the simulation\r\n        function init() {\r\n            // Create scene\r\n            scene = new THREE.Scene();\r\n            scene.background = new THREE.Color(0x0a1423);\r\n            scene.fog = new THREE.Fog(0x0a1423, 50, 150);\r\n\r\n            // Create camera\r\n            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n            camera.position.set(0, 15, 30);\r\n\r\n            // Create renderer\r\n            renderer = new THREE.WebGLRenderer({ antialias: true });\r\n            renderer.setSize(window.innerWidth, window.innerHeight - 80);\r\n            renderer.shadowMap.enabled = true;\r\n            document.getElementById('canvas-container').appendChild(renderer.domElement);\r\n\r\n            // Add OrbitControls\r\n            controls = new THREE.OrbitControls(camera, renderer.domElement);\r\n            controls.enableDamping = true;\r\n            controls.dampingFactor = 0.05;\r\n\r\n            // Add lighting\r\n            const ambientLight = new THREE.AmbientLight(0x333333);\r\n            scene.add(ambientLight);\r\n\r\n            const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\r\n            directionalLight.position.set(5, 15, 10);\r\n            directionalLight.castShadow = true;\r\n            scene.add(directionalLight);\r\n\r\n            // Create the spacetime grid\r\n            createGrid();\r\n\r\n            // Initialize raycaster for mouse interactions\r\n            raycaster = new THREE.Raycaster();\r\n            mouse = new THREE.Vector2();\r\n\r\n            // Event listeners\r\n            window.addEventListener('resize', onWindowResize);\r\n            renderer.domElement.addEventListener('click', onCanvasClick);\r\n\r\n            // Initialize UI controls\r\n            initControls();\r\n\r\n            // Start animation loop\r\n            animate();\r\n        }\r\n\r\n        // Create the spacetime grid\r\n        function createGrid() {\r\n            const gridSize = 40;\r\n            const divisions = 40;\r\n\r\n            // Create geometry\r\n            const geometry = new THREE.PlaneGeometry(gridSize, gridSize, divisions, divisions);\r\n\r\n            // Create material with vertex displacement\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0x1a5a7a,\r\n                wireframe: false,\r\n                transparent: true,\r\n                opacity: 0.9,\r\n                side: THREE.DoubleSide,\r\n                emissive: 0x004466,\r\n                shininess: 80,\r\n                flatShading: true\r\n            });\r\n\r\n            // Create grid mesh\r\n            grid = new THREE.Mesh(geometry, material);\r\n            grid.rotation.x = -Math.PI / 2;\r\n            grid.position.y = -1;\r\n            grid.receiveShadow = true;\r\n            scene.add(grid);\r\n\r\n            // Add a subtle wireframe overlay\r\n            const wireframe = new THREE.LineSegments(\r\n                new THREE.WireframeGeometry(geometry),\r\n                new THREE.LineBasicMaterial({ color: 0x00aaff, opacity: 0.2, transparent: true })\r\n            );\r\n            wireframe.rotation.x = -Math.PI / 2;\r\n            wireframe.position.y = -0.9;\r\n            scene.add(wireframe);\r\n        }\r\n\r\n        // Add a massive object (star or black hole)\r\n        function addMassiveObject(position, mass) {\r\n            const isBlackHole = mass > 25;\r\n            const color = isBlackHole ? 0xff3300 : 0xffaa00;\r\n            const radius = Math.min(1.5 + mass / 10, 5);\r\n\r\n            // Create sphere geometry\r\n            const geometry = new THREE.SphereGeometry(radius, 32, 32);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: color,\r\n                emissive: isBlackHole ? 0x661100 : 0x553300,\r\n                shininess: 80\r\n            });\r\n\r\n            const object = new THREE.Mesh(geometry, material);\r\n            object.position.copy(position);\r\n            object.position.y = -1;\r\n            object.mass = mass;\r\n            object.isBlackHole = isBlackHole;\r\n            object.castShadow = true;\r\n            object.receiveShadow = true;\r\n\r\n            scene.add(object);\r\n            massiveObjects.push(object);\r\n\r\n            // Add gravitational field effect\r\n            addGravityField(position, mass);\r\n\r\n            // Deform grid around the object\r\n            deformGridAroundObject(position, mass);\r\n        }\r\n\r\n        // Add a visual representation of the gravitational field\r\n        function addGravityField(position, mass) {\r\n            const intensity = Math.min(1, mass / 20);\r\n            const rings = 8;\r\n            const maxRadius = 10 + mass * 1.5;\r\n\r\n            for (let i = 0; i < rings; i++) {\r\n                const radius = (i + 1) * maxRadius / rings;\r\n                const ringGeometry = new THREE.RingGeometry(radius - 0.2, radius, 32);\r\n                const ringMaterial = new THREE.MeshBasicMaterial({\r\n                    color: i === rings - 1 ? 0xff5500 : 0x00aaff,\r\n                    side: THREE.DoubleSide,\r\n                    transparent: true,\r\n                    opacity: 0.15 * (1 - i / rings) * intensity\r\n                });\r\n\r\n                const ring = new THREE.Mesh(ringGeometry, ringMaterial);\r\n                ring.position.copy(position);\r\n                ring.position.y = -0.5;\r\n                ring.rotation.x = Math.PI / 2;\r\n                scene.add(ring);\r\n            }\r\n        }\r\n\r\n        // Deform grid around a massive object\r\n        function deformGridAroundObject(position, mass) {\r\n            const gridGeometry = grid.geometry;\r\n            const vertices = gridGeometry.attributes.position.array;\r\n            const strength = mass * 0.15;\r\n            const range = 10 + mass * 1.2;\r\n\r\n            for (let i = 0; i < vertices.length; i += 3) {\r\n                const x = vertices[i];\r\n                const z = vertices[i + 2];\r\n\r\n                const dx = x - position.x;\r\n                const dz = z - position.z;\r\n                const distance = Math.sqrt(dx * dx + dz * dz);\r\n\r\n                if (distance < range) {\r\n                    // Calculate displacement (inverse square law)\r\n                    const displacement = strength / (1 + distance);\r\n                    vertices[i + 1] = -displacement;\r\n                }\r\n            }\r\n\r\n            gridGeometry.attributes.position.needsUpdate = true;\r\n            gridGeometry.computeVertexNormals();\r\n        }\r\n\r\n        // Launch a particle from a position\r\n        function launchParticle(position) {\r\n            // Create particle geometry\r\n            const geometry = new THREE.SphereGeometry(0.3, 16, 16);\r\n            const material = new THREE.MeshPhongMaterial({\r\n                color: 0x00ccff,\r\n                emissive: 0x0044aa\r\n            });\r\n\r\n            const particle = new THREE.Mesh(geometry, material);\r\n            particle.position.copy(position);\r\n            particle.position.y = 0;\r\n            particle.velocity = new THREE.Vector3(\r\n                (Math.random() - 0.5) * particleVelocity,\r\n                0,\r\n                (Math.random() - 0.5) * particleVelocity\r\n            );\r\n            particle.trail = [];\r\n\r\n            scene.add(particle);\r\n            particles.push(particle);\r\n\r\n            // Create trail\r\n            const trailMaterial = new THREE.LineBasicMaterial({\r\n                color: 0x00aaff,\r\n                transparent: true,\r\n                opacity: 0.7\r\n            });\r\n\r\n            const trailGeometry = new THREE.BufferGeometry();\r\n            const trail = new THREE.Line(trailGeometry, trailMaterial);\r\n            scene.add(trail);\r\n            particle.trailLine = trail;\r\n\r\n            particleCount++;\r\n            updateParticleCount();\r\n        }\r\n\r\n        // Update particle count display\r\n        function updateParticleCount() {\r\n            document.querySelector('.particle-count').textContent = particleCount;\r\n        }\r\n\r\n        // Handle canvas click\r\n        function onCanvasClick(event) {\r\n            // Calculate mouse position in normalized device coordinates\r\n            const rect = renderer.domElement.getBoundingClientRect();\r\n            mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;\r\n            mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;\r\n\r\n            // Update the raycaster\r\n            raycaster.setFromCamera(mouse, camera);\r\n\r\n            // Find intersections with the grid\r\n            const intersects = raycaster.intersectObject(grid);\r\n\r\n            if (intersects.length > 0) {\r\n                const point = intersects[0].point;\r\n\r\n                if (simulationMode === 'place') {\r\n                    // Place a massive object\r\n                    addMassiveObject(point, objectMass);\r\n                } else {\r\n                    // Launch a particle\r\n                    launchParticle(point);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Initialize UI controls\r\n        function initControls() {\r\n            // Mode switching\r\n            document.getElementById('mode-place').addEventListener('click', () => {\r\n                simulationMode = 'place';\r\n                updateModeUI();\r\n            });\r\n\r\n            document.getElementById('mode-launch').addEventListener('click', () => {\r\n                simulationMode = 'launch';\r\n                updateModeUI();\r\n            });\r\n\r\n            // Mass slider\r\n            const massSlider = document.getElementById('mass-slider');\r\n            const massValue = document.getElementById('mass-value');\r\n\r\n            massSlider.addEventListener('input', () => {\r\n                objectMass = parseInt(massSlider.value);\r\n                massValue.textContent = objectMass;\r\n            });\r\n\r\n            // Velocity slider\r\n            const velocitySlider = document.getElementById('velocity-slider');\r\n            const velocityValue = document.getElementById('velocity-value');\r\n\r\n            velocitySlider.addEventListener('input', () => {\r\n                particleVelocity = parseFloat(velocitySlider.value);\r\n                velocityValue.textContent = particleVelocity.toFixed(2);\r\n            });\r\n\r\n            // Reset button\r\n            document.getElementById('reset-btn').addEventListener('click', resetSimulation);\r\n\r\n            // Clear particles button\r\n            document.getElementById('clear-btn').addEventListener('click', clearParticles);\r\n\r\n            // Initial UI update\r\n            updateModeUI();\r\n        }\r\n\r\n        // Update mode UI\r\n        function updateModeUI() {\r\n            const modeIndicator = document.getElementById('mode-indicator');\r\n            const modeText = document.getElementById('mode-text');\r\n\r\n            if (simulationMode === 'place') {\r\n                modeIndicator.className = 'mode-indicator place';\r\n                modeText.textContent = 'Placing Massive Objects';\r\n            } else {\r\n                modeIndicator.className = 'mode-indicator launch';\r\n                modeText.textContent = 'Launching Particles';\r\n            }\r\n        }\r\n\r\n        // Reset simulation\r\n        function resetSimulation() {\r\n            // Remove all massive objects\r\n            massiveObjects.forEach(obj => scene.remove(obj));\r\n            massiveObjects = [];\r\n\r\n            // Remove all particles\r\n            clearParticles();\r\n\r\n            // Reset grid\r\n            const gridGeometry = grid.geometry;\r\n            const vertices = gridGeometry.attributes.position.array;\r\n\r\n            for (let i = 0; i < vertices.length; i += 3) {\r\n                vertices[i + 1] = -1;\r\n            }\r\n\r\n            gridGeometry.attributes.position.needsUpdate = true;\r\n            gridGeometry.computeVertexNormals();\r\n        }\r\n\r\n        // Clear all particles\r\n        function clearParticles() {\r\n            particles.forEach(particle => {\r\n                scene.remove(particle);\r\n                scene.remove(particle.trailLine);\r\n            });\r\n\r\n            particles = [];\r\n            particleCount = 0;\r\n            updateParticleCount();\r\n        }\r\n\r\n        // Handle window resize\r\n        function onWindowResize() {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight - 80);\r\n        }\r\n\r\n        // Physics update for particles\r\n        function updatePhysics() {\r\n            particles.forEach(particle => {\r\n                // Apply gravity from massive objects\r\n                massiveObjects.forEach(obj => {\r\n                    const direction = new THREE.Vector3().subVectors(obj.position, particle.position);\r\n                    const distanceSq = direction.lengthSq();\r\n\r\n                    if (distanceSq > 0.1) {\r\n                        const force = obj.mass * 0.0005 / distanceSq;\r\n                        direction.normalize().multiplyScalar(force);\r\n                        particle.velocity.add(direction);\r\n                    }\r\n                });\r\n\r\n                // Update position\r\n                particle.position.add(particle.velocity);\r\n\r\n                // Add current position to trail\r\n                particle.trail.push(particle.position.clone());\r\n\r\n                // Keep trail at a reasonable length\r\n                if (particle.trail.length > 100) {\r\n                    particle.trail.shift();\r\n                }\r\n\r\n                // Update trail geometry\r\n                const trailGeometry = particle.trailLine.geometry;\r\n                const positions = new Float32Array(particle.trail.length * 3);\r\n\r\n                particle.trail.forEach((pos, i) => {\r\n                    positions[i * 3] = pos.x;\r\n                    positions[i * 3 + 1] = pos.y + 0.1;\r\n                    positions[i * 3 + 2] = pos.z;\r\n                });\r\n\r\n                trailGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\r\n                trailGeometry.attributes.position.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        // Animation loop\r\n        function animate() {\r\n            requestAnimationFrame(animate);\r\n\r\n            // Update physics\r\n            updatePhysics();\r\n\r\n            // Update controls\r\n            controls.update();\r\n\r\n            // Render scene\r\n            renderer.render(scene, camera);\r\n        }\r\n\r\n        // Initialize the simulation when the page loads\r\n        window.addEventListener('load', init);\r\n    </script>\r\n</body>\r\n\r\n</html>",
  "id": "gravity-sim-deepseek-r1",
  "metadata": {
    "prompt": "Imported from one-page directory",
    "tags": [
      "Three.js",
      "3D Graphics",
      "Animation",
      "Particles",
      "WebGL",
      "Shaders",
      "Astronomy",
      "Simulation",
      "Architecture"
    ],
    "timestamp": "2025-08-04T21:59:57.772Z",
    "model": "deepseek-r1",
    "description": "An interactive 3D visualization built with Three.js featuring three.js, 3d graphics, animation, particles, webgl, shaders, astronomy, simulation, architecture."
  }
}
