'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import {
    Code,
    Maximize,
    Minimize,
    Copy,
    ExternalLink,
    Check,
    AlertTriangle,
    Download,
    Share2
} from 'lucide-react'
import { HtmlFileData } from '@/lib/types'

interface LLMHtmlViewerProps {
    data: HtmlFileData
    height?: number
    defaultShowCode?: boolean
    className?: string
    viewMode?: 'side-by-side' | 'preview-only' | 'code-only'
}

export const LLMHtmlViewer: React.FC<LLMHtmlViewerProps> = ({
    data,
    height = 600,
    defaultShowCode = false,
    className = '',
    viewMode = 'side-by-side'
}) => {
    const [showCode, setShowCode] = useState(defaultShowCode || viewMode === 'side-by-side')
    const [isFullscreen, setIsFullscreen] = useState(false)
    const [copied, setCopied] = useState(false)
    const [iframeError, setIframeError] = useState(false)
    const iframeRef = useRef<HTMLIFrameElement>(null)
    const containerRef = useRef<HTMLDivElement>(null)

    // Create a data URL for the iframe to avoid CORS issues
    const htmlDataUrl = `data:text/html;charset=utf-8,${encodeURIComponent(data.htmlContent)}`

    // Handle fullscreen
    useEffect(() => {
        const handleEsc = (e: KeyboardEvent) => {
            if (e.key === 'Escape' && isFullscreen) {
                setIsFullscreen(false)
            }
        }

        if (isFullscreen) {
            document.addEventListener('keydown', handleEsc)
            document.body.style.overflow = 'hidden'
        } else {
            document.body.style.overflow = 'unset'
        }

        return () => {
            document.removeEventListener('keydown', handleEsc)
            document.body.style.overflow = 'unset'
        }
    }, [isFullscreen])

    const copyCode = async () => {
        try {
            await navigator.clipboard.writeText(data.htmlContent)
            setCopied(true)
            setTimeout(() => setCopied(false), 2000)
        } catch (err) {
            console.error('Failed to copy:', err)
        }
    }

    const downloadHtml = () => {
        const blob = new Blob([data.htmlContent], { type: 'text/html' })
        const url = URL.createObjectURL(blob)
        const a = document.createElement('a')
        a.href = url
        a.download = `${data.title || data.id}.html`
        document.body.appendChild(a)
        a.click()
        document.body.removeChild(a)
        URL.revokeObjectURL(url)
    }

    const shareExample = async () => {
        try {
            if (navigator.share) {
                await navigator.share({
                    title: data.title,
                    text: data.metadata.description || `HTML example: ${data.title}`,
                    url: window.location.href
                })
            } else {
                // Fallback: copy URL to clipboard
                await navigator.clipboard.writeText(window.location.href)
                setCopied(true)
                setTimeout(() => setCopied(false), 2000)
            }
        } catch (err) {
            console.error('Failed to share:', err)
        }
    }

    const openInNewTab = () => {
        const blob = new Blob([data.htmlContent], { type: 'text/html' })
        const url = URL.createObjectURL(blob)
        window.open(url, '_blank')
        // Clean up after a delay
        setTimeout(() => URL.revokeObjectURL(url), 1000)
    }

    const formatDate = (date: Date | string | number) => {
        // Convert to Date object if it's not already
        let dateObj: Date;
        
        if (date instanceof Date) {
            dateObj = date;
        } else {
            dateObj = new Date(date);
        }
        
        // Check if the date is valid
        if (!dateObj || isNaN(dateObj.getTime())) {
            return 'Invalid Date';
        }
        
        return new Intl.DateTimeFormat('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        }).format(dateObj)
    }

    const shouldShowSplitView = showCode && viewMode === 'side-by-side'
    const showPreview = viewMode !== 'code-only'
    const showCodePanel = (showCode && viewMode !== 'preview-only') || viewMode === 'code-only'

    return (
        <>
            <Card className={`overflow-hidden ${className}`} ref={containerRef}>
                {/* Header */}
                <div className="border-b bg-gray-50 dark:bg-gray-900 p-4">
                    <div className="flex justify-between items-start">
                        <div className="flex-1">
                            <h3 className="text-lg font-semibold mb-2">{data.title}</h3>
                            {data.metadata?.model && (
                                <p className="text-sm text-gray-600 dark:text-gray-400 mb-1">
                                    Generated by {data.metadata.model}
                                    {data.metadata.timestamp && ` â€¢ ${formatDate(data.metadata.timestamp)}`}
                                </p>
                            )}
                            {data.metadata?.description && (
                                <p className="text-sm text-gray-700 dark:text-gray-300 mb-2">
                                    {data.metadata.description}
                                </p>
                            )}
                            {data.metadata?.tags && data.metadata.tags.length > 0 && (
                                <div className="flex flex-wrap gap-2 mt-2">
                                    {data.metadata.tags.map((tag, i) => (
                                        <span
                                            key={i}
                                            className="px-2 py-1 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs rounded"
                                        >
                                            {tag}
                                        </span>
                                    ))}
                                </div>
                            )}
                        </div>

                        {/* Action Buttons */}
                        <div className="flex gap-2 ml-4">
                            {viewMode === 'side-by-side' && (
                                <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => setShowCode(!showCode)}
                                    className="gap-2"
                                >
                                    <Code className="h-4 w-4" />
                                    {showCode ? 'Hide' : 'Show'} Code
                                </Button>
                            )}
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={downloadHtml}
                                className="gap-2"
                            >
                                <Download className="h-4 w-4" />
                                Download
                            </Button>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={shareExample}
                                className="gap-2"
                            >
                                <Share2 className="h-4 w-4" />
                                Share
                            </Button>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={openInNewTab}
                                className="gap-2"
                            >
                                <ExternalLink className="h-4 w-4" />
                                Open
                            </Button>
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setIsFullscreen(true)}
                                className="gap-2"
                            >
                                <Maximize className="h-4 w-4" />
                                Fullscreen
                            </Button>
                        </div>
                    </div>

                    {data.metadata?.prompt && (
                        <div className="mt-3 p-3 bg-blue-50 dark:bg-blue-950 rounded-md">
                            <p className="text-sm font-medium text-blue-900 dark:text-blue-100 mb-1">
                                Prompt:
                            </p>
                            <p className="text-sm text-gray-700 dark:text-gray-300">
                                {data.metadata.prompt}
                            </p>
                        </div>
                    )}
                </div>

                {/* Content Area */}
                <div className={shouldShowSplitView ? 'grid grid-cols-1 lg:grid-cols-2' : ''}>
                    {/* Code View */}
                    {showCodePanel && (
                        <div className={`${shouldShowSplitView ? 'border-r' : ''} bg-gray-900 overflow-hidden`}>
                            <div className="flex justify-between items-center p-3 border-b border-gray-800">
                                <span className="text-sm text-gray-400">HTML</span>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={copyCode}
                                    className="text-gray-400 hover:text-gray-200"
                                >
                                    {copied ? (
                                        <Check className="h-4 w-4" />
                                    ) : (
                                        <Copy className="h-4 w-4" />
                                    )}
                                </Button>
                            </div>
                            <pre className="p-4 overflow-auto text-sm text-gray-300" style={{ height: `${height}px` }}>
                                <code>{data.htmlContent}</code>
                            </pre>
                        </div>
                    )}

                    {/* Preview */}
                    {showPreview && (
                        <div className="relative bg-gray-100 dark:bg-gray-800">
                            {iframeError && (
                                <div className="absolute top-4 left-4 right-4 z-10 p-4 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-md border border-red-200 dark:border-red-800">
                                    <div className="flex items-center gap-2">
                                        <AlertTriangle className="h-4 w-4" />
                                        <span className="text-sm">Failed to load preview. The HTML might contain errors.</span>
                                    </div>
                                </div>
                            )}

                            <iframe
                                ref={iframeRef}
                                src={htmlDataUrl}
                                className="w-full bg-white"
                                style={{ height: `${height}px` }}
                                sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
                                onError={() => setIframeError(true)}
                                onLoad={() => setIframeError(false)}
                            />
                        </div>
                    )}
                </div>
            </Card>

            {/* Fullscreen Modal */}
            {isFullscreen && (
                <div className="fixed inset-0 z-50 bg-black">
                    <div className="absolute top-4 right-4 flex gap-2 z-10">
                        {viewMode === 'side-by-side' && (
                            <Button
                                variant="secondary"
                                size="sm"
                                onClick={() => setShowCode(!showCode)}
                                className="bg-white/10 hover:bg-white/20 backdrop-blur"
                            >
                                <Code className="h-4 w-4 mr-2" />
                                {showCode ? 'Hide' : 'Show'} Code
                            </Button>
                        )}
                        <Button
                            variant="secondary"
                            size="sm"
                            onClick={() => setIsFullscreen(false)}
                            className="bg-white/10 hover:bg-white/20 backdrop-blur"
                        >
                            <Minimize className="h-4 w-4 mr-2" />
                            Exit Fullscreen
                        </Button>
                    </div>

                    {shouldShowSplitView ? (
                        <div className="h-full grid grid-cols-1 lg:grid-cols-2">
                            {/* Code View in Fullscreen */}
                            <div className="bg-gray-900 overflow-hidden">
                                <div className="flex justify-between items-center p-3 border-b border-gray-800">
                                    <span className="text-sm text-gray-400">HTML</span>
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={copyCode}
                                        className="text-gray-400 hover:text-gray-200"
                                    >
                                        {copied ? (
                                            <Check className="h-4 w-4" />
                                        ) : (
                                            <Copy className="h-4 w-4" />
                                        )}
                                    </Button>
                                </div>
                                <pre className="p-4 overflow-auto h-full text-sm text-gray-300">
                                    <code>{data.htmlContent}</code>
                                </pre>
                            </div>

                            {/* Preview in Fullscreen */}
                            <iframe
                                src={htmlDataUrl}
                                className="w-full h-full bg-white"
                                sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
                            />
                        </div>
                    ) : (
                        <iframe
                            src={htmlDataUrl}
                            className="w-full h-full bg-white"
                            sandbox="allow-scripts allow-same-origin allow-popups allow-forms"
                        />
                    )}
                </div>
            )}
        </>
    )
}
